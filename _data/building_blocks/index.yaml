- building_block_id: inline-token-generator
  type: Authentication
  category: Overview
  sorttype: ''
  sortcat: A1
  name: Inline Token Generator
  description: Allowing developers to request token inline with documentation.
  image: '' 
  tags: Authentication
- building_block_id: authentication-overview
  type: Authentication
  category: Overview
  sorttype: ''
  sortcat: A2
  name: Authentication Overview
  description: >-
    An overview of how authentication is handled for a platform, and which
    formats are supported, setting expectations for consumers.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-authentication.png
  tags: Authentication
- building_block_id: authentication-tester
  type: Authentication
  category: Overview
  sorttype: ''
  sortcat: A3
  name: Authentication Tester
  description: >-
    Providing a testing tool for authentication, that allows developers to test
    key and Basic Auth to oAuth, to help them understand how authentication
    works and if they are using proper credentials.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-authentication-test.png
  tags: Authentication
- building_block_id: oauth-scopes
  type: Authentication
  category: Overview
  sorttype: ''
  sortcat: A4
  name: OAuth Scopes
  description: >-
    Providing a dedicated page or section to listing out the different OAuth
    scopes used by a platform. Providing a transparent window into all the
    scopes available, and some of the logic into why they exist.
  image: ''
  tags: Authentication
- building_block_id: test-token-generator
  type: Authentication
  category: Overview
  sorttype: ''
  sortcat: A5
  name: Test Token Generator
  description: >-
    Providing the ability to generate test tokens for use in authenticating with
    the API.
  image: ''
  tags: Authentication
- building_block_id: basic-auth
  type: Authentication
  category: Approaches
  sorttype: ''
  sortcat: A6
  name: Basic Auth
  description: >-
    Usage of the basic authentication format that is part of the standard HTTP
    operations, employing a username and password as credentials for accessing
    API resources.
  image: ''
  tags: Authentication
- building_block_id: key-access
  type: Authentication
  category: Approaches
  sorttype: ''
  sortcat: A7
  name: Key Access
  description: >-
    Providing simple tokens, often called API key as a common way to access to
    APIs, issuing one to each developer and per application they register.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-key.png
  tags: Authentication
- building_block_id: json-web-token
  type: Authentication
  category: Approaches
  sorttype: ''
  sortcat: A8
  name: JSON Web Token
  description: >-
    JSON Web Token (JWT) is an open standard (RFC 7519) that defines a compact
    and self-contained way for securely transmitting information between parties
    as a JSON object.
  image: ''
  tags: Authentication
- building_block_id: oauth
  type: Authentication
  category: Approaches
  sorttype: ''
  sortcat: A9
  name: oAuth
  description: >-
    Providing an oAuth layer to API operations, securing high value APIs, while
    also opening up a conversation between an API platform, developers, and
    end-users regarding the access of their content and data.
  image: ''
  tags: Authentication
- building_block_id: application-only
  type: Authentication
  category: Additional
  sorttype: ''
  sortcat: A10
  name: Application Only
  description: Provides authenticated requests on behalf of the application only.
  image: ''
  tags: Authentication
- building_block_id: pin-based-authorization
  type: Authentication
  category: Additional
  sorttype: ''
  sortcat: A11
  name: PIN Based Authorization
  description: >-
    For applications which cannot access or embed a web browser, such as
    command-line applications, embedded systems, game consoles, and certain
    types of mobile apps.
  image: ''
  tags: Authentication
- building_block_id: two-factor-authentication
  type: Authentication
  category: Additional
  sorttype: ''
  sortcat: A12
  name: Two Factor Authentication
  description: >-
    Allowing API consumers to turn on and employ two factor authentication,
    requiring an additional component to making changes to account security,
    either by  SMS or authenticator app.
  image: ''
  tags: Authentication
- building_block_id: dedicated-branding-page
  type: Branding
  category: Overview
  sorttype: ''
  sortcat: ''
  name: Dedicated Branding Page
  description: >-
    Have a single page, dedicated to branding, providing easy access to all of
    the branding related building blocks, in a single, centralized location.
    Make it easy to find off of the navigation for the main website, and
    developer portal area.
  image: ''
  tags: ''
- building_block_id: give-credit
  type: Branding
  category: Overview
  sorttype: ''
  sortcat: ''
  name: Give Credit
  description: >-
    Explaining to API consumers that they should give credit where appropriate,
    and use common sense when it comes to integrations and giving proper credit
    to value generated via the API.
  image: ''
  tags: Branding
- building_block_id: bring-value
  type: Branding
  category: Overview
  sorttype: ''
  sortcat: ''
  name: Bring Value
  description: >-
    Explaining to API consumers that they should bring value to the platform,
    and not extract more value than they create. Demonstrating that this balance
    is needed, to make the API integration relationship work.
  image: ''
  tags: Branding
- building_block_id: use-of-brand-name
  type: Branding
  category: Overview
  sorttype: ''
  sortcat: ''
  name: Use of Brand Name
  description: >-
    How should API consumers understand when it comes to using brand names in
    their tools, services, and any materials they produce to support their work.
  image: ''
  tags: Branding
- building_block_id: use-of-brand-logo
  type: Branding
  category: Overview
  sorttype: ''
  sortcat: ''
  name: Use of Brand Logo
  description: >-
    How should API consumers understand when it comes to using logos in their
    tools, services, and any materials they produce to support their work.
  image: ''
  tags: Branding
- building_block_id: use-of-product-titles
  type: Branding
  category: Overview
  sorttype: ''
  sortcat: ''
  name: Use of Product Titles
  description: >-
    How should API consumers understand when it comes to using product titles in
    their tools, services, and any materials they produce to support their work.
  image: ''
  tags: Branding
- building_block_id: naming-your-application
  type: Branding
  category: Overview
  sorttype: ''
  sortcat: ''
  name: Naming Your Application
  description: >-
    What are the considerations when an API consumers is naming their
    application that is build on top of an API? Are there any reserved words, or
    things consumers should be considering?
  image: ''
  tags: Branding
- building_block_id: image-assets
  type: Branding
  category: Assets
  sorttype: ''
  sortcat: ''
  name: Image Assets
  description: >-
    What image assets are available to support and encourage branding efforts by
    API consumers? Could be logos, all the way to banners--anything image
    related that supports branding.
  image: ''
  tags: Branding
- building_block_id: icon-assets
  type: Branding
  category: Assets
  sorttype: ''
  sortcat: ''
  name: Icon Assets
  description: >-
    What image icon assets are available to support and encourage branding
    efforts by API consumers? Could be logos, all the way to banners--anything
    image related that supports branding.
  image: ''
  tags: Branding
- building_block_id: other-assets
  type: Branding
  category: Assets
  sorttype: ''
  sortcat: ''
  name: Other Assets
  description: >-
    What other assets are available at your company that you use to help guide
    internal branding strategies, that maybe you could repurpose, and share with
    the developer community, helping them be more successful in representing
    your brand.
  image: ''
  tags: Branding
- building_block_id: content-display-requirements
  type: Branding
  category: Requirements
  sorttype: ''
  sortcat: ''
  name: Content Display Requirements
  description: >-
    What are the considerations for how content can be displayed. Any
    restrictions or considerations for displaying within web and mobile
    applications.
  image: ''
  tags: Branding
- building_block_id: data-display-requirements
  type: Branding
  category: Requirements
  sorttype: ''
  sortcat: ''
  name: Data Display Requirements
  description: >-
    What are the considerations for how data can be displayed. Any restrictions
    or considerations for displaying within web and mobile applications.
  image: ''
  tags: Branding
- building_block_id: linking-requirements
  type: Branding
  category: Requirements
  sorttype: ''
  sortcat: ''
  name: Linking Requirements
  description: >-
    What are your linking requirements? Along with images and other assets, what
    URLs should be attributed to as part of the process. Make the instructions
    clear and simple, with all URLs easily available, throughout all assets, and
    branding related tooling.
  image: ''
  tags: Branding
- building_block_id: branding-examples
  type: Branding
  category: Guides
  sorttype: ''
  sortcat: ''
  name: Branding Examples
  description: >-
    What are some existing examples of how brand can be used. Are there samples,
    or actual case studies of existing integrators that can show how branding is
    done properly, or maybe done improperly.
  image: ''
  tags: Branding
- building_block_id: full-style-guide
  type: Branding
  category: Guides
  sorttype: ''
  sortcat: ''
  name: Full Style Guide
  description: >-
    Is a full style guide available, using in PDF or HTML format that API
    consumers can use to understand all branding and style guidelines?
  image: ''
  tags: Branding
- building_block_id: command-line-interface
  type: CLI
  category: CLI
  sorttype: ''
  sortcat: ''
  name: Command Line Interface
  description: A page dedicated to the overview of a command line interface CLI
  image: ''
  tags: Command line interface
- building_block_id: request-url-editor
  type: Client
  category: Request Editor
  sorttype: ''
  sortcat: ''
  name: Request URL Editor
  description: >-
    Having full control to edit any part of the URL for any request being made
    through the client.
  image: ''
  tags: 'Clients,Clients'
- building_block_id: request-headers-editor
  type: Client
  category: Request Editor
  sorttype: ''
  sortcat: ''
  name: Request Headers Editor
  description: >-
    Being able to add, edit, and remove any headers that will be sent with any
    request being made through the client.
  image: ''
  tags: Clients
- building_block_id: cookies-manager
  type: Client
  category: Request Editor
  sorttype: ''
  sortcat: ''
  name: Cookies Manager
  description: >-
    Being able create, edit, and remove cookies that control any session of a
    request being made through the client.
  image: ''
  tags: Clients
- building_block_id: request-method-manager
  type: Client
  category: Request Editor
  sorttype: ''
  sortcat: ''
  name: Request Method Manager
  description: >-
    Allowing for the use of all HTTP verbs, identify each method that is being
    made as part of a request through the client.
  image: ''
  tags: Clients
- building_block_id: request-body-editor
  type: Client
  category: Request Editor
  sorttype: ''
  sortcat: ''
  name: Request Body Editor
  description: >-
    The ability to add, edit, or remove the entire body of a request being made
    through the client.
  image: ''
  tags: Clients
- building_block_id: basic-auth
  type: Client
  category: Authentication
  sorttype: ''
  sortcat: ''
  name: Basic Auth
  description: >-
    Basic Auth is supported by an HTTP client for authentication as part of ay
    request being made.
  image: ''
  tags: Clients
- building_block_id: digest-auth
  type: Client
  category: Authentication
  sorttype: ''
  sortcat: ''
  name: Digest Auth
  description: >-
    Digest Auth is supported by an HTTP client for authentication as part of ay
    request being made.
  image: ''
  tags: Clients
- building_block_id: oauth-1.0
  type: Client
  category: Authentication
  sorttype: ''
  sortcat: ''
  name: OAuth 1.0
  description: >-
    OAuth 1.0a is supported by an HTTP client for authentication as part of ay
    request being made.
  image: ''
  tags: Clients
- building_block_id: oauth-2.0
  type: Client
  category: Authentication
  sorttype: ''
  sortcat: ''
  name: OAuth 2.0
  description: >-
    OAuth 2.0 is supported by an HTTP client for authentication as part of ay
    request being made.
  image: ''
  tags: Clients
- building_block_id: separate-environments
  type: Client
  category: Environment
  sorttype: ''
  sortcat: ''
  name: Separate Environments
  description: >-
    The HTTP client allows for establishing of separate environments to make
    requests to APIs in different modes.
  image: ''
  tags: Clients
- building_block_id: saved-variables
  type: Client
  category: Environment
  sorttype: ''
  sortcat: ''
  name: Saved Variables
  description: >-
    Allow for naming and saving of variables that can be used across API
    requests, in separate environments.
  image: ''
  tags: Clients
- building_block_id: save-requests
  type: Client
  category: Response Viewer
  sorttype: ''
  sortcat: ''
  name: Save Requests
  description: >-
    Allow individual requests to be saved, and run again in the future with the
    saved configuration.
  image: ''
  tags: Clients
- building_block_id: xml-viewer
  type: Client
  category: Response Viewer
  sorttype: ''
  sortcat: ''
  name: XML Viewer
  description: >-
    Provide a viewer for seeing the XML returned, and be able to copy, paste,
    save, and other features.
  image: ''
  tags: Clients
- building_block_id: json-viewer
  type: Client
  category: Response Viewer
  sorttype: ''
  sortcat: ''
  name: JSON Viewer
  description: >-
    Provide a viewer for seeing the JSON returned, and be able to copy, paste,
    save, and other features.
  image: ''
  tags: Clients
- building_block_id: raw-viewer
  type: Client
  category: Response Viewer
  sorttype: ''
  sortcat: ''
  name: RAW Viewer
  description: >-
    Provide a viewer for seeing the raw response returned, and be able to copy,
    paste, save, and other features.
  image: ''
  tags: Clients
- building_block_id: search
  type: Client
  category: Response Viewer
  sorttype: ''
  sortcat: ''
  name: Search
  description: >-
    Allow the searching of results, by keyword and key phase, returning the
    point in results that match search.
  image: ''
  tags: Clients
- building_block_id: collections
  type: Client
  category: Organization
  sorttype: ''
  sortcat: ''
  name: Collections
  description: >-
    Allow for requests to be saved, and stored into collections that can be
    named, organized and managed in meaningful groups.
  image: ''
  tags: Clients
- building_block_id: templates
  type: Client
  category: Organization
  sorttype: ''
  sortcat: ''
  name: Templates
  description: >-
    Provide starter templates of common public APIs, allowing HTTP client to be
    immediately put to use from common definitions.
  image: ''
  tags: Clients
- building_block_id: clone-requests
  type: Client
  category: Organization
  sorttype: ''
  sortcat: ''
  name: Clone Requests
  description: >-
    Enable the HTTP client to clone existing requests, and generate new
    collections or requests from existing definitions.
  image: ''
  tags: Clients
- building_block_id: record
  type: Client
  category: Organization
  sorttype: ''
  sortcat: ''
  name: Record
  description: 'Allow for any saved request to be recorded, for playback later.'
  image: ''
  tags: Clients
- building_block_id: replay
  type: Client
  category: Organization
  sorttype: ''
  sortcat: ''
  name: Replay
  description: Allow for the replay of any saved requests that has been run and recorded.
  image: ''
  tags: Clients
- building_block_id: keyboard-shortcuts
  type: Client
  category: Organization
  sorttype: ''
  sortcat: ''
  name: Keyboard Shortcuts
  description: >-
    Provide keyboard shortcuts, that make working with HTTP client requests
    easier.
  image: ''
  tags: Clients
- building_block_id: history
  type: Client
  category: Organization
  sorttype: ''
  sortcat: ''
  name: History
  description: >-
    Provide a historical listing of API requests that have been made, allowing
    the history to be searched, reviewed, and managed.
  image: ''
  tags: Clients
- building_block_id: teams
  type: Client
  category: Organization
  sorttype: ''
  sortcat: ''
  name: Teams
  description: >-
    Provide team environments, allowing users to collaborate, share and work
    across API requests, and collections.
  image: ''
  tags: Clients
- building_block_id: import-openapi-spec
  type: Client
  category: Import / Export
  sorttype: ''
  sortcat: ''
  name: Import OpenAPI Spec
  description: Allow for the importing of API requests using the OpenAPI Spec.
  image: ''
  tags: Clients
- building_block_id: import-api-blueprint
  type: Client
  category: Import / Export
  sorttype: ''
  sortcat: ''
  name: Import API Blueprint
  description: >-
    Allow for the importing of API requests using the API Blueprint API
    definition format.
  image: ''
  tags: Clients
- building_block_id: import-raml
  type: Client
  category: Import / Export
  sorttype: ''
  sortcat: ''
  name: Import RAML
  description: >-
    Allow for the importing of API requests using the RAML API definition
    format.
  image: ''
  tags: Clients
- building_block_id: import-postman
  type: Client
  category: Import / Export
  sorttype: ''
  sortcat: ''
  name: Import Postman
  description: >-
    Allow for the importing of API requests using the Postman API definition
    format.
  image: ''
  tags: Clients
- building_block_id: export-postman
  type: Client
  category: Import / Export
  sorttype: ''
  sortcat: ''
  name: Export Postman
  description: >-
    Allow for the exporting of API requests using the Postman API definition
    format.
  image: ''
  tags: Clients
- building_block_id: export-openapi-spec
  type: Client
  category: Import / Export
  sorttype: ''
  sortcat: ''
  name: Export OpenAPI Spec
  description: Allow for the exporting of API requests using the OpenAPI Spec.
  image: ''
  tags: Clients
- building_block_id: export-api-blueprint
  type: Client
  category: Import / Export
  sorttype: ''
  sortcat: ''
  name: Export API Blueprint
  description: >-
    Allow for the exporting of API requests using the API Blueprint API
    definition format.
  image: ''
  tags: Clients
- building_block_id: export-raml
  type: Client
  category: Import / Export
  sorttype: ''
  sortcat: ''
  name: Export RAML
  description: >-
    Allow for the exporting of API requests using the RAML API definition
    format.
  image: ''
  tags: Clients
- building_block_id: command-line
  type: Client
  category: Tooling
  sorttype: ''
  sortcat: ''
  name: Command Line
  description: >-
    Provide a command line interface for developers to use along with an HTTP
    client.
  image: ''
  tags: Clients
- building_block_id: codegen
  type: Client
  category: Tooling
  sorttype: ''
  sortcat: ''
  name: Codegen
  description: >-
    Enable the generation of client code samples from API definitions within the
    HTTP client.
  image: ''
  tags: Clients
- building_block_id: proxy
  type: Client
  category: Tooling
  sorttype: ''
  sortcat: ''
  name: Proxy
  description: Provide a proxy that can be used when making requests via the HTTP client.
  image: ''
  tags: Clients
- building_block_id: extensions
  type: Client
  category: Tooling
  sorttype: ''
  sortcat: ''
  name: Extensions
  description: >-
    Allowing the extension of an HTTP client using a standardize plugin
    interface.
  image: ''
  tags: Clients
- building_block_id: compute
  type: Cloud
  category: Compute & Networking
  sorttype: ''
  sortcat: ''
  name: Compute
  description: Virtual Servers in the Cloud (Amazon EC2)
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/aws-compute.png
  tags: ''
- building_block_id: auto-scaling
  type: Cloud
  category: Compute & Networking
  sorttype: ''
  sortcat: ''
  name: Auto Scaling
  description: Automatic vertical scaling service (AutoScaling)
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/aws-autoscaling.png
  tags: ''
- building_block_id: load-balancing
  type: Cloud
  category: Compute & Networking
  sorttype: ''
  sortcat: ''
  name: Load Balancing
  description: Automatic load balancing service (Elastic Load Balancing)
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/aws-loadbalancing.png
  tags: ''
- building_block_id: virtual-desktops
  type: Cloud
  category: Compute & Networking
  sorttype: ''
  sortcat: ''
  name: Virtual Desktops
  description: Virtual Desktops in the Cloud (Amazon WorkSpaces)
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/aws-instance.png
  tags: ''
- building_block_id: onpremise
  type: Cloud
  category: Compute & Networking
  sorttype: ''
  sortcat: ''
  name: On-Premise
  description: Isolated Cloud Resources (Amazon VPC)
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/aws-network.png
  tags: ''
- building_block_id: dns
  type: Cloud
  category: Compute & Networking
  sorttype: ''
  sortcat: ''
  name: DNS
  description: Scalable Domain Name System (Amazon Route 53)
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/aws-route53.png
  tags: ''
- building_block_id: network
  type: Cloud
  category: Compute & Networking
  sorttype: ''
  sortcat: ''
  name: Network
  description: Dedicated Network Connection to AWS (AWS Direct Connect)
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/aws-directconnect.png
  tags: ''
- building_block_id: storage
  type: Cloud
  category: Storage & CDN
  sorttype: ''
  sortcat: ''
  name: Storage
  description: Scalable Storage in the Cloud (Amazon S3)
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/aws-s3.png
  tags: ''
- building_block_id: bulk-storage
  type: Cloud
  category: Storage & CDN
  sorttype: ''
  sortcat: ''
  name: Bulk Storage
  description: ''
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/aws-glacier.png
  tags: ''
- building_block_id: storage-volumes
  type: Cloud
  category: Storage & CDN
  sorttype: ''
  sortcat: ''
  name: Storage Volumes
  description: EC2 Block Storage Volumes (Amazon EBS)
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/aws-ebs.png
  tags: ''
- building_block_id: data-portability
  type: Cloud
  category: Storage & CDN
  sorttype: ''
  sortcat: ''
  name: Data Portability
  description: Large Volume Data Transfer (AWS Import/Export)
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/aws-importexport.png
  tags: ''
- building_block_id: onpremise-storage
  type: Cloud
  category: Storage & CDN
  sorttype: ''
  sortcat: ''
  name: On-Premise Storage
  description: >-
    Integrates on-premises IT environments with Cloud storage (AWS Storage
    Gateway)
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/aws-storagegateway.png
  tags: ''
- building_block_id: content-delivery-network-cdn
  type: Cloud
  category: Storage & CDN
  sorttype: ''
  sortcat: ''
  name: Content Delivery Network (CDN)
  description: Global Content Delivery Network (Amazon CloudFront)
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/aws-cloudfront.png
  tags: ''
- building_block_id: relational-database
  type: Cloud
  category: Database
  sorttype: ''
  sortcat: ''
  name: Relational Database
  description: >-
    Managed Relational Database Service for MySQL, Oracle, SQL Server, and
    PostgreSQL (Amazon RDS)
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/aws-rds.png
  tags: ''
- building_block_id: nosql-database
  type: Cloud
  category: Database
  sorttype: ''
  sortcat: ''
  name: NoSQL Database
  description: 'Fast, Predictable, Highly-scalable NoSQL data store (Amazon DynamoDB)'
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/aws-dynamo.png
  tags: ''
- building_block_id: data-caching
  type: Cloud
  category: Database
  sorttype: ''
  sortcat: ''
  name: Data Caching
  description: In-Memory Caching Service (Amazon ElastiCache)
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/aws-elasticache.png
  tags: ''
- building_block_id: data-warehouse
  type: Cloud
  category: Database
  sorttype: ''
  sortcat: ''
  name: Data Warehouse
  description: >-
    Fast, Powerful, Fully Managed, Petabyte-scale Data Warehouse Service (Amazon
    Redshift)
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/aws-rds.png
  tags: ''
- building_block_id: hadoop
  type: Cloud
  category: Analytics
  sorttype: ''
  sortcat: ''
  name: Hadoop
  description: Hosted Hadoop Framework (Amazon EMR)
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/aws-emr.png
  tags: ''
- building_block_id: realtime
  type: Cloud
  category: Analytics
  sorttype: ''
  sortcat: ''
  name: Real-Time
  description: Real-Time Data Stream Processing (Amazon Kinesis)
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/aws-kinesis.png
  tags: ''
- building_block_id: application-streaming
  type: Cloud
  category: Application Services
  sorttype: ''
  sortcat: ''
  name: Application Streaming
  description: Low-Latency Application Streaming (Amazon AppStream)
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/aws-appstream.png
  tags: ''
- building_block_id: search
  type: Cloud
  category: Application Services
  sorttype: ''
  sortcat: ''
  name: Search
  description: Managed Search Service (Amazon CloudSearch)
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/aws-search.png
  tags: ''
- building_block_id: workflow
  type: Cloud
  category: Application Services
  sorttype: ''
  sortcat: ''
  name: Workflow
  description: Workflow service for coordinating application components (Amazon SWF)
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/aws-workflow.png
  tags: ''
- building_block_id: messaging
  type: Cloud
  category: Application Services
  sorttype: ''
  sortcat: ''
  name: Messaging
  description: Message Queue Service (Amazon SQS)
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/aws-sqs.png
  tags: ''
- building_block_id: email
  type: Cloud
  category: Application Services
  sorttype: ''
  sortcat: ''
  name: Email
  description: Email Sending Service (Amazon SES)
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/aws-ses.png
  tags: ''
- building_block_id: push-notifications
  type: Cloud
  category: Application Services
  sorttype: ''
  sortcat: ''
  name: Push Notifications
  description: Push Notification Service (Amazon SNS)
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/aws-sns.png
  tags: ''
- building_block_id: payments
  type: Cloud
  category: Application Services
  sorttype: ''
  sortcat: ''
  name: Payments
  description: API based payment service (Amazon FPS)
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-dollar-sign.png
  tags: ''
- building_block_id: media-transcoding
  type: Cloud
  category: Application Services
  sorttype: ''
  sortcat: ''
  name: Media Transcoding
  description: Easy-to-use scalable media transcoding (Amazon Elastic Transcoder)
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/aws-transcoding.png
  tags: ''
- building_block_id: console
  type: Cloud
  category: Deployment & Management
  sorttype: ''
  sortcat: ''
  name: Console
  description: Web-Based User Interface (AWS Management Console)
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/aws-console.png
  tags: ''
- building_block_id: identity-and-access
  type: Cloud
  category: Deployment & Management
  sorttype: ''
  sortcat: ''
  name: Identity and Access
  description: Configurable AWS Access Controls (AWS Identity and Access Management (IAM))
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/aws-iam.png
  tags: ''
- building_block_id: change-tracking
  type: Cloud
  category: Deployment & Management
  sorttype: ''
  sortcat: ''
  name: Change Tracking
  description: User Activity and Change Tracking (AWS CloudTrail)
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/aws-cloud.png
  tags: ''
- building_block_id: monitoring
  type: Cloud
  category: Deployment & Management
  sorttype: ''
  sortcat: ''
  name: Monitoring
  description: Resource and Application Monitoring (Amazon CloudWatch)
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/aws-cloudwatch.png
  tags: ''
- building_block_id: containers
  type: Cloud
  category: Deployment & Management
  sorttype: ''
  sortcat: ''
  name: Containers
  description: AWS Application Container (AWS Elastic Beanstalk)
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/aws-elasticbeanstalk.png
  tags: ''
- building_block_id: templates
  type: Cloud
  category: Deployment & Management
  sorttype: ''
  sortcat: ''
  name: Templates
  description: Templates for AWS Resource Creation (AWS CloudFormation)
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/aws-cloudformations.png
  tags: ''
- building_block_id: devops
  type: Cloud
  category: Deployment & Management
  sorttype: ''
  sortcat: ''
  name: DevOps
  description: DevOps Application Management Services (AWS OpsWorks)
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/aws-opsworks.png
  tags: ''
- building_block_id: security
  type: Cloud
  category: Deployment & Management
  sorttype: ''
  sortcat: ''
  name: Security
  description: >-
    Ops Application Management Services (AWS OpsWorks)Security - Hardware-based
    Key Storage for Regulatory Compliance (AWS CloudHSM)
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/aws-hsm.png
  tags: ''
- building_block_id: blog
  type: Communications
  category: Communications
  sorttype: ''
  sortcat: ''
  name: Blog
  description: >-
    Providing a blog dedicated to API platform operations, with stories about
    the providers, consumers, and other related stories.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-blog-icon.png
  tags: Communications
- building_block_id: blog-rss-feed
  type: Communications
  category: Communications
  sorttype: ''
  sortcat: ''
  name: Blog RSS Feed
  description: >-
    Make sure there is an RSS feed for any blog that is published as part of API
    operations.
  image: ''
  tags: Communications
- building_block_id: twitter
  type: Communications
  category: Communications
  sorttype: ''
  sortcat: ''
  name: Twitter
  description: >-
    Provide an active Twitter account for support, as well as evangelism efforts
    around an APIs operations.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-twitter-icon.png
  tags: Communications
- building_block_id: email
  type: Communications
  category: Communications
  sorttype: ''
  sortcat: ''
  name: Email
  description: >-
    Provide an email for not just support, but also general platform
    communications.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-email.png
  tags: Communications
- building_block_id: linkedin
  type: Communications
  category: Communications
  sorttype: ''
  sortcat: ''
  name: LinkedIn
  description: >-
    Provide an active LinkedIn account for support, as well as evangelism
    efforts around an APIs operations.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-linkedin.png
  tags: Communications
- building_block_id: facebook
  type: Communications
  category: Communications
  sorttype: ''
  sortcat: ''
  name: Facebook
  description: >-
    Provide an active Facebook account for support, as well as evangelism
    efforts around an APIs operations.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-facebook.png
  tags: Communications
- building_block_id: google+
  type: Communications
  category: Communications
  sorttype: ''
  sortcat: ''
  name: Google+
  description: >-
    Provide an active Google+ account for support, as well as evangelism efforts
    around an APIs operations.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-google-plus.png
  tags: Communications
- building_block_id: email-newsletter
  type: Communications
  category: Communications
  sorttype: ''
  sortcat: ''
  name: Email Newsletter
  description: >-
    An email newsletter dedicated to cover news across platform operations,
    providing weekly summary of activity in the inbox.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-email-newsletter.png
  tags: Communications
- building_block_id: instagram
  type: Communications
  category: Communications
  sorttype: ''
  sortcat: ''
  name: Instagram
  description: >-
    Using Instagram as a way to communicate with platform users, and let users
    know there is someone home.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-instagram.png
  tags: Communications
- building_block_id: vimeo
  type: Communications
  category: Communications
  sorttype: ''
  sortcat: ''
  name: Vimeo
  description: >-
    Using Vimeo as a communication channel for educating users about an API
    platform.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-vimeo.png
  tags: Communications
- building_block_id: youtube
  type: Communications
  category: Communications
  sorttype: ''
  sortcat: ''
  name: Youtube
  description: >-
    Using Youtube as a regular content and communication channel to help users
    learn about platform operations.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-youtube.png
  tags: Communications
- building_block_id: chat
  type: Communications
  category: Communications
  sorttype: ''
  sortcat: ''
  name: Chat
  description: >-
    Providing a live chant mechanism in the developer portal, allowing
    developers to connect directly with API support and evangelists.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-chat.png
  tags: Communications
- building_block_id: slack
  type: Communications
  category: Communications
  sorttype: ''
  sortcat: ''
  name: Slack
  description: >-
    Using Slack to create private channels just for communicating with internal,
    partner, or public API consumers.
  image: ''
  tags: Communications
- building_block_id: containers
  type: Containers
  category: Core Concepts
  sorttype: ''
  sortcat: ''
  name: Containers
  description: >-
    A single unit of compute, complete with operating system, and application
    layer.
  image: ''
  tags: Containers
- building_block_id: images
  type: Containers
  category: Core Concepts
  sorttype: ''
  sortcat: ''
  name: Images
  description: >-
    A snapshot of a single container instance that then allows it to be deployed
    as a container.
  image: ''
  tags: Containers
- building_block_id: nodes
  type: Containers
  category: Core Concepts
  sorttype: ''
  sortcat: ''
  name: Nodes
  description: 'A single server instance, where many containers can be deployed and managed.'
  image: ''
  tags: Containers
- building_block_id: volumes
  type: Containers
  category: Core Concepts
  sorttype: ''
  sortcat: ''
  name: Volumes
  description: >-
    A data volume is a specially-designated directory within one or more
    containers that bypasses the local.
  image: ''
  tags: Containers
- building_block_id: clusters
  type: Containers
  category: Core Concepts
  sorttype: ''
  sortcat: ''
  name: Clusters
  description: >-
    Allows for the creation and access to a pool of containers, organized into a
    meaningful group.
  image: ''
  tags: Containers
- building_block_id: networks
  type: Containers
  category: Core Concepts
  sorttype: ''
  sortcat: ''
  name: Networks
  description: Defining the network linkage between containers.
  image: ''
  tags: Containers
- building_block_id: hub
  type: Containers
  category: Core Concepts
  sorttype: ''
  sortcat: ''
  name: Hub
  description: >-
    A cloud-based registry service for building and shipping application or
    service containers.
  image: ''
  tags: Containers
- building_block_id: registry
  type: Containers
  category: Core Concepts
  sorttype: ''
  sortcat: ''
  name: Registry
  description: >-
    A server location for registering, storing, and distributing container
    images.
  image: ''
  tags: Containers
- building_block_id: containers
  type: Containers
  category: API
  sorttype: ''
  sortcat: ''
  name: Containers
  description: A web API for managing containers.
  image: ''
  tags: Containers
- building_block_id: image
  type: Containers
  category: API
  sorttype: ''
  sortcat: ''
  name: Image
  description: A web API for managing container images.
  image: ''
  tags: Containers
- building_block_id: volumes
  type: Containers
  category: API
  sorttype: ''
  sortcat: ''
  name: Volumes
  description: A web API for managing the volumes used by containers.
  image: ''
  tags: Containers
- building_block_id: networks
  type: Containers
  category: API
  sorttype: ''
  sortcat: ''
  name: Networks
  description: A web API for managing container networks.
  image: ''
  tags: Containers
- building_block_id: 'datensparsamkeit:-data-minimization'
  type: Database
  category: Ethics
  sorttype: ''
  sortcat: ''
  name: 'Datensparsamkeit: Data Minimization'
  description: >-
    It's an attitude to how we capture and store data, saying that we should
    only handle data that we really need.
  image: ''
  tags: Ethics
- building_block_id: web-concepts
  type: Definitions
  category: Formats
  sorttype: A1
  sortcat: A1
  name: Web Concepts
  description: >-
    APIs are built on the web, and there are numerous web concepts in play that
    should be considered as part of the API design process.
  image: ''
  tags: Definitions
- building_block_id: media-types
  type: Definitions
  category: Formats
  sorttype: A1
  sortcat: A4
  name: Media Types
  description: >-
    A media type (also MIME type and content type) is a two-part identifier for
    file formats and format contents transmitted on the Internet. The Internet
    Assigned Numbers Authority (IANA) is the official authority for the
    standardization and publication of these classifications.
  image: ''
  tags: ''
- building_block_id: specification
  type: Definitions
  category: Formats
  sorttype: A1
  sortcat: A2
  name: Specification
  description: >-
    The root specification for the API definition format, providing a base set
    of rules for all services and tools that employ the spec.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-schema.png
  tags: Definitions
- building_block_id: schema
  type: Definitions
  category: Formats
  sorttype: A1
  sortcat: A3
  name: Schema
  description: >-
    A representation of data model, used as part of an API request, or response,
    usually in JSON, but increasingly YAML, and Markdown are also used.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-schema.png
  tags: Definitions
- building_block_id: generator
  type: Definitions
  category: Tooling
  sorttype: A1
  sortcat: A1
  name: Generator
  description: >-
    Generating an API definition format from an existing system or platform,
    outputting the portable machine readable format.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-generate.png
  tags: Definitions
- building_block_id: parser
  type: Definitions
  category: Tooling
  sorttype: A1
  sortcat: A2
  name: Parser
  description: >-
    Parses a machine readable API definition and makes ready for use in specific
    language, structure, or platform.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-parse.png
  tags: Definitions
- building_block_id: validator
  type: Definitions
  category: Tooling
  sorttype: A1
  sortcat: A3
  name: Validator
  description: >-
    Validates an API definition against its formal specification and schema,
    producing a valid or invalid response, with as much detail as possible.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-valid.png
  tags: Definitions
- building_block_id: converter
  type: Definitions
  category: Tooling
  sorttype: A1
  sortcat: A4
  name: Converter
  description: >-
    The conversion of an API definition from one format into another, allowing
    designers to share API definitions in any format.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-conversion.png
  tags: Definitions
- building_block_id: commandline
  type: Definitions
  category: Tooling
  sorttype: A1
  sortcat: A6
  name: Command-Line
  description: The usage of machine readable API definitions at the command line.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-command-line.png
  tags: Definitions
- building_block_id: powershell
  type: Definitions
  category: Tooling
  sorttype: A1
  sortcat: A7
  name: Powershell
  description: The usage of machine readable API definitions via the powershell interface.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-command-line.png
  tags: Definitions
- building_block_id: aggregator
  type: Definitions
  category: Tooling
  sorttype: A1
  sortcat: A9
  name: Aggregator
  description: Aggregation of APIs using a machine readable API definition format.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-arrow-aggregate.png
  tags: Definitions
- building_block_id: translator
  type: Definitions
  category: Tooling
  sorttype: A1
  sortcat: A5
  name: Translator
  description: >-
    Being able to translate an API definition format from one format to another,
    either manually or automatically.
  image: ''
  tags: Definitions
- building_block_id: merging
  type: Definitions
  category: Tooling
  sorttype: A1
  sortcat: A10
  name: Merging
  description: >-
    Tooling or other APIs that provide for the merging of common API definition
    formats, allowing the granularity of what elements get merged, or do not get
    merged. Ideally, this is an API, as well as simple web-based or desktop
    tooling for API providers and consumers.
  image: ''
  tags: Definitions
- building_block_id: diff
  type: Definitions
  category: Tooling
  sorttype: A1
  sortcat: A11
  name: Diff
  description: >-
    Providing side by side comparison of two API definitions, programmatically
    and visually helping identify between two API definitions. This allows for
    API architects, designers, and consumers to understand the completeness of
    two definitions, in relation to each other.
  image: ''
  tags: Definitions
- building_block_id: editors
  type: Definitions
  category: Environment
  sorttype: A1
  sortcat: A1
  name: Editors
  description: >-
    API definition editor, allowing for the creation, import, and export of API
    definition formats, providing a simple, IDE like API editing experience.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-editor.png
  tags: Definitions
- building_block_id: ide-plugin
  type: Definitions
  category: Environment
  sorttype: A1
  sortcat: A2
  name: IDE Plugin
  description: >-
    Providing integration with existing integrated development environments
    (IDE), giving developers API discovery, documentation, and integration
    tooling within the IDE.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-editor.png
  tags: Definitions
- building_block_id: forms
  type: Definitions
  category: Environment
  sorttype: A1
  sortcat: A3
  name: Forms
  description: >-
    Dynamically generating an HTML form from an API definition, allow for the
    structure, and handling to be driven by an API definition.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-forms.png
  tags: Definitions
- building_block_id: github
  type: Definitions
  category: Environment
  sorttype: A1
  sortcat: A4
  name: GIthub
  description: >-
    Allowing for the import, publishing, and syncing of API definitions and
    schemas to Github for forking, and management using the social coding
    platform.
  image: ''
  tags: Definitions
- building_block_id: database
  type: Definitions
  category: Backend
  sorttype: A1
  sortcat: A1
  name: Database
  description: >-
    Tooling that generates an API definition format from a database connection,
    allowing for API integration with common database formats
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-database-new.png
  tags: Definitions
- building_block_id: files
  type: Definitions
  category: Backend
  sorttype: A1
  sortcat: A2
  name: Files
  description: >-
    Mount file stores and generate API definitions and schemas from the file
    store structure.
  image: ''
  tags: Definitions
- building_block_id: attribution
  type: Definitions
  category: Other
  sorttype: A1
  sortcat: A1
  name: Attribution
  description: >-
    Where did the API definition originate? Is there a source where all or part
    of the API design came from? Providing design, or operational attribution,
    done via one of the API definitions.
  image: ''
  tags: Definitions
- building_block_id: annotation
  type: Definitions
  category: Other
  sorttype: A1
  sortcat: A2
  name: Annotation
  description: >-
    Allowing for the annotation of API definitions, schemas, as part of the API
    life cycle.
  image: ''
  tags: Definitions
- building_block_id: proxy
  type: Definitions
  category: Other
  sorttype: A1
  sortcat: A3
  name: Proxy
  description: >-
    Allowing for the proxying of API requests and responses using tools like
    Charles Proxy, or Prism from Stoplight, and generating of API definitions
    and schemas from the traffic.
  image: ''
  tags: Definitions
- building_block_id: database
  type: Deployment
  category: Data
  sorttype: ''
  sortcat: ''
  name: Database
  description: >-
    Connecting to a database and generating a CRUD, or create, read, update and
    delete API on an existing data source.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-database.png
  tags: Deployment
- building_block_id: comma-separate-file-csv
  type: Deployment
  category: Data
  sorttype: ''
  sortcat: ''
  name: Comma Separate File (CSV)
  description: >-
    Deploying an API from comma separated files, providing a simple, delimited,
    structured data store as a file rather than database.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-csv.png
  tags: Deployment
- building_block_id: spreadsheet
  type: Deployment
  category: Data
  sorttype: ''
  sortcat: ''
  name: Spreadsheet
  description: >-
    The deployment of an API from a web-based, or uploaded spreadsheet,
    transforming the column, and data into a web API.
  image: ''
  tags: Deployment
- building_block_id: javascript-object-notation-json
  type: Deployment
  category: Data
  sorttype: ''
  sortcat: ''
  name: JavaScript Object Notation (JSON)
  description: >-
    Deploying an API from JSON file, providing a simple, delimited, structured
    data store as a file rather than database.
  image: ''
  tags: Deployment
- building_block_id: framework
  type: Deployment
  category: Code
  sorttype: ''
  sortcat: ''
  name: Framework
  description: >-
    Crafting and API using an existing API framework in a particular programming
    language, providing the HTTP scaffolding needed.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-ladder.png
  tags: Deployment
- building_block_id: github
  type: Deployment
  category: Code
  sorttype: ''
  sortcat: ''
  name: Github
  description: >-
    Provides a simple way to publish documentation, code libraries, TOS, and
    other common building blocks in support of API operations.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-github.jpg
  tags: Deployment
- building_block_id: serverless
  type: Deployment
  category: Code
  sorttype: ''
  sortcat: ''
  name: Serverless
  description: >-
    Deployment of individual code, in a variety of languages, using cloud
    serverless technology like AWS Lambda or Iron.io.
  image: ''
  tags: Deployment
- building_block_id: onpremise
  type: Deployment
  category: Backend
  sorttype: ''
  sortcat: ''
  name: On-Premise
  description: >-
    The deployment of APIs is done on-premise within an organizational
    controlled datacenter.
  image: ''
  tags: Deployment
- building_block_id: cloud
  type: Deployment
  category: Backend
  sorttype: ''
  sortcat: ''
  name: Cloud
  description: >-
    Deployment of APis are done using cloud providers, where hosting is included
    with other services.
  image: ''
  tags: Deployment
- building_block_id: hosting
  type: Deployment
  category: Backend
  sorttype: ''
  sortcat: ''
  name: Hosting
  description: >-
    Hosting is all about where you are going to park your API. Usual deployments
    are on-premise within your company or data center, in a public cloud like
    Amazon Web Services or a hybrid of the two.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-hosting
  tags: Deployment
- building_block_id: gateway
  type: Deployment
  category: Connection
  sorttype: ''
  sortcat: ''
  name: Gateway
  description: >-
    API gateways provide a solution for tapping into internal systems and
    connecting with external platforms, to expose APIs.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-proxy-left.png
  tags: Deployment
- building_block_id: proxy
  type: Deployment
  category: Connection
  sorttype: ''
  sortcat: ''
  name: Proxy
  description: >-
    API proxy are common place for taking an existing API interface, running it
    through an intermediary which allows for translations, transformations and
    other added services on top of API.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-proxy.png
  tags: Deployment
- building_block_id: connector
  type: Deployment
  category: Connection
  sorttype: ''
  sortcat: ''
  name: Connector
  description: >-
    Contrary to an API proxy, there are API solutions that are proxyless, while
    just allowing an API to connect or plugin to the advanced API resources
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-connector
  tags: Deployment
- building_block_id: real-time
  type: Deployment
  category: Other
  sorttype: ''
  sortcat: ''
  name: Real Time
  description: >-
    Providing a way to deploy APIs that are real time, either directly from
    sources, or on top of existing APIs.
  image: ''
  tags: Deployment
- building_block_id: scraping
  type: Deployment
  category: Other
  sorttype: ''
  sortcat: ''
  name: Scraping
  description: >-
    Harvesting or scraping of data from an existing website, content or data
    source, when an existing data source is unavailable, and then publishing as
    an API.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-scraper.jpg
  tags: Deployment
- building_block_id: use-the-internet
  type: Design
  category: Best Practices
  sorttype: A3
  sortcat: ''
  name: Use the Internet
  description: >-
    The web brings a lot of tools to the table, make sure and learn about
    existing web technologies, and put them to use across the API design
    process.
  image: ''
  tags: Design
- building_block_id: simplicity
  type: Design
  category: Best Practices
  sorttype: A3
  sortcat: ''
  name: Simplicity
  description: >-
    Consider simplicity at ever turn when designing APIs, providing the small
    possible unit of value you possibly can--simplicity goes a long way.
  image: ''
  tags: Design
- building_block_id: consistency
  type: Design
  category: Best Practices
  sorttype: A3
  sortcat: ''
  name: Consistency
  description: >-
    Employ consistent approaches to all aspects of API design, providing a
    familiar approach across all APIs published.
  image: ''
  tags: Design
- building_block_id: easy-to-read
  type: Design
  category: Best Practices
  sorttype: A3
  sortcat: ''
  name: Easy to Read
  description: >-
    While APIs are for computers, they should be easy to read by humans, making
    documentation more accessible.
  image: ''
  tags: Design
- building_block_id: easy-to-learn
  type: Design
  category: Best Practices
  sorttype: A3
  sortcat: ''
  name: Easy to Learn
  description: >-
    Keeping APIs simple, and consistent, will contribute to them being easy to
    learn about for any potential API consumer.
  image: ''
  tags: Design
- building_block_id: hard-to-misuse
  type: Design
  category: Best Practices
  sorttype: A3
  sortcat: ''
  name: Hard to Misuse
  description: >-
    When APIs do one thing, and does it well, you reduce the opportunity for
    misuse, and people putting them to work in unintended ways.
  image: ''
  tags: Design
- building_block_id: audience-focused
  type: Design
  category: Best Practices
  sorttype: A3
  sortcat: ''
  name: Audience Focused
  description: >-
    APIs should be designed with a specific audience in mind, providing a
    solution to a problem they are having.
  image: ''
  tags: Design
- building_block_id: experience-over-resource
  type: Design
  category: Best Practices
  sorttype: A3
  sortcat: ''
  name: Experience Over Resource
  description: >-
    Make APIs reflect how they will be used, and experienced, over where the API
    came from and the resource it was derived from.
  image: ''
  tags: Design
- building_block_id: naming
  type: Design
  category: Best Practices
  sorttype: A3
  sortcat: ''
  name: Naming
  description: How to name things
  image: ''
  tags: Design
- building_block_id: case
  type: Design
  category: Best Practices
  sorttype: A3
  sortcat: ''
  name: Case
  description: 'Which case (lowercase, camelCase, ...) to use and when'''
  image: ''
  tags: Design
- building_block_id: global-design
  type: Design
  category: Best Practices
  sorttype: A3
  sortcat: ''
  name: Global design
  description: General considerations on API design
  image: ''
  tags: Design
- building_block_id: use-your-own-apis
  type: Design
  category: Best Practices
  sorttype: A3
  sortcat: ''
  name: Use Your Own APIs
  description: >-
    Always use your own APIs, allowing you to understand the challenges with
    integrating, as well as the pain of operations and outages.
  image: ''
  tags: Design
- building_block_id: notifying-api-consumers
  type: Design
  category: Best Practices
  sorttype: A3
  sortcat: ''
  name: Notifying API consumers
  description: How to send events or notifications to API consumers
  image: ''
  tags: Design
- building_block_id: http-headers
  type: Design
  category: Requests
  sorttype: A3
  sortcat: ''
  name: HTTP Headers
  description: The usage of standard or custom HTTP headers
  image: ''
  tags: Design
- building_block_id: ssl
  type: Design
  category: Requests
  sorttype: A3
  sortcat: ''
  name: SSL
  description: >-
    Transport Layer Security (TLS) and its predecessor, Secure Sockets Layer
    (SSL), both of which are frequently referred to as 'SSL', are cryptographic
    protocols designed to provide communications security over a computer
    network. Always support TLS / SSL by default when it comes to API
    operations, if at all possible.
  image: ''
  tags: Design
- building_block_id: host
  type: Design
  category: Requests
  sorttype: A3
  sortcat: ''
  name: Host
  description: >-
    Put sufficient thought into what the baseURL will be for making API calls.
    Increasingly this element can also be dynamic, like other aspects of API
    design.
  image: ''
  tags: Design
- building_block_id: resource
  type: Design
  category: Requests
  sorttype: A3
  sortcat: ''
  name: Resource
  description: >-
    Consider how you craft your resources across all API operations. I do not
    subscribe to specific philosophies around this, just trying to provide a
    framework to think about this in.
  image: ''
  tags: Design
- building_block_id: action
  type: Design
  category: Requests
  sorttype: A3
  sortcat: ''
  name: Action
  description: >-
    Allow for standard actions to be taken across resource, but also reflect how
    APIs will be experienced, providing meaningful action to be taken around any
    API.
  image: ''
  tags: Design
- building_block_id: verbs
  type: Design
  category: Requests
  sorttype: A3
  sortcat: ''
  name: Verbs
  description: >-
    Learn about, and put all HTTP verbs to use when designing APIs.There is more
    than just GET, and even more than just POST, PUT, and DELETE.
  image: ''
  tags: Design
- building_block_id: parameters
  type: Design
  category: Requests
  sorttype: A3
  sortcat: ''
  name: Parameters
  description: >-
    Standardize how parameters are crafted as part of API operations, using
    intuitive and consistent approaches.
  image: ''
  tags: Design
- building_block_id: headers
  type: Design
  category: Requests
  sorttype: A3
  sortcat: ''
  name: Headers
  description: >-
    Learn about, and use common headers for API requests. Study how the APIs you
    consumer put headers to work.
  image: ''
  tags: Design
- building_block_id: body
  type: Design
  category: Requests
  sorttype: A3
  sortcat: ''
  name: Body
  description: >-
    Use the body of each request in a consistent way across API operations. The
    body provides much more room for more structured data and content.
  image: ''
  tags: Design
- building_block_id: versioning
  type: Design
  category: Requests
  sorttype: A3
  sortcat: ''
  name: Versioning
  description: >-
    Establish, and stick to a common versioning strategy, and use throughout API
    evolutions. Consider putting all versioning information within headers.
  image: ''
  tags: Design
- building_block_id: pagination
  type: Design
  category: Requests
  sorttype: A3
  sortcat: ''
  name: Pagination
  description: >-
    Learn about common ways to paginate, and establish a single way to handle
    across API operations.
  image: ''
  tags: Design
- building_block_id: filtering
  type: Design
  category: Requests
  sorttype: A3
  sortcat: ''
  name: Filtering
  description: >-
    Consider how filtering will happen across all APIs, and establish a single
    way to filter API resources.
  image: ''
  tags: Design
- building_block_id: time-selection
  type: Design
  category: Requests
  sorttype: A3
  sortcat: ''
  name: Time Selection
  description: >-
    Consider how time selection and series will be handled, and establish a
    single way for working with time in API operations.
  image: ''
  tags: Design
- building_block_id: sorting
  type: Design
  category: Requests
  sorttype: A3
  sortcat: ''
  name: Sorting
  description: >-
    Establish a single approach to how API responses can be sorted, and use
    across all API resources.
  image: ''
  tags: Design
- building_block_id: field-selection
  type: Design
  category: Requests
  sorttype: A3
  sortcat: ''
  name: Field Selection
  description: >-
    Consider providing a way that API consumers can select which fields are
    included in API responses.
  image: ''
  tags: Design
- building_block_id: granularity
  type: Design
  category: Requests
  sorttype: A3
  sortcat: ''
  name: Granularity
  description: >-
    Always be aware of the granularity of your API endpoints, and each resource
    being exposed, keeping everything as small as possible.
  image: ''
  tags: Design
- building_block_id: relationship
  type: Design
  category: Requests
  sorttype: A3
  sortcat: ''
  name: Relationship
  description: >-
    Consider how relationships between resources will be handled, and establish
    a single approach for doing across API operations.
  image: ''
  tags: Design
- building_block_id: get
  type: Design
  category: HTTP Methods
  sorttype: A3
  sortcat: ''
  name: GET
  description: >-
    The GET method requests a representation of the specified resource. Requests
    using GET should only retrieve data and should have no other effect.
  image: ''
  tags: Design
- building_block_id: post
  type: Design
  category: HTTP Methods
  sorttype: A3
  sortcat: ''
  name: POST
  description: >-
    The POST method requests that the server accept the entity enclosed in the
    request as a new subordinate of the web resource identified by the URI. The
    data POSTed might be, for example, an annotation for existing resources; a
    message for a bulletin board, newsgroup, mailing list, or comment thread; a
    block of data that is the result of submitting a web form to a data-handling
    process; or an item to add to a database.
  image: ''
  tags: Design
- building_block_id: put
  type: Design
  category: HTTP Methods
  sorttype: A3
  sortcat: ''
  name: PUT
  description: >-
    The PUT method requests that the enclosed entity be stored under the
    supplied URI. If the URI refers to an already existing resource, it is
    modified; if the URI does not point to an existing resource, then the server
    can create the resource with that URI.
  image: ''
  tags: Design
- building_block_id: patch
  type: Design
  category: HTTP Methods
  sorttype: A3
  sortcat: ''
  name: PATCH
  description: The PATCH method applies partial modifications to a resource.
  image: ''
  tags: Design
- building_block_id: delete
  type: Design
  category: HTTP Methods
  sorttype: A3
  sortcat: ''
  name: DELETE
  description: The DELETE method deletes the specified resource.
  image: ''
  tags: Design
- building_block_id: options
  type: Design
  category: HTTP Methods
  sorttype: A3
  sortcat: ''
  name: OPTIONS
  description: >-
    The OPTIONS method returns the HTTP methods that the server supports for the
    specified URL. This can be used to check the functionality of a web server
    by requesting ‘*’ instead of a specific resource.
  image: ''
  tags: Design
- building_block_id: head
  type: Design
  category: HTTP Methods
  sorttype: A3
  sortcat: ''
  name: HEAD
  description: >-
    The HEAD method asks for a response identical to that of a GET request, but
    without the response body. This is useful for retrieving meta-information
    written in response headers, without having to transport the entire content.
  image: ''
  tags: Design
- building_block_id: forbidden-methods-alternatives
  type: Design
  category: HTTP Methods
  sorttype: A3
  sortcat: ''
  name: Forbidden methods alternatives
  description: What to do when only possible HTTP methods are POST and GET
  image: ''
  tags: Design
- building_block_id: http-headers
  type: Design
  category: Response
  sorttype: A3
  sortcat: ''
  name: HTTP Headers
  description: The usage of standard or custom HTTP headers
  image: ''
  tags: Design
- building_block_id: status-codes
  type: Design
  category: Response
  sorttype: A3
  sortcat: ''
  name: Status Codes
  description: >-
    Learn about, and use HTTP status codes in a consistent way across all API
    operations.
  image: ''
  tags: Design
- building_block_id: error-handling
  type: Design
  category: Response
  sorttype: A3
  sortcat: ''
  name: Error Handling
  description: >-
    Establish a single error handling strategy, and apply consistently across
    all API operations.
  image: ''
  tags: Design
- building_block_id: rate-limits
  type: Design
  category: Response
  sorttype: A3
  sortcat: ''
  name: Rate Limits
  description: >-
    Establish a single approach to rate limiting of API resources, and apply
    consistently across all API operations.
  image: ''
  tags: Design
- building_block_id: caching
  type: Design
  category: Response
  sorttype: A3
  sortcat: ''
  name: Caching
  description: >-
    Learn about common approaches to caching, and make sure it is applied
    through API operations.
  image: ''
  tags: Design
- building_block_id: etags
  type: Design
  category: Response
  sorttype: A3
  sortcat: ''
  name: eTags
  description: >-
    Learn about etags are used as part of caching and operations, and employ
    them as part of your caching strategy, and usage of HTTP elements.
  image: ''
  tags: Design
- building_block_id: requestids
  type: Design
  category: Response
  sorttype: A3
  sortcat: ''
  name: Request-Ids
  description: >-
    Employ Request-Ids if possible providing added details for logging,
    auditing, and reporting on API usage.
  image: ''
  tags: Design
- building_block_id: utf8
  type: Design
  category: Response
  sorttype: A3
  sortcat: ''
  name: UTF-8
  description: >-
    UTF-8 is a character encoding capable of encoding all possible characters,
    or code points, in Unicode. The encoding is variable-length and uses 8-bit
    code units. Make sure you use UTF-8 encoding for your API responses,
    supporting proper encoding.
  image: ''
  tags: Design
- building_block_id: cors
  type: Design
  category: Response
  sorttype: A3
  sortcat: ''
  name: CORS
  description: >-
    Enable CORS for your API endpoints, providing the most flexibility possible
    in making API calls.
  image: ''
  tags: Design
- building_block_id: jsonp
  type: Design
  category: Response
  sorttype: A3
  sortcat: ''
  name: JSONP
  description: >-
    Provide JSONP if you are unable to enable CORS, allowing for easier
    integrations.
  image: ''
  tags: Design
- building_block_id: schema
  type: Design
  category: Response
  sorttype: A3
  sortcat: ''
  name: Schema
  description: >-
    The JSON Schema, MSON, or other machine readable approach to defining the
    underlying data model of the API response.
  image: ''
  tags: Design
- building_block_id: compression
  type: Design
  category: Response
  sorttype: A3
  sortcat: ''
  name: Compression
  description: Gzip or other compression format for API responses.
  image: ''
  tags: Design
- building_block_id: collection
  type: Design
  category: Response
  sorttype: A3
  sortcat: ''
  name: Collection
  description: What is a collection (set) of resources
  image: ''
  tags: Design
- building_block_id: sorting-a-collection
  type: Design
  category: Response
  sorttype: A3
  sortcat: ''
  name: Sorting a collection
  description: How to sort a collection of resources
  image: ''
  tags: Design
- building_block_id: 400-bad-request
  type: Design
  category: HTTP Status User Error
  sorttype: A3
  sortcat: ''
  name: 400 Bad Request
  description: >-
    The server cannot or will not process the request due to an apparent client
    error (e.g., malformed request syntax, too large size, invalid request
    message framing, or deceptive request routing).
  image: ''
  tags: Design
- building_block_id: 401-unauthorized
  type: Design
  category: HTTP Status User Error
  sorttype: A3
  sortcat: ''
  name: 401 Unauthorized
  description: >-
    Similar to 403 Forbidden, but specifically for use when authentication is
    required and has failed or has not yet been provided. The response must
    include a WWW-Authenticate header field containing a challenge applicable to
    the requested resource.
  image: ''
  tags: Design
- building_block_id: 403-forbidden
  type: Design
  category: HTTP Status User Error
  sorttype: A3
  sortcat: ''
  name: 403 Forbidden
  description: >-
    The request was a valid request, but the server is refusing to respond to
    it. The user might be logged in but does not have the necessary permissions
    for the resource.'
  image: ''
  tags: Design
- building_block_id: 404-not-found
  type: Design
  category: HTTP Status User Error
  sorttype: A3
  sortcat: ''
  name: 404 Not Found
  description: >-
    The requested resource could not be found but may be available in the
    future. Subsequent requests by the client are permissible.
  image: ''
  tags: Design
- building_block_id: 405-method-not-allowed
  type: Design
  category: HTTP Status User Error
  sorttype: A3
  sortcat: ''
  name: 405 Method Not Allowed
  description: >-
    A request method is not supported for the requested resource; for example, a
    GET request on a form which requires data to be presented via POST, or a PUT
    request on a read-only resource.
  image: ''
  tags: Design
- building_block_id: 406-not-acceptable
  type: Design
  category: HTTP Status User Error
  sorttype: A3
  sortcat: ''
  name: 406 Not Acceptable
  description: >-
    The requested resource is capable of generating only content not acceptable
    according to the Accept headers sent in the request.
  image: ''
  tags: Design
- building_block_id: 408-request-timeout
  type: Design
  category: HTTP Status User Error
  sorttype: A3
  sortcat: ''
  name: 408 Request Timeout
  description: >-
    The server timed out waiting for the request. According to HTTP
    specifications: The client did not produce a request within the time that
    the server was prepared to wait. The client MAY repeat the request without
    modifications at any later time.
  image: ''
  tags: Design
- building_block_id: 409-conflict
  type: Design
  category: HTTP Status User Error
  sorttype: A3
  sortcat: ''
  name: 409 Conflict
  description: >-
    Indicates that the request could not be processed because of conflict in the
    request, such as an edit conflict between multiple simultaneous updates.
  image: ''
  tags: Design
- building_block_id: 410-gone
  type: Design
  category: HTTP Status User Error
  sorttype: A3
  sortcat: ''
  name: 410 Gone
  description: >-
    Indicates that the resource requested is no longer available and will not be
    available again. This should be used when a resource has been intentionally
    removed and the resource should be purged. Upon receiving a 410 status code,
    the client should not request the resource in the future. Clients such as
    search engines should remove the resource from their indices. Most use cases
    do not require clients and search engines to purge the resource, and a 404
    Not Found may be used instead.
  image: ''
  tags: Design
- building_block_id: 411-length-required
  type: Design
  category: HTTP Status User Error
  sorttype: A3
  sortcat: ''
  name: 411 Length Required
  description: >-
    The request did not specify the length of its content, which is required by
    the requested resource.'
  image: ''
  tags: Design
- building_block_id: 412-precondition-failed
  type: Design
  category: HTTP Status User Error
  sorttype: A3
  sortcat: ''
  name: 412 Precondition Failed
  description: >-
    The server does not meet one of the preconditions that the requester put on
    the request.
  image: ''
  tags: Design
- building_block_id: 415-unsupported-media-type
  type: Design
  category: HTTP Status User Error
  sorttype: A3
  sortcat: ''
  name: 415 Unsupported Media Type
  description: >-
    The request entity has a media type which the server or resource does not
    support. For example, the client uploads an image as image/svg+xml, but the
    server requires that images use a different format.'
  image: ''
  tags: Design
- building_block_id: 422-unprocessable-entity
  type: Design
  category: HTTP Status User Error
  sorttype: A3
  sortcat: ''
  name: 422 Unprocessable Entity
  description: >-
    The request was well-formed but was unable to be followed due to semantic
    errors.
  image: ''
  tags: Design
- building_block_id: 423-locked
  type: Design
  category: HTTP Status User Error
  sorttype: A3
  sortcat: ''
  name: 423 Locked
  description: The resource that is being accessed is locked.
  image: ''
  tags: Design
- building_block_id: 428-precondition-required
  type: Design
  category: HTTP Status User Error
  sorttype: A3
  sortcat: ''
  name: 428 Precondition Required
  description: >-
    The user has sent too many requests in a given amount of time. Intended for
    use with rate-limiting schemes.
  image: ''
  tags: Design
- building_block_id: 429-too-many-requests
  type: Design
  category: HTTP Status User Error
  sorttype: A3
  sortcat: ''
  name: 429 Too Many Requests
  description: >-
    The user has sent too many requests in a given amount of time. Intended for
    use with rate-limiting schemes.
  image: ''
  tags: Design
- building_block_id: 301-moved-permanently
  type: Design
  category: HTTP Status Redirection
  sorttype: A3
  sortcat: ''
  name: 301 Moved Permanently
  description: This and all future requests should be directed to the given URI.
  image: ''
  tags: Design
- building_block_id: 302-found
  type: Design
  category: HTTP Status Redirection
  sorttype: A3
  sortcat: ''
  name: 302 Found
  description: >-
    Common way of performing URL redirection. An HTTP response with this status
    code will additionally provide a URL in the location header field. The user
    agent (e.g. a web browser) is invited by a response with this code to make a
    second, otherwise identical, request to the new URL specified in the
    location field.
  image: ''
  tags: Design
- building_block_id: 303-see-other
  type: Design
  category: HTTP Status Redirection
  sorttype: A3
  sortcat: ''
  name: 303 See Other
  description: >-
    The response to the request can be found under another URI using a GET
    method. When received in response to a POST (or PUT/DELETE), the client
    should presume that the server has received the data and should issue a
    redirect with a separate GET message.
  image: ''
  tags: Design
- building_block_id: 304-not-modified
  type: Design
  category: HTTP Status Redirection
  sorttype: A3
  sortcat: ''
  name: 304 Not Modified
  description: >-
    Indicates that the resource has not been modified since the version
    specified by the request headers If-Modified-Since or If-None-Match. In such
    case, there is no need to retransmit the resource since the client still has
    a previously-downloaded copy.
  image: ''
  tags: Design
- building_block_id: 500-internal-server-error
  type: Design
  category: HTTP Status Server Error
  sorttype: A3
  sortcat: ''
  name: 500 Internal Server Error
  description: >-
    A generic error message, given when an unexpected condition was encountered
    and no more specific message is suitable.'
  image: ''
  tags: Design
- building_block_id: 501-not-implemented
  type: Design
  category: HTTP Status Server Error
  sorttype: A3
  sortcat: ''
  name: 501 Not Implemented
  description: >-
    The server either does not recognize the request method, or it lacks the
    ability to fulfill the request. Usually this implies future availability
    (e.g., a new feature of a web-service API).'
  image: ''
  tags: Design
- building_block_id: 503-service-unavailable
  type: Design
  category: HTTP Status Server Error
  sorttype: A3
  sortcat: ''
  name: 503 Service Unavailable
  description: >-
    The server is currently unavailable (because it is overloaded or down for
    maintenance). Generally, this is a temporary state.'
  image: ''
  tags: Design
- building_block_id: 200-ok
  type: Design
  category: HTTP Status Success
  sorttype: A3
  sortcat: ''
  name: 200 OK
  description: >-
    Standard response for successful HTTP requests. The actual response will
    depend on the request method used. In a GET request, the response will
    contain an entity corresponding to the requested resource. In a POST
    request, the response will contain an entity describing or containing the
    result of the action.'
  image: ''
  tags: Design
- building_block_id: 201-created
  type: Design
  category: HTTP Status Success
  sorttype: A3
  sortcat: ''
  name: 201 Created
  description: >-
    The request has been fulfilled, resulting in the creation of a new
    resource.'
  image: ''
  tags: Design
- building_block_id: 202-accepted
  type: Design
  category: HTTP Status Success
  sorttype: A3
  sortcat: ''
  name: 202 Accepted
  description: >-
    The request has been accepted for processing, but the processing has not
    been completed. The request might or might not be eventually acted upon, and
    may be disallowed when processing occurs.
  image: ''
  tags: Design
- building_block_id: 204-no-content
  type: Design
  category: HTTP Status Success
  sorttype: A3
  sortcat: ''
  name: 204 No Content
  description: >-
    The server successfully processed the request and is not returning any
    content.
  image: ''
  tags: Design
- building_block_id: 206-partial-content
  type: Design
  category: HTTP Status Success
  sorttype: A3
  sortcat: ''
  name: 206 Partial Content
  description: >-
    The server is delivering only part of the resource (byte serving) due to a
    range header sent by the client. The range header is used by HTTP clients to
    enable resuming of interrupted downloads, or split a download into multiple
    simultaneous streams.
  image: ''
  tags: Design
- building_block_id: error-format
  type: Design
  category: Error handling
  sorttype: A3
  sortcat: ''
  name: Error format
  description: How to provide information about errors
  image: ''
  tags: Design
- building_block_id: errors
  type: Design
  category: Error handling
  sorttype: A3
  sortcat: ''
  name: Errors
  description: How to handle errors
  image: ''
  tags: Design
- building_block_id: content-negociation-and-media-types
  type: Design
  category: Media Types
  sorttype: A3
  sortcat: ''
  name: Content negociation and media types
  description: >-
    How to describe your API data format and/or propose different formats (like
    json, yaml, xml atom, ...)'
  image: ''
  tags: Design
- building_block_id: application/json
  type: Design
  category: Media Types
  sorttype: A3
  sortcat: ''
  name: application/json
  description: Provide JSON media types for API responses.
  image: ''
  tags: Design
- building_block_id: application/xml
  type: Design
  category: Media Types
  sorttype: A3
  sortcat: ''
  name: application/xml
  description: Provide XML media types for API responses.
  image: ''
  tags: Design
- building_block_id: application/csv
  type: Design
  category: Media Types
  sorttype: A3
  sortcat: ''
  name: application/csv
  description: Provide CSV media types for API responses.
  image: ''
  tags: Design
- building_block_id: text/html
  type: Design
  category: Media Types
  sorttype: A3
  sortcat: ''
  name: text/html
  description: Provide HTML media types for API responses.
  image: ''
  tags: Design
- building_block_id: application/atom+xml
  type: Design
  category: Media Types
  sorttype: A3
  sortcat: ''
  name: application/atom+xml
  description: Provide ATOM media types for API responses.
  image: ''
  tags: Design
- building_block_id: collection+json
  type: Design
  category: Hypermedia
  sorttype: A3
  sortcat: ''
  name: Collection+JSON
  description: >-
    Collection+JSON is a JSON-based read/write hypermedia-type designed to
    support management and querying of simple collections.
  image: ''
  tags: Design
- building_block_id: extensible-markup-language-xml
  type: Design
  category: Hypermedia
  sorttype: A3
  sortcat: ''
  name: Extensible Markup Language (XML)
  description: >-
    Extensible Markup Language (XML) is a simple, very flexible text format
    derived from SGML (ISO 8879)
  image: ''
  tags: Design
- building_block_id: home-documents
  type: Design
  category: Hypermedia
  sorttype: A3
  sortcat: ''
  name: Home Documents
  description: A home document format for non-browser HTTP  clients.
  image: ''
  tags: Design
- building_block_id: hydra
  type: Design
  category: Hypermedia
  sorttype: A3
  sortcat: ''
  name: Hydra
  description: >-
    Hydra is an effort to simplify the development of interoperable,
    hypermedia-driven Web APIs.
  image: ''
  tags: Design
- building_block_id: hypertext-application-language-hal
  type: Design
  category: Hypermedia
  sorttype: A3
  sortcat: ''
  name: Hypertext Application Language (HAL)
  description: >-
    HAL is a simple format that gives a consistent and easy way to hyperlink
    between resources in your API.
  image: ''
  tags: Design
- building_block_id: json-api
  type: Design
  category: Hypermedia
  sorttype: A3
  sortcat: ''
  name: JSON API
  description: >-
    A specification for building APIs in JSON, and consistently formatting their
    responses.
  image: ''
  tags: Design
- building_block_id: mason
  type: Design
  category: Hypermedia
  sorttype: A3
  sortcat: ''
  name: Mason
  description: >-
    Mason is a JSON format for introducing hypermedia elements to classic JSON
    data representations.
  image: ''
  tags: Design
- building_block_id: noun-as-resource-with-hyperlinks-narwhl
  type: Design
  category: Hypermedia
  sorttype: A3
  sortcat: ''
  name: Noun As Resource With HyperLinks (NARWHL)
  description: >-
    A framework intended to provide a roadmap for those needing to implement an
    API using current best practices, but is flexible enough to grow into the
    future.
  image: ''
  tags: Design
- building_block_id: siren
  type: Design
  category: Hypermedia
  sorttype: A3
  sortcat: ''
  name: Siren
  description: A hypermedia specification for representing entities in APIs.
  image: ''
  tags: Design
- building_block_id: uniform-basis-for-exchanging-representations-uber
  type: Design
  category: Hypermedia
  sorttype: A3
  sortcat: ''
  name: Uniform Basis for Exchanging Representations (UBER)
  description: >-
    The UBER message format is a minimal read/write hypermedia type designed to
    support simple state transfers and ad-hoc hypermedia-based transitions.
  image: ''
  tags: Design
- building_block_id: xforms
  type: Design
  category: Hypermedia
  sorttype: A3
  sortcat: ''
  name: XForms
  description: >-
    XForms is an XML format used for collecting inputs from web forms, and can
    be used to describe a user interface and a set of common data manipulation
    tasks.
  image: ''
  tags: Design
- building_block_id: xml-inclusions-xinclude
  type: Design
  category: Hypermedia
  sorttype: A3
  sortcat: ''
  name: XML Inclusions (XInclude)
  description: >-
    Inclusion is a format to merge a number of XML information sets into a
    single composite infoset.
  image: ''
  tags: Design
- building_block_id: xml-linking-language-xlink
  type: Design
  category: Hypermedia
  sorttype: A3
  sortcat: ''
  name: XML Linking Language (XLink)
  description: >-
    Allows elements to be inserted into XML documents in order to create and
    describe links between resources.
  image: ''
  tags: Design
- building_block_id: 'xml:id'
  type: Design
  category: Hypermedia
  sorttype: A3
  sortcat: ''
  name: 'xml:id'
  description: >-
    An ID attribute in XML documents and defines processing of this attribute to
    identify IDs in the absence of validation, without fetching external
    resources, and without relying on an internal subset.
  image: ''
  tags: Design
- building_block_id: json-schema
  type: Design
  category: Schema
  sorttype: A3
  sortcat: ''
  name: JSON Schema
  description: >-
    JSON Schema, describes your JSON data format. JSON Hyper-Schema, turns your
    JSON data into hyper-text. Use JSON schema when possible to standardize and
    validate your JSON structure.
  image: ''
  tags: Design
- building_block_id: schema.org
  type: Design
  category: Schema
  sorttype: A3
  sortcat: ''
  name: Schema.org
  description: Consider using Schema.org representations for common data elements.
  image: ''
  tags: Design
- building_block_id: markdown-syntax-for-object-notation-mson
  type: Design
  category: Schema
  sorttype: A3
  sortcat: ''
  name: Markdown Syntax for Object Notation (MSON)
  description: A Markdown syntax compatible with describing JSON and JSON Schema.
  image: ''
  tags: Design
- building_block_id: icalendar
  type: Design
  category: Open Standards
  sorttype: A3
  sortcat: ''
  name: iCalendar
  description: Use iCalendar when representing date / time formats in your API responses.
  image: ''
  tags: Design
- building_block_id: vcard
  type: Design
  category: Open Standards
  sorttype: A3
  sortcat: ''
  name: vCard
  description: >-
    vCard is a file format standard for electronic business cards. vCards are
    often attached to e-mail messages, but can be exchanged in other ways, such
    as on the World Wide Web or instant messaging. They can contain name and
    address information, telephone numbers, e-mail addresses, URLs, logos,
    photographs, and audio clips. Use vCard when representing contact data in
    your API responses.
  image: ''
  tags: Design
- building_block_id: kml
  type: Design
  category: Open Standards
  sorttype: A3
  sortcat: ''
  name: KML
  description: 'When working with mapping data, represent it using KML when possible.'
  image: ''
  tags: Design
- building_block_id: georss
  type: Design
  category: Open Standards
  sorttype: A3
  sortcat: ''
  name: geoRSS
  description: Also consider geoRSS when representing you geographic data.
  image: ''
  tags: Design
- building_block_id: m3u
  type: Design
  category: Open Standards
  sorttype: A3
  sortcat: ''
  name: m3u
  description: 'When providing formatted data for media formats, consider using m3u.'
  image: ''
  tags: Design
- building_block_id: uuid
  type: Design
  category: Open Standards
  sorttype: A3
  sortcat: ''
  name: UUID
  description: Use a universally unique identifier (UUID) when possible.
  image: ''
  tags: Design
- building_block_id: iso-8601-date-/-time
  type: Design
  category: Open Standards
  sorttype: A3
  sortcat: ''
  name: ISO 8601 (Date / Time)
  description: >-
    ISO 8601 Data elements and interchange formats – Information interchange –
    Representation of dates and times is an international standard covering the
    exchange of date and time-related data. The purpose of this standard is to
    provide an unambiguous and well-defined method of representing dates and
    times, so as to avoid misinterpretation of numeric representations of dates
    and times, particularly when data are transferred between countries with
    different conventions for writing numeric dates and times.
  image: ''
  tags: Design
- building_block_id: iso-4217-currency
  type: Design
  category: Open Standards
  sorttype: A3
  sortcat: ''
  name: ISO 4217 (Currency)
  description: >-
    Use ISO 427 data elements and interchange formats for the representation
    currency codes. ISO 4217 is a standard published by International
    Organization for Standardization, which delineates currency designators,
    country codes (alpha and numeric), and references to minor units in three
    tables: current currency & funds code list, current funds codes, list of
    codes for historic denominations of currencies & funds.
  image: ''
  tags: Design
- building_block_id: iso-3166-country
  type: Design
  category: Open Standards
  sorttype: A3
  sortcat: ''
  name: ISO 3166 (Country)
  description: >-
    Use ISO 3166 data elements and interchange formats for the representation
    country codes. The purpose of ISO 3166 is to define internationally
    recognized codes of letters and/or numbers that we can use when we refer to
    countries and subdivisions. However, it does not define the names of
    countries .
  image: ''
  tags: Design
- building_block_id: rdfa
  type: Design
  category: Open Standards
  sorttype: A3
  sortcat: ''
  name: RDFa
  description: Consider using RDFa for adding rich meta data to HTML representations.
  image: ''
  tags: Design
- building_block_id: rfc-7807
  type: Design
  category: Open Standards
  sorttype: A3
  sortcat: ''
  name: RFC 7807
  description: >-
    This document defines a problem detail as a way to carry machine-readable
    details of errors in a HTTP response to avoid the need to define new error
    response formats for HTTP APIs.
  image: ''
  tags: Design
- building_block_id: update-resource
  type: Design
  category: Resources
  sorttype: A3
  sortcat: ''
  name: Update resource
  description: How to update a resource
  image: ''
  tags: Design
- building_block_id: track-change
  type: Design
  category: Resources
  sorttype: A3
  sortcat: ''
  name: Track change
  description: How to track change on resources
  image: ''
  tags: Design
- building_block_id: batch-bulk
  type: Design
  category: Resources
  sorttype: A3
  sortcat: ''
  name: Batch Bulk
  description: >-
    How to handle batch/bulk processing/creation/update/... (e.g. handle
    multiple resources at conce)
  image: ''
  tags: Design
- building_block_id: update-resource-partially
  type: Design
  category: Resources
  sorttype: A3
  sortcat: ''
  name: Update resource partially
  description: How to udate partially a resource
  image: ''
  tags: Design
- building_block_id: delete-resource
  type: Design
  category: Resources
  sorttype: A3
  sortcat: ''
  name: Delete resource
  description: How to delete resources
  image: ''
  tags: Design
- building_block_id: retrieve-resource
  type: Design
  category: Resources
  sorttype: A3
  sortcat: ''
  name: Retrieve resource
  description: How to retrieve a resource
  image: ''
  tags: Design
- building_block_id: id-with-semantic
  type: Design
  category: Resources
  sorttype: A3
  sortcat: ''
  name: ID with semantic
  description: Using meaningful ids (like `me`)
  image: ''
  tags: Design
- building_block_id: replace-resource
  type: Design
  category: Resources
  sorttype: A3
  sortcat: ''
  name: Replace resource
  description: How to replace (or update fully) a resource
  image: ''
  tags: Design
- building_block_id: resource
  type: Design
  category: Resources
  sorttype: A3
  sortcat: ''
  name: Resource
  description: General informations about resources
  image: ''
  tags: Design
- building_block_id: url-format
  type: Design
  category: Resources
  sorttype: A3
  sortcat: ''
  name: URL format
  description: How to design URLs
  image: ''
  tags: Design
- building_block_id: create-resource
  type: Design
  category: Resources
  sorttype: A3
  sortcat: ''
  name: Create resource
  description: How to create resources
  image: ''
  tags: Design
- building_block_id: resource's-state
  type: Design
  category: Resources
  sorttype: A3
  sortcat: ''
  name: Resource's state
  description: How to change a resource's state/status (like processed/sent/paid/...)
  image: ''
  tags: Design
- building_block_id: resource-id
  type: Design
  category: Resources
  sorttype: A3
  sortcat: ''
  name: Resource ID
  description: What is a resource ID and/or how it's built
  image: ''
  tags: Design
- building_block_id: action-resource
  type: Design
  category: Resources
  sorttype: A3
  sortcat: ''
  name: Action resource
  description: How to use action resource (e.g. resources like /cancel or /approve)
  image: ''
  tags: Design
- building_block_id: create-resource-with-a-specific-id
  type: Design
  category: Resources
  sorttype: A3
  sortcat: ''
  name: Create resource with a specific ID
  description: How to create resource with a provided id
  image: ''
  tags: Design
- building_block_id: relationships
  type: Design
  category: Resources
  sorttype: A3
  sortcat: ''
  name: Relationships
  description: How to define and use relations between resources
  image: ''
  tags: Design
- building_block_id: retrieve-resource-partially
  type: Design
  category: Resources
  sorttype: A3
  sortcat: ''
  name: Retrieve resource partially
  description: How to retrieve partially a resource
  image: ''
  tags: Design
- building_block_id: definitions
  type: Design
  category: Design Process
  sorttype: A3
  sortcat: ''
  name: Definitions
  description: >-
    Usage of common API definition formats like Swagger, API Blueprint, RAML,
    and others for describing and defining APIs.
  image: ''
  tags: Design
- building_block_id: editor
  type: Design
  category: Design Process
  sorttype: A3
  sortcat: ''
  name: Editor
  description: >-
    An IDE for editing API definitions, as well as possible GUI interface for
    editing all of API details through desktop or web tooling.
  image: ''
  tags: Design
- building_block_id: forkable
  type: Design
  category: Design Process
  sorttype: A3
  sortcat: ''
  name: Forkable
  description: >-
    Allow an API definition to be forked, and built upon using a common API
    definition format.
  image: ''
  tags: Design
- building_block_id: sharing
  type: Design
  category: Design Process
  sorttype: A3
  sortcat: ''
  name: Sharing
  description: >-
    Allow for API definitions to be shared amongst team members through links,
    chat, email, and other channels.
  image: ''
  tags: Design
- building_block_id: collaboration
  type: Design
  category: Design Process
  sorttype: A3
  sortcat: ''
  name: Collaboration
  description: >-
    Enable the collaboration between users, both technical, as well as business
    stakeholders.
  image: ''
  tags: Design
- building_block_id: annotation
  type: Design
  category: Design Process
  sorttype: A3
  sortcat: ''
  name: Annotation
  description: >-
    Provide tooling for annotating API definitions that the design it
    represents, leaving notes and comments at all layers.
  image: ''
  tags: Design
- building_block_id: translation
  type: Design
  category: Design Process
  sorttype: A3
  sortcat: ''
  name: Translation
  description: >-
    Allowing for the translation of API designs between common API definition
    formats, allowing users to speak in any format.
  image: ''
  tags: Design
- building_block_id: highlighting
  type: Design
  category: Design Process
  sorttype: A3
  sortcat: ''
  name: Highlighting
  description: >-
    Enable highlighting of specific aspects of an API design to differentiate it
    from other areas, and establishing common patterns.
  image: ''
  tags: Design
- building_block_id: guide
  type: Design
  category: Organization
  sorttype: A3
  sortcat: ''
  name: Guide
  description: >-
    Pull together a common API design guide for use across an organization and
    sharing with the public to demonstrate a standard approach is being used.
  image: ''
  tags: Design
- building_block_id: notebook
  type: Design
  category: Organization
  sorttype: A3
  sortcat: ''
  name: Notebook
  description: >-
    A notebook for storing of API definitions into a single, potentially
    shareable location that can be used by an individual or group throughout the
    API lifecycle.
  image: ''
  tags: Design
- building_block_id: collections
  type: Design
  category: Organization
  sorttype: A3
  sortcat: ''
  name: Collections
  description: >-
    A folder or collection of API definitions mean to represent a single or
    multiple API descriptions and definitions, for use throughout API lifecycle.
  image: ''
  tags: Design
- building_block_id: dictionary
  type: Design
  category: Organization
  sorttype: A3
  sortcat: ''
  name: Dictionary
  description: >-
    A common set of API values to help provide consistent naming and patterns to
    be used at different layers of the API design process.
  image: ''
  tags: Design
- building_block_id: contact
  type: Design
  category: Organization
  sorttype: A3
  sortcat: ''
  name: Contact
  description: >-
    A common approach to defining and providing relevant contact information for
    each API resource crafted.
  image: ''
  tags: Design
- building_block_id: language
  type: Design
  category: Internationalization
  sorttype: A3
  sortcat: ''
  name: Language
  description: Which language(s) use when designing an API
  image: ''
  tags: Design
- building_block_id: acceptlanguage
  type: Design
  category: Internationalization
  sorttype: A3
  sortcat: ''
  name: Accept-Language
  description: "Set the language the API should be speaking using\_Accept-Language."
  image: ''
  tags: Design
- building_block_id: governance
  type: Design
  category: Other
  sorttype: A3
  sortcat: ''
  name: Governance
  description: 'How to ensure API governance (advertise, consistency, ...)'''
  image: ''
  tags: Design
- building_block_id: retrieve-a-collection
  type: Design
  category: Other
  sorttype: A3
  sortcat: ''
  name: Retrieve a collection
  description: How to get a collection or resources
  image: ''
  tags: Design
- building_block_id: asynchronicity
  type: Design
  category: Other
  sorttype: A3
  sortcat: ''
  name: Asynchronicity
  description: How to handle long operations
  image: ''
  tags: Design
- building_block_id: dereference-relationships
  type: Design
  category: Other
  sorttype: A3
  sortcat: ''
  name: Dereference Relationships
  description: How to load a resource and its linked resources in one call
  image: ''
  tags: Design
- building_block_id: translator
  type: Design
  category: Other
  sorttype: A3
  sortcat: ''
  name: Translator
  description: >-
    Tools for translating between various API definitions, allowing the
    transformation from RAML to Swagger, and between each API definition format.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-translation.png
  tags: Design
- building_block_id: command-line
  type: Design
  category: Other
  sorttype: A3
  sortcat: ''
  name: Command Line
  description: >-
    Command line tooling for use as part of the API design process, allowing
    developers to use single commands at the prompt.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-command-line.png
  tags: Design
- building_block_id: github-sync
  type: Design
  category: Other
  sorttype: A3
  sortcat: ''
  name: Github Sync
  description: >-
    The ability to store and sync API definitions with Github, providing a
    central public or private repository for the definition of an API resource.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-github.jpg
  tags: Design
- building_block_id: validator
  type: Design
  category: Other
  sorttype: A3
  sortcat: ''
  name: Validator
  description: >-
    Tools for validating API calls, enabling developers to determine which types
    of calls will be valid, using central API definition and schema.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-validation.png
  tags: Design
- building_block_id: api-counts
  type: Design
  category: Other
  sorttype: A3
  sortcat: ''
  name: API counts
  description: How many endpoints/resources in an API?
  image: ''
  tags: Design
- building_block_id: parser
  type: Design
  category: Other
  sorttype: A3
  sortcat: ''
  name: Parser
  description: >-
    An API definition parser, available in multiple languages and open up the
    programmatic generation of API definitions as localized object.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-gears.png
  tags: Design
- building_block_id: internal-apis
  type: Discovery
  category: Taking API Inventory
  sorttype: ''
  sortcat: ''
  name: Internal APIs
  description: >-
    Where are the existing APIs that are owned and operated within a company.
    Where is it found, what details and other resources are available?
  image: ''
  tags: ''
- building_block_id: public-apis
  type: Discovery
  category: Taking API Inventory
  sorttype: ''
  sortcat: ''
  name: Public APIs
  description: >-
    What public APIs are currently in used as part of operations? What type of
    API is it? What company operates it, and what is the relationship in place?
  image: ''
  tags: ''
- building_block_id: apis.json
  type: Discovery
  category: API Definition Formats
  sorttype: ''
  sortcat: ''
  name: APIs.json
  description: >-
    Use the APIs.json JSON specification for describing collections of APIs,
    allowing them to be indexed for inclusion in public and private search
    engines.
  image: ''
  tags: Discovery
- building_block_id: api-directory
  type: Discovery
  category: How Are APIs Found?
  sorttype: ''
  sortcat: ''
  name: API Directory
  description: >-
    API directories allow for the submissions and curation of APIs, then enable
    users to search and browse by keywords and tags, in many areas.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-directory.png
  tags: 'Discovery,Directory,Discovery'
- building_block_id: api-hub
  type: Discovery
  category: How Are APIs Found?
  sorttype: ''
  sortcat: ''
  name: API Hub
  description: >-
    API directories usually span many categories, where hubs often focus on
    specific area like telco, or healthcare, providing a single hub for
    discovering APIs.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-hub.png
  tags: Discovery
- building_block_id: ide-extension
  type: Discovery
  category: How Are APIs Found?
  sorttype: ''
  sortcat: ''
  name: IDE Extension
  description: >-
    integrated development environment (IDE) extensions or add-ons that allow
    developers to quickly discovery and understand API endpoints.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-ide.png
  tags: Discovery
- building_block_id: api-explorer
  type: Discovery
  category: How Are APIs Found?
  sorttype: ''
  sortcat: ''
  name: API Explorer
  description: >-
    Sometimes also called consoles are designed to provide an interactive
    interface for developers to discover, explore, make calls and see responses
    in an interactive way.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-compass.png
  tags: Discovery
- building_block_id: api-questions
  type: Discovery
  category: How Are APIs Found?
  sorttype: ''
  sortcat: ''
  name: API Questions
  description: >-
    Providing a list of questions about API operations, using the
    api-questions-format, allowing common aspects to be indexed and discoverable
    via API search.
  image: ''
  tags: Discovery
- building_block_id: other
  type: Discovery
  category: How Are APIs Found?
  sorttype: ''
  sortcat: ''
  name: Other
  description: >-
    What other ways are APIs found? Even if it involves asking someone, looking
    on network locations, or otherwise.
  image: ''
  tags: ''
- building_block_id: programmableweb
  type: Discovery
  category: API Directories
  sorttype: ''
  sortcat: ''
  name: ProgrammableWeb
  description: >-
    The original API directory created by John Musser in 2005, to provide a
    single, searchable directory of common public APIs.
  image: ''
  tags: Discovery
- building_block_id: mashape
  type: Discovery
  category: API Directories
  sorttype: ''
  sortcat: ''
  name: Mashape
  description: >-
    An API directory born out of the API management platform Mashape, providing
    a directory of Mashape clients APIs.
  image: ''
  tags: Discovery
- building_block_id: apis.guru
  type: Discovery
  category: API Directories
  sorttype: ''
  sortcat: ''
  name: APIs.guru
  description: >-
    Wikipedia for Web APIs. Repository of API specs in OpenAPI(fka Swagger) 2.0
    format.
  image: ''
  tags: ''
- building_block_id: apis.io
  type: Discovery
  category: API Search Engines
  sorttype: ''
  sortcat: ''
  name: APIs.io
  description: >-
    APIs.io is an open source search, driven using the APIs.json discovery
    format, allowing API providers to manage the discovery index of their own
    APIs, while allowing consumers to search, discover, and build collections of
    APIs they use.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/apis-io-logo.png
  tags: Discovery
- building_block_id: crunchbase
  type: Discovery
  category: Business Directories
  sorttype: ''
  sortcat: ''
  name: Crunchbase
  description: >-
    A directory of companies that is curated by Techcrunch, and allows an
    approach to listing companies who have APIs.
  image: ''
  tags: Discovery
- building_block_id: angellist
  type: Discovery
  category: Business Directories
  sorttype: ''
  sortcat: ''
  name: AngelList
  description: >-
    Like Crunchbase, AngelList is a directory of companies, but also provides a
    way to showcase companies who have APIs.
  image: ''
  tags: Discovery
- building_block_id: base-url-for-api
  type: DNS
  category: Domain(s)
  sorttype: ''
  sortcat: ''
  name: Base URL for API
  description: >-
    Providing a simple base URL for accessing API resources -- api.example.com
    is one common pattern.
  image: ''
  tags: DNS
- building_block_id: base-url-for-portal
  type: DNS
  category: Domain(s)
  sorttype: ''
  sortcat: ''
  name: Base URL for Portal
  description: >-
    Providing a simple base URL for accessing the developer portal --
    developer.example.com is one common pattern.
  image: ''
  tags: DNS
- building_block_id: domain
  type: DNS
  category: Core DNS
  sorttype: ''
  sortcat: ''
  name: Domain
  description: 'Management of a single domain, and its administrative information.'
  image: ''
  tags: 'DNS,Core DNS'
- building_block_id: record
  type: DNS
  category: Core DNS
  sorttype: ''
  sortcat: ''
  name: Record
  description: Management of all types of records for a single domain.
  image: ''
  tags: 'DNS,Core DNS'
- building_block_id: zone
  type: DNS
  category: Core DNS
  sorttype: ''
  sortcat: ''
  name: Zone
  description: Manage the zones for any particular domain.
  image: ''
  tags: 'DNS,Core DNS'
- building_block_id: registration
  type: DNS
  category: Core DNS
  sorttype: ''
  sortcat: ''
  name: Registration
  description: >-
    Being able to register new domains, purchase, and manage ownership and
    registrar.
  image: ''
  tags: 'DNS,Core DNS'
- building_block_id: cache
  type: DNS
  category: Core DNS
  sorttype: ''
  sortcat: ''
  name: Cache
  description: Allow for domain level caching of all requests made through the domain.
  image: ''
  tags: 'DNS,Core DNS'
- building_block_id: ip-address
  type: DNS
  category: Core DNS
  sorttype: ''
  sortcat: ''
  name: IP Address
  description: 'Ability to manage IP address information, and perform lookups.'
  image: ''
  tags: 'DNS,Core DNS'
- building_block_id: geo-/-regions
  type: DNS
  category: Core DNS
  sorttype: ''
  sortcat: ''
  name: Geo / Regions
  description: Manage geographic specific details about domain operation.
  image: ''
  tags: 'DNS,Core DNS'
- building_block_id: forwarding
  type: DNS
  category: Core DNS
  sorttype: ''
  sortcat: ''
  name: Forwarding
  description: Enabling the ability to forward domains.
  image: ''
  tags: 'DNS,Core DNS'
- building_block_id: private
  type: DNS
  category: Core DNS
  sorttype: ''
  sortcat: ''
  name: Private
  description: Allowing for the management of a private DNS deployment.
  image: ''
  tags: 'DNS,Core DNS'
- building_block_id: health-monitors
  type: DNS
  category: Stability
  sorttype: ''
  sortcat: ''
  name: Health Monitors
  description: >-
    The ability to monitor domain health and availability, and receive
    notifications, or take actions based upon.
  image: ''
  tags: 'DNS,DNS Stability'
- building_block_id: dns-failover
  type: DNS
  category: Stability
  sorttype: ''
  sortcat: ''
  name: DNS Failover
  description: >-
    Allowing for failover at the DNS level, providing redundancy and failover of
    DNS infrastructure.
  image: ''
  tags: 'DNS,DNS Stability'
- building_block_id: latency-based-routing
  type: DNS
  category: Stability
  sorttype: ''
  sortcat: ''
  name: Latency Based Routing
  description: >-
    Being able to route DNS traffic to different locations based upon latency of
    networks.
  image: ''
  tags: 'DNS,DNS Stability'
- building_block_id: verification
  type: DNS
  category: Stability
  sorttype: ''
  sortcat: ''
  name: Verification
  description: >-
    Ability to verify availability, and health of DNS infrastructure, and
    certifying for other parties.
  image: ''
  tags: 'DNS,DNS Stability'
- building_block_id: service-level-agreement
  type: DNS
  category: Stability
  sorttype: ''
  sortcat: ''
  name: Service Level Agreement
  description: Providing a service level agreement (SLA) for DNS customers.
  image: ''
  tags: 'DNS,Stability,DNS Stability'
- building_block_id: threat-analysis
  type: DNS
  category: Security
  sorttype: ''
  sortcat: ''
  name: Threat Analysis
  description: Providing systems that will automate the analysis of threats to DNS.
  image: ''
  tags: 'DNS,Security,DNS Security'
- building_block_id: threat-intelligence
  type: DNS
  category: Security
  sorttype: ''
  sortcat: ''
  name: Threat Intelligence
  description: Give access to the actual intelligence behind threats to DNS.
  image: ''
  tags: 'DNS,DNS Security'
- building_block_id: whitelist-/-blacklist
  type: DNS
  category: Security
  sorttype: ''
  sortcat: ''
  name: Whitelist / Blacklist
  description: >-
    Being able to establish white lists and black lists of domains, IP
    addresses, and other criteria for DNS level defense.
  image: ''
  tags: 'DNS,DNS Security'
- building_block_id: denial-of-service-ddos
  type: DNS
  category: Security
  sorttype: ''
  sortcat: ''
  name: Denial of Service (DDOS)
  description: >-
    DNS tools for identifying and defending against a denial of service (DOS)
    attack.
  image: ''
  tags: 'DNS,DNS Security'
- building_block_id: analytics
  type: DNS
  category: Awareness
  sorttype: ''
  sortcat: ''
  name: Analytics
  description: >-
    Providing analytics about DNS configuration and operations an operation
    through visual interface.
  image: ''
  tags: 'DNS,DNS Awareness'
- building_block_id: reporting
  type: DNS
  category: Awareness
  sorttype: ''
  sortcat: ''
  name: Reporting
  description: Provide self-service reporting tools on DNS activity and services.
  image: ''
  tags: 'DNS Awareness,DNS'
- building_block_id: history
  type: DNS
  category: Awareness
  sorttype: ''
  sortcat: ''
  name: History
  description: >-
    Give access to DNS activity history allowing for the search and browsing of
    all services in the past.
  image: ''
  tags: 'DNS Awareness,DNS'
- building_block_id: webhooks
  type: DNS
  category: Notifications
  sorttype: ''
  sortcat: ''
  name: Webhooks
  description: Providing notifications via webhooks when it comes to DNS events.
  image: ''
  tags: 'DNS,DNS Notifications'
- building_block_id: email
  type: DNS
  category: Notifications
  sorttype: ''
  sortcat: ''
  name: Email
  description: Provide notifications about DNS layer via emails.
  image: ''
  tags: 'DNS,DNS Notifications'
- building_block_id: sms
  type: DNS
  category: Notifications
  sorttype: ''
  sortcat: ''
  name: SMS
  description: Provide notifications about DNS layer via SMS.
  image: ''
  tags: 'DNS,DNS Notifications'
- building_block_id: basecamp
  type: DNS
  category: Integrations
  sorttype: ''
  sortcat: ''
  name: Basecamp
  description: Providing DNS integration with the Basecamp platform.
  image: ''
  tags: 'DNS,DNS Integration'
- building_block_id: flowdock
  type: DNS
  category: Integrations
  sorttype: ''
  sortcat: ''
  name: Flowdock
  description: Providing DNS integration with the Flowdock system.
  image: ''
  tags: 'DNS,DNS Integration'
- building_block_id: nagios
  type: DNS
  category: Integrations
  sorttype: ''
  sortcat: ''
  name: Nagios
  description: Providing DNS integration with the Nagios monitoring suite.
  image: ''
  tags: 'DNS,DNS Integration'
- building_block_id: opsgenie
  type: DNS
  category: Integrations
  sorttype: ''
  sortcat: ''
  name: OpsGenie
  description: Providing DNS integration with the OpsGenie platform.
  image: ''
  tags: 'DNS,DNS Integration'
- building_block_id: pagerduty
  type: DNS
  category: Integrations
  sorttype: ''
  sortcat: ''
  name: PagerDuty
  description: Providing DNS integration with the PagerDuty service.
  image: ''
  tags: 'DNS,DNS Integration'
- building_block_id: pingdom
  type: DNS
  category: Integrations
  sorttype: ''
  sortcat: ''
  name: Pingdom
  description: Providing DNS integration with the Pingdom service.
  image: ''
  tags: 'DNS,DNS Integration'
- building_block_id: slack
  type: DNS
  category: Integrations
  sorttype: ''
  sortcat: ''
  name: Slack
  description: >-
    Providing integration with the messaging platform Slack for DNS
    notificaitons.
  image: ''
  tags: 'DNS,DNS Integration'
- building_block_id: victorops
  type: DNS
  category: Integrations
  sorttype: ''
  sortcat: ''
  name: VictorOps
  description: Providing DNS integration with the VictorOps system.
  image: ''
  tags: 'DNS,DNS Integration'
- building_block_id: diagnostic
  type: DNS
  category: Utility
  sorttype: ''
  sortcat: ''
  name: Diagnostic
  description: Providing diagnostic tools for DNS setup.
  image: ''
  tags: 'DNS,DNS Utility'
- building_block_id: batch-requests
  type: DNS
  category: Utility
  sorttype: ''
  sortcat: ''
  name: Batch Requests
  description: Allowing for batch request submissions of DNS changes.
  image: ''
  tags: 'DNS,DNS Utility'
- building_block_id: templates
  type: DNS
  category: Utility
  sorttype: ''
  sortcat: ''
  name: Templates
  description: Providing the ability to create and use templates when configuring DNS.
  image: ''
  tags: 'DNS,DNS Utility'
- building_block_id: import
  type: DNS
  category: Utility
  sorttype: ''
  sortcat: ''
  name: Import
  description: Allowing for the import of DNS configuration using portable formats.
  image: ''
  tags: 'DNS,DNS Utility'
- building_block_id: export
  type: DNS
  category: Utility
  sorttype: ''
  sortcat: ''
  name: Export
  description: Allowing for the export of DNS configuration using portable formats.
  image: ''
  tags: 'DNS,DNS Utility'
- building_block_id: api
  type: DNS
  category: Utility
  sorttype: ''
  sortcat: ''
  name: API
  description: >-
    A set of API resources available for managing all aspects of DNS operations,
    so that DNS for API operations can be automated.
  image: ''
  tags: 'DNS,DNS Utility'
- building_block_id: command-line-interface
  type: DNS
  category: Utility
  sorttype: ''
  sortcat: ''
  name: Command Line Interface
  description: Providing a command line interface for managing DNS services.
  image: ''
  tags: 'DNS,DNS Utility'
- building_block_id: documentation
  type: Documentation
  category: Elements
  sorttype: ''
  sortcat: ''
  name: Documentation
  description: >-
    Simple, easy to understand, documentation of what an API does, that is kept
    up to date with API roadmap.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-documentation.png
  tags: 'Management,Documentation'
- building_block_id: list-of-endpoints
  type: Documentation
  category: Elements
  sorttype: ''
  sortcat: ''
  name: List of Endpoints
  description: >-
    A simple listing of all endpoints provides a quick introduction of what is
    available with an API.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-list.png
  tags: 'Management,Documentation'
- building_block_id: interactive-documentation
  type: Documentation
  category: Elements
  sorttype: ''
  sortcat: ''
  name: Interactive Documentation
  description: >-
    Interactive, hands-on documentation, provided by common approaches like
    Swagger and API Blueprint.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-documentation-interactive.png
  tags: 'Management,Documentation'
- building_block_id: api-explorer
  type: Documentation
  category: Elements
  sorttype: ''
  sortcat: ''
  name: API Explorer
  description: >-
    API explorers allow users to make calls and explore REST APIs using a web
    interface.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-explorer.png
  tags: 'Management,Documentation'
- building_block_id: error-response-codes
  type: Documentation
  category: Elements
  sorttype: ''
  sortcat: ''
  name: Error Response Codes
  description: >-
    Provide a robust, complete, clear and meaningful list of API error response
    codes.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-error.png
  tags: 'Management,Documentation'
- building_block_id: swagger-ui
  type: Documentation
  category: Solutions
  sorttype: ''
  sortcat: ''
  name: Swagger UI
  description: >-
    Swagger UI is a dependency-free collection of HTML, Javascript, and CSS
    assets that dynamically generate beautiful documentation from a
    Swagger-compliant API.
  image: ''
  tags: ''
- building_block_id: slate
  type: Documentation
  category: Solutions
  sorttype: ''
  sortcat: ''
  name: Slate
  description: 'Slate helps you create beautiful, intelligent, responsive API documentation.'
  image: ''
  tags: ''
- building_block_id: lucybot-console
  type: Documentation
  category: Solutions
  sorttype: ''
  sortcat: ''
  name: Lucybot Console
  description: >-
    LucyBot's API Console uses Swagger 2.0 to generate customizable
    documentation for your API.
  image: ''
  tags: ''
- building_block_id: crowd-sourced-updates
  type: Documentation
  category: Changes
  sorttype: ''
  sortcat: ''
  name: Crowd Sourced Updates
  description: >-
    Allow users to suggest and make changes via a Github repository by making
    pull requests.
  image: ''
  tags: ''
- building_block_id: notifications
  type: Documentation
  category: Changes
  sorttype: ''
  sortcat: ''
  name: Notifications
  description: >-
    Providing API consumers with notifications when API documentation is
    changed.
  image: ''
  tags: ''
- building_block_id: case-studies
  type: Documentation
  category: Resources
  sorttype: ''
  sortcat: ''
  name: Case Studies
  description: >-
    Offering a wealth of case studies of actual implementations that have
    occurred with an API , showing potential consumers what is possible.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-case-study.png
  tags: 'Management,API Management Resources'
- building_block_id: howto-guides
  type: Documentation
  category: Resources
  sorttype: ''
  sortcat: ''
  name: How-to Guides
  description: >-
    Providing how-to guides that walk consumers through common aspects of API
    integration, giving them self-service resources they can use.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-how-to-guide.png
  tags: 'Management,API Management Resources'
- building_block_id: white-papers
  type: Documentation
  category: Resources
  sorttype: ''
  sortcat: ''
  name: White Papers
  description: >-
    Offer white papers that educate consumers around topics that are relevant to
    the platform, consumers, and the industry that is being operated in.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-documentation.png
  tags: 'Management,API Management Resources'
- building_block_id: webinars
  type: Documentation
  category: Resources
  sorttype: ''
  sortcat: ''
  name: Webinars
  description: >-
    Provide online webinars on a regular basis that API consumers can attend to
    learn about various aspects of platform operations.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-webinar.png
  tags: 'Management,API Management Resources'
- building_block_id: events
  type: Documentation
  category: Resources
  sorttype: ''
  sortcat: ''
  name: Events
  description: >-
    Publish a page with information about any events the an API program will be
    attending, or maybe links to video and slide decks from past conferences.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-calendar.png
  tags: 'Management,API Management Resources'
- building_block_id: slideshare
  type: Documentation
  category: Resources
  sorttype: ''
  sortcat: ''
  name: Slideshare
  description: >-
    Publish a list of slide decks available on a Slideshare account, providing
    developers with access to past talks the API program has done.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-slideshare.png
  tags: 'Management,API Management Resources'
- building_block_id: codecademy
  type: Documentation
  category: Resources
  sorttype: ''
  sortcat: ''
  name: Codecademy
  description: >-
    Creating courses on Codecademy, then publishing them within an API developer
    area, providing lessons for developers on how an API operates.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-codecademy.png
  tags: 'Management,API Management Resources'
- building_block_id: tour
  type: Documentation
  category: Resources
  sorttype: ''
  sortcat: ''
  name: Tour
  description: >-
    Providing a guided tour of how a platform and API operates, allowing new
    developers to walk through all aspects of operations in an interactive or
    video format.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-path.png
  tags: 'Management,API Management Resources'
- building_block_id: glossary
  type: Documentation
  category: Resources
  sorttype: ''
  sortcat: ''
  name: Glossary
  description: >-
    A glossary of terms that applies to an industry, platform, and the business
    or technical aspects of operations, providing API consumers who may not be
    familiar with sector or platform specific terms, with a dictionary they can
    use during integration.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-dictionary.png
  tags: 'Management,API Management Resources'
- building_block_id: videos
  type: Documentation
  category: Resources
  sorttype: ''
  sortcat: ''
  name: Videos
  description: >-
    Provides video resources, helping people understand the API platform, how it
    can be put to use, and any other supporting areas of API operations.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-video.png
  tags: 'Management,API Management Resources'
- building_block_id: storage
  type: Email
  category: Message
  sorttype: ''
  sortcat: ''
  name: Storage
  description: >-
    Providing developers with the ability to store email either via standard
    mail protocols, or in the cloud using common storage services.&nbsp;
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-email-storage.jpg
  tags: ''
- building_block_id: send-email
  type: Email
  category: Message
  sorttype: ''
  sortcat: ''
  name: Send Email
  description: >-
    Allowing users to send email messages via SMTP, or API interfaces, enabling
    more advanaced server configuration and management beyond standard mail
    services.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-message-send.png
  tags: ''
- building_block_id: receive-message
  type: Email
  category: Message
  sorttype: ''
  sortcat: ''
  name: Receive Message
  description: >-
    Provide the ability to receive email via traditional POP email services, as
    well as through custom API interfaces, allowing developer to provision
    mailbox online via API.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-message-receive.png
  tags: ''
- building_block_id: search-messages
  type: Email
  category: Message
  sorttype: ''
  sortcat: ''
  name: Search Messages
  description: >-
    Providing the ability to search emails that have been sent, received, or
    possible just stored within email storage services, allowing the discovery
    of messages by to, from, date, or message content.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-magnifying-glass.png
  tags: ''
- building_block_id: delivery-confirmation
  type: Email
  category: Delivery
  sorttype: ''
  sortcat: ''
  name: Delivery Confirmation
  description: >-
    Providing email confirmation or receipts verifying that an email message was
    received by the intended user or users.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-check.png
  tags: ''
- building_block_id: opened
  type: Email
  category: Delivery
  sorttype: ''
  sortcat: ''
  name: Opened
  description: >-
    Providing services for confirmation whether or not an email was actually
    opened by receipient.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-email-open.png
  tags: ''
- building_block_id: blocking
  type: Email
  category: Delivery
  sorttype: ''
  sortcat: ''
  name: Blocking
  description: >-
    Providing the ability to see which emais have been blocked by receipients,
    and manage messages and users according to whether they block messages or
    not.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-stop.png
  tags: ''
- building_block_id: bounces
  type: Email
  category: Delivery
  sorttype: ''
  sortcat: ''
  name: Bounces
  description: >-
    Allowing developers to manage emails that have bounced due to bad email
    address, or other network related reasons, and manage users and emails
    accordingly.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-email-bounce.png
  tags: ''
- building_block_id: spam
  type: Email
  category: Delivery
  sorttype: ''
  sortcat: ''
  name: SPAM
  description: >-
    Provide common tools for dealing with SPAM email messages, possibly for both
    sending emails and ensuring they make it through SPAM controls, and also
    receiving and preventing unwanted messages.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-email-spam.png
  tags: ''
- building_block_id: mail-merge
  type: Email
  category: Delivery
  sorttype: ''
  sortcat: ''
  name: Mail Merge
  description: >-
    Allowing developers to include contact lists along with bulk email message
    sends, and merging names, and emails with a templated email message.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-email-merge.png
  tags: ''
- building_block_id: webhooks
  type: Email
  category: Real-Time
  sorttype: ''
  sortcat: ''
  name: Webhooks
  description: >-
    A webhook in web development is a method of augmenting or altering the
    behavior of a web page, or web application, with custom callbacks. These
    callbacks may be maintained, modified, and managed by third-party users and
    developers who may not necessarily be affiliated with the originating
    website or application.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/webhooks.png
  tags: ''
- building_block_id: sync
  type: Email
  category: Real-Time
  sorttype: ''
  sortcat: ''
  name: Sync
  description: >-
    Allowing for the real-time sync of email storage, sends, receipts, and other
    email operations between devices, using cloud infrastructure.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-sync.png
  tags: ''
- building_block_id: email-lists
  type: Email
  category: Organization
  sorttype: ''
  sortcat: ''
  name: Email Lists
  description: >-
    Allowing for developers to create, and manage list of email address, that
    can be used as part of sending emails in their applications using APIs.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-list.png
  tags: ''
- building_block_id: mailbox
  type: Email
  category: Organization
  sorttype: ''
  sortcat: ''
  name: Mailbox
  description: >-
    Provide the ability to create, update, and remove email inboxes, and allow
    users to manage and organize their email by mailbox.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-email-newsletter.png
  tags: ''
- building_block_id: channels
  type: Email
  category: Organization
  sorttype: ''
  sortcat: ''
  name: Channels
  description: >-
    Enable developers to create channels, and organize users and emails by
    channel, and switch across channels to create, and manage email operations.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-television.png
  tags: ''
- building_block_id: routes
  type: Email
  category: Organization
  sorttype: ''
  sortcat: ''
  name: Routes
  description: >-
    Allow for establishing of email routes which direct which mailboxes email go
    into based upon rules, and filters, allowing for custom orchestration of
    email operations.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-road-forks.png
  tags: ''
- building_block_id: threads
  type: Email
  category: Organization
  sorttype: ''
  sortcat: ''
  name: Threads
  description: >-
    Enable the ability to string together email messages into threads, giving
    many emails a potential linear storyline that provides context to a
    particular email conversation.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-sewing.png
  tags: ''
- building_block_id: tags
  type: Email
  category: Organization
  sorttype: ''
  sortcat: ''
  name: Tags
  description: >-
    Allowing developers to tag emails, users, and any other part of email
    operations with keywords and phrases, along with way to add, update, delete,
    and manage tags.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-tag.png
  tags: ''
- building_block_id: campaign
  type: Email
  category: Organization
  sorttype: ''
  sortcat: ''
  name: Campaign
  description: >-
    Providing tools for managing email campaigns, and organizing any API
    operations under a single campaign via the API.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-campaign-management.jpg
  tags: ''
- building_block_id: folders
  type: Email
  category: Organization
  sorttype: ''
  sortcat: ''
  name: Folders
  description: >-
    Provide the ability to organize emails on a file system using folders,
    alloing the storage of emails as files, for searching and organization
    outside of standard email mailboxes.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-folder.png
  tags: ''
- building_block_id: files
  type: Email
  category: Media
  sorttype: ''
  sortcat: ''
  name: Files
  description: >-
    Allow the management of files that were either received as email
    attachments, and the ability to upload, search, and attach to outgoing
    messages.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-file-upload.png
  tags: ''
- building_block_id: logs
  type: Email
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Logs
  description: >-
    Providing logging of all email transactions, and access via an API to
    search, view, and manage log entries across email operations.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-exam.png
  tags: ''
- building_block_id: statistics
  type: Email
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Statistics
  description: >-
    Provide analytics and statistics driven from email operations logging,
    giving developers API access to statistics across their messaging
    integration.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-analytics-5.jpeg
  tags: ''
- building_block_id: reporting
  type: Email
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Reporting
  description: >-
    Provide API access to reports generated from email operations, allowing
    programmatic access to canned or custom data driven reporting on top of
    messaging integration.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-status-dashboard.png
  tags: ''
- building_block_id: account-balance
  type: Email
  category: Account
  sorttype: ''
  sortcat: ''
  name: Account Balance
  description: >-
    Opening up API access to a developers account, allowing them to manage how
    much they spend on email messages, and other platform services.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-account-balance.png
  tags: ''
- building_block_id: embeddable-page
  type: Embeddable
  category: Overview
  sorttype: ''
  sortcat: ''
  name: Embeddable Page
  description: >-
    Providing a single page with an overview of all of the embeddable resources
    available for an API platform.
  image: ''
  tags: ''
- building_block_id: language-support
  type: Embeddable
  category: Overview
  sorttype: ''
  sortcat: ''
  name: Language Support
  description: Providing support for multiple languages across embeddable elements.
  image: ''
  tags: Embeddable
- building_block_id: css-control
  type: Embeddable
  category: Overview
  sorttype: ''
  sortcat: ''
  name: CSS Control
  description: Providing support over CSS elements for embeddable elements.
  image: ''
  tags: Embeddable
- building_block_id: analytics
  type: Embeddable
  category: Overview
  sorttype: ''
  sortcat: ''
  name: Analytics
  description: Providing analytics as part of the embeddable tooling operations.
  image: ''
  tags: Embeddable
- building_block_id: widgets
  type: Embeddable
  category: Embeddable Tools
  sorttype: ''
  sortcat: ''
  name: Widgets
  description: >-
    Widgets are highly functional, API is driven​ JavaScript tools that provide
    portable applications that can be embedded on any website or application.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-widget.png
  tags: 'Management,API Management Embeddable,Embeddable'
- building_block_id: buttons
  type: Embeddable
  category: Embeddable Tools
  sorttype: ''
  sortcat: ''
  name: Buttons
  description: >-
    Buttons are shareable snippets of code that often share, syndicate or
    trigger a variety of events that use APIs as their source.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-power-button.png
  tags: 'Management,API Management Embeddable,Embeddable'
- building_block_id: badges
  type: Embeddable
  category: Embeddable Tools
  sorttype: ''
  sortcat: ''
  name: Badges
  description: >-
    Badges are common for displaying content and resources delivered via an API
    and allow these assets to be embedded on any website or application.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-badges.png
  tags: 'Management,API Management Embeddable,Embeddable'
- building_block_id: bookmarklet
  type: Embeddable
  category: Embeddable Tools
  sorttype: ''
  sortcat: ''
  name: Bookmarklet
  description: >-
    A bookmarklet that can be added to the toolbar of a browser, and quickly
    push data to an API.
  image: ''
  tags: Embeddable
- building_block_id: login-button
  type: Embeddable
  category: Embeddable Tools
  sorttype: ''
  sortcat: ''
  name: Login Button
  description: Providing a single click button for logging into system.
  image: ''
  tags: Embeddable
- building_block_id: intents
  type: Embeddable
  category: Embeddable Tools
  sorttype: ''
  sortcat: ''
  name: Intents
  description: >-
    providing the ability to easily make a single, or orchestrate several API
    calls -- fulfilling a single intent.
  image: ''
  tags: Embeddable
- building_block_id: widget-builder
  type: Embeddable
  category: Embed Engines
  sorttype: ''
  sortcat: ''
  name: Widget Builder
  description: >-
    A widget builder provides a form that API consumers can use to configure a
    predefined widget that is integrated with an API, allowing them to customize
    and tailor the widget experience.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-embeddable.png
  tags: 'Management,API Management Embeddable,Embeddable'
- building_block_id: javascript-api
  type: Embeddable
  category: Embed Engines
  sorttype: ''
  sortcat: ''
  name: JavaScript API
  description: >-
    A complete JavaScript API that developers can use to build and manage their
    own JavaScript integrations with an APIs resources, beyond existing widgets.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-javascript-api.png
  tags: 'Management,API Management Embeddable,Embeddable'
- building_block_id: open-graph-protocol
  type: Embeddable
  category: Embed Formats
  sorttype: ''
  sortcat: ''
  name: Open Graph Protocol
  description: >-
    The Open Graph protocol enables any web page to become a rich object in a
    social graph, by embedding of simple tags in the pages header that describe
    objects.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/open-graph-logo.png
  tags: 'Embeddable,Facebook,Embeddable'
- building_block_id: oembed
  type: Embeddable
  category: Embed Formats
  sorttype: ''
  sortcat: ''
  name: oEmbed
  description: >-
    Format for allowing an embedded representation of a URL on third party sites
    to display embedded content (such as photos or videos) when a user posts a
    link to that resource.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/oembed-logo.png
  tags: 'Embeddable,Embeddable'
- building_block_id: encryption-overview
  type: Encryption
  category: Overview
  sorttype: ''
  sortcat: ''
  name: Encryption Overview
  description: Providing an overview of encryption for a platofrm.
  image: ''
  tags: Encryption
- building_block_id: growth-in-new-users
  type: Evangelism
  category: Goals
  sorttype: ''
  sortcat: ''
  name: Growth in New Users
  description: >-
    Growing the number of new signups for an API platform, increasing the number
    of new consumers, and potentially establishing as an active user.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-analytics-4.jpeg
  tags: Evangelism
- building_block_id: growth-in-existing-user-api-usage
  type: Evangelism
  category: Goals
  sorttype: ''
  sortcat: ''
  name: Growth in Existing User API Usage
  description: >-
    Growing the number of existing users who are actively using an API platform,
    increasing the number of APIs they use, and the number of calls they make.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-analytics-4.jpeg
  tags: Evangelism
- building_block_id: brand-awareness
  type: Evangelism
  category: Goals
  sorttype: ''
  sortcat: ''
  name: Brand Awareness
  description: >-
    A consistent strategy and set of resources for extending the brand reach for
    any API platform, by providing a set of instructions and assets for
    consumers to use.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-brand.png
  tags: Evangelism
- building_block_id: more-applications
  type: Evangelism
  category: Goals
  sorttype: ''
  sortcat: ''
  name: More Applications
  description: Increase the number of applications being developed on top of APIs.
  image: ''
  tags: Evangelism
- building_block_id: new-system-integrations
  type: Evangelism
  category: Goals
  sorttype: ''
  sortcat: ''
  name: New System Integrations
  description: >-
    Increase the number of integrations that occur with the API, into other
    systems.
  image: ''
  tags: Evangelism
- building_block_id: other-goals
  type: Evangelism
  category: Goals
  sorttype: ''
  sortcat: ''
  name: Other Goals
  description: Any other goal that might be associated with evangelism activities.
  image: ''
  tags: Evangelism
- building_block_id: consumer-/-developer-showcase
  type: Evangelism
  category: Consumer Outreach
  sorttype: ''
  sortcat: ''
  name: Consumer / Developer Showcase
  description: >-
    Providing a showcase of the spotlight is put on  developers / consumers who
    are doing interesting things on the platform.
  image: ''
  tags: Evangelism
- building_block_id: fresh-engagement
  type: Evangelism
  category: Consumer Outreach
  sorttype: ''
  sortcat: ''
  name: Fresh Engagement
  description: >-
    Emailing new developers who have registered weekly to see what their
    immediate needs are, while their registration is fresh in their minds.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-leaf.png
  tags: Evangelism
- building_block_id: active-user-engagement
  type: Evangelism
  category: Consumer Outreach
  sorttype: ''
  sortcat: ''
  name: Active User Engagement
  description: >-
    Where we reach out to existing, active users of your API and find out what
    they need, profiling them via Twitter, Facebook, LinkedIn and pulling any
    profile information to grade and categorize each developer.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-arrows-circular.png
  tags: Evangelism
- building_block_id: historical-engagement
  type: Evangelism
  category: Consumer Outreach
  sorttype: ''
  sortcat: ''
  name: Historical Engagement
  description: >-
    Emailing historical active and / or inactive developers to engage and
    understand what their needs are and would make them active or increase
    activity.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-clock.jpeg
  tags: Evangelism
- building_block_id: social-engagement
  type: Evangelism
  category: Consumer Outreach
  sorttype: ''
  sortcat: ''
  name: Social Engagement
  description: >-
    When emailing any developer, using Rapportive we establish any URL, Twitter,
    Facebook or LinkedIn profile they have and reach out via these networks.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-twitter-icon.png
  tags: Evangelism
- building_block_id: new-partner-engagement
  type: Evangelism
  category: Partner Outreach
  sorttype: ''
  sortcat: ''
  name: New Partner Engagement
  description: >-
    When a new partner is signed up, there is engagement of some sort,
    on-boarding them properly as a partner.
  image: ''
  tags: Evangelism
- building_block_id: existing-partner-showcase
  type: Evangelism
  category: Partner Outreach
  sorttype: ''
  sortcat: ''
  name: Existing Partner Showcase
  description: >-
    The showcasing of existing partners, to make sure the spotlight is on them
    in blog posts, PR, and social media.
  image: ''
  tags: Evangelism
- building_block_id: projects
  type: Evangelism
  category: Blogging
  sorttype: ''
  sortcat: ''
  name: Projects
  description: >-
    Establishing of editorial assembly line of technical projects that can feed
    blog stories, how-tos, samples and Github libraries.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-tools.png
  tags: Evangelism
- building_block_id: stories
  type: Evangelism
  category: Blogging
  sorttype: ''
  sortcat: ''
  name: Stories
  description: >-
    Writing, editing and posting of stories derived from projects, with SEO and
    API area support by design.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-story.png
  tags: Evangelism
- building_block_id: syndication
  type: Evangelism
  category: Blogging
  sorttype: ''
  sortcat: ''
  name: Syndication
  description: >-
    Syndication to Tumblr, Blogger and other relevant blogging sites available
    online.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-rss-icon.png
  tags: Evangelism
- building_block_id: competition-monitoring
  type: Evangelism
  category: Landscape Analysis
  sorttype: ''
  sortcat: ''
  name: Competition Monitoring
  description: >-
    Evaluation of the regular activity of competitors, cultivating an ever
    growing list of who they are and what they are up to.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-competition.png
  tags: Evangelism
- building_block_id: industry-monitoring
  type: Evangelism
  category: Landscape Analysis
  sorttype: ''
  sortcat: ''
  name: Industry Monitoring
  description: >-
    Evaluation of relevant topics and trends of overall industry an API is
    operating within.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-industry.png
  tags: Evangelism
- building_block_id: project--developer-sites
  type: Evangelism
  category: Landscape Analysis
  sorttype: ''
  sortcat: ''
  name: Project & Developer Sites
  description: >-
    Identifying of relevant project sites like Elance and ODesk, and targeting
    developers who may be suited for engagement.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-tools.png
  tags: Evangelism
- building_block_id: keywords
  type: Evangelism
  category: Landscape Analysis
  sorttype: ''
  sortcat: ''
  name: Keywords
  description: >-
    Established a list of keywords to use when searching for topics at search
    engines, QA, forums, social bookmarking and social networks.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-keyword.png
  tags: Evangelism
- building_block_id: city-targeting
  type: Evangelism
  category: Landscape Analysis
  sorttype: ''
  sortcat: ''
  name: City Targeting
  description: >-
    Target specific markets in cities that make sense to an overall API
    evangelism strategy.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-city-skyline.png
  tags: Evangelism
- building_block_id: formal-studies
  type: Evangelism
  category: Landscape Analysis
  sorttype: ''
  sortcat: ''
  name: Formal Studies
  description: >-
    Conduct formal studies in the sector you are targeting, and potentially new
    business sectors--share internally or possibly with partners and the public
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-case-study.png
  tags: Evangelism
- building_block_id: forum-conversations
  type: Evangelism
  category: Forum Management
  sorttype: ''
  sortcat: ''
  name: Forum Conversations
  description: >-
    Responding to forum activity in a timely and engaging way, and conducting
    general janitorial work around the community.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-conversation-bubbles.png
  tags: Evangelism
- building_block_id: forum-posting
  type: Evangelism
  category: Forum Management
  sorttype: ''
  sortcat: ''
  name: Forum Posting
  description: >-
    Generating forum activity by anonymous posters or officially with common
    problems and questions faced throughout community as well as open landscape.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-forum.png
  tags: Evangelism
- building_block_id: stories
  type: Evangelism
  category: Forum Management
  sorttype: ''
  sortcat: ''
  name: Stories
  description: >-
    Deriving of stories for blog derived from forum activity, and the actual
    needs of developers to be crafted and published as part of overall editorial
    strategy.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-story.png
  tags: Evangelism
- building_block_id: email-coordination
  type: Evangelism
  category: Support
  sorttype: ''
  sortcat: ''
  name: Email Coordination
  description: >-
    Regular coordination, relaying of support issues with central support
    process.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-email.png
  tags: Evangelism
- building_block_id: email-needs-tracking
  type: Evangelism
  category: Support
  sorttype: ''
  sortcat: ''
  name: Email Needs Tracking
  description: Deriving of common support requests to drive API and API area roadmap.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-email-tracking.png
  tags: Evangelism
- building_block_id: github-repository
  type: Evangelism
  category: GitHub Management
  sorttype: ''
  sortcat: ''
  name: Github Repository
  description: >-
    Managing of code sample Gists, official code libraries and any samples,
    starter kits or other code samples generated through projects.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-github.jpg
  tags: Evangelism
- building_block_id: github-relationship
  type: Evangelism
  category: GitHub Management
  sorttype: ''
  sortcat: ''
  name: Github Relationship
  description: >-
    Managing of followers, forks, downloads and other potential relationships
    via Github.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-github.jpg
  tags: Evangelism
- building_block_id: github-organization
  type: Evangelism
  category: GitHub Management
  sorttype: ''
  sortcat: ''
  name: Github Organization
  description: >-
    Are there Github organizations in place in support of outreach? Is there a
    single one, or multiple ones for different projects, groups, etc?
  image: ''
  tags: Evangelism
- building_block_id: qa-profile-maintenance
  type: Evangelism
  category: QA Management
  sorttype: ''
  sortcat: ''
  name: QA Profile Maintenance
  description: Ensure that profile on Quora and Stack Overflow are active.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-profile.png
  tags: Evangelism
- building_block_id: stack-exchange
  type: Evangelism
  category: QA Management
  sorttype: ''
  sortcat: ''
  name: Stack Exchange
  description: >-
    Regular trolling of Stack Exchange / Stack Overflow and responding to
    relevant [Client Name] or industry related questions.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-stack-exchange.png
  tags: Evangelism
- building_block_id: quora
  type: Evangelism
  category: QA Management
  sorttype: ''
  sortcat: ''
  name: Quora
  description: >-
    Regular trolling of Quora and responding to relevant [Client Name] or
    industry related questions.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-quora.png
  tags: Evangelism
- building_block_id: qa-seeding
  type: Evangelism
  category: QA Management
  sorttype: ''
  sortcat: ''
  name: QA Seeding
  description: Seeding of questions by anonymous 3rd party profiles for relevant topics.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-seed.png
  tags: Evangelism
- building_block_id: linkedin
  type: Evangelism
  category: Social Management
  sorttype: ''
  sortcat: ''
  name: LinkedIn
  description: "Setup of new API specific LinkedIn profile page who will follow developers and other relevant users for engagement. \_Posting of all API evangelism activities."
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-linkedin.png
  tags: Evangelism
- building_block_id: google-plus
  type: Evangelism
  category: Social Management
  sorttype: ''
  sortcat: ''
  name: Google Plus
  description: >-
    Setup of new API specific Google+ company and posting of all API evangelism
    activities and management of friends.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-google-plus.png
  tags: Evangelism
- building_block_id: twitter
  type: Evangelism
  category: Social Management
  sorttype: ''
  sortcat: ''
  name: Twitter
  description: >-
    Setup of new API specific Twitter account, and the tweeting of all API
    evangelism activity, relevant industry landscape activity, discover new
    followers and engage with followers.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-twitter-icon.png
  tags: Evangelism
- building_block_id: facebook
  type: Evangelism
  category: Social Management
  sorttype: ''
  sortcat: ''
  name: Facebook
  description: >-
    Setup of new API specific Facebook company, and the posting of all API
    evangelism activities and management of friends.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-facebook.png
  tags: Evangelism
- building_block_id: hacker-news
  type: Evangelism
  category: Social Bookmarking
  sorttype: ''
  sortcat: ''
  name: Hacker News
  description: >-
    Social bookmarking of all relevant API evangelism activities as well as
    relevant industry landscape topics to Hacker News, to keep a fair and
    balanced profile, as well as network and user engagement.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-hacker-news.png
  tags: Evangelism
- building_block_id: stumbleupon
  type: Evangelism
  category: Social Bookmarking
  sorttype: ''
  sortcat: ''
  name: StumbleUpon
  description: >-
    Social bookmarking of all relevant API evangelism activities as well as
    relevant industry landscape topics to StumbleUpon, to keep a fair and
    balanced profile, as well as network and user engagement.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-stumbleupon.png
  tags: Evangelism
- building_block_id: reddit
  type: Evangelism
  category: Social Bookmarking
  sorttype: ''
  sortcat: ''
  name: Reddit
  description: >-
    Social bookmarking of all relevant API evangelism activities as well as
    relevant industry landscape topics to Reddit, to keep a fair and balanced
    profile, as well as network and user engagement.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-reddit.png
  tags: Evangelism
- building_block_id: product-hunt
  type: Evangelism
  category: Social Bookmarking
  sorttype: ''
  sortcat: ''
  name: Product Hunt
  description: >-
    Listing of new API offerings via the Product Hunt social product and service
    platform, showcasing any new resources as they are made available.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/product-hunt-icon.jpg
  tags: Evangelism
- building_block_id: roadmap
  type: Evangelism
  category: Roadmap
  sorttype: ''
  sortcat: ''
  name: Roadmap
  description: >-
    Provide regular feedback on the API roadmap based upon developer outreach
    and feedback.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-highway.png
  tags: Evangelism
- building_block_id: activity-by-group
  type: Evangelism
  category: Reporting
  sorttype: ''
  sortcat: ''
  name: Activity By Group
  description: >-
    Summary and highlights from weekly activity within the each area of API
    evangelism strategy.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-arrows-circular.png
  tags: Evangelism
- building_block_id: new-registrations
  type: Evangelism
  category: Reporting
  sorttype: ''
  sortcat: ''
  name: New Registrations
  description: Historical and weekly accounting of new developer registrations across APIs.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-register.png
  tags: Evangelism
- building_block_id: volume-of-calls
  type: Evangelism
  category: Reporting
  sorttype: ''
  sortcat: ''
  name: Volume of Calls
  description: Historical and weekly accounting of API calls per API.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-analytics-5.jpeg
  tags: Evangelism
- building_block_id: hackathons
  type: Evangelism
  category: Events
  sorttype: ''
  sortcat: ''
  name: Hackathons
  description: >-
    What hackathons are coming up in 30, 90, 120 days? Which would should be
    sponsored, attended, etc.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-hackathon.png
  tags: Evangelism
- building_block_id: meetups
  type: Evangelism
  category: Events
  sorttype: ''
  sortcat: ''
  name: Meetups
  description: >-
    What are the best Meetups in target cities? Are there different formats that
    would best meet our goals? Are there any sponsorship or speaking
    opportunities?
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-meetup.png
  tags: Evangelism
- building_block_id: conferences
  type: Evangelism
  category: Events
  sorttype: ''
  sortcat: ''
  name: Conferences
  description: >-
    What are the top conferences occurring that we can participate in or
    attend--pay attention to call for papers of relevant industry events.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-conference.png
  tags: Evangelism
- building_block_id: storytelling
  type: Evangelism
  category: Internal
  sorttype: ''
  sortcat: ''
  name: Storytelling
  description: >-
    Telling stories of an API isn’t just something you do externally, what
    stores need to be told internally to make sure an API initiative is
    successful.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-story.png
  tags: Evangelism
- building_block_id: participation
  type: Evangelism
  category: Internal
  sorttype: ''
  sortcat: ''
  name: Participation
  description: >-
    It is very healthy to include other people from across the company in API
    operations. How can we include people from other teams in API evangelism
    efforts.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-participation.png
  tags: Evangelism
- building_block_id: reporting
  type: Evangelism
  category: Internal
  sorttype: ''
  sortcat: ''
  name: Reporting
  description: >-
    Sometimes providing regular numbers and reports to key players internally
    can help keep operations running smooth. What reports can we produce?
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-reports.png
  tags: Evangelism
- building_block_id: getting-started
  type: Evangelism
  category: Developer Area
  sorttype: ''
  sortcat: ''
  name: Getting Started
  description: >-
    Evolution of getting started page when relevant based upon API and network
    changes, and relevant developer feedback.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-running.png
  tags: Evangelism
- building_block_id: documentation
  type: Evangelism
  category: Developer Area
  sorttype: ''
  sortcat: ''
  name: Documentation
  description: >-
    Enhancement and addition to API documentation based upon project development
    and active developer engagement and feedback
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-documentation.png
  tags: Evangelism
- building_block_id: code-samples
  type: Evangelism
  category: Developer Area
  sorttype: ''
  sortcat: ''
  name: Code Samples
  description: >-
    Establish new code samples that can be used within API documentation pages,
    maintain them as API evolves.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-code.png
  tags: Evangelism
- building_block_id: articles
  type: Financial News
  category: News Content
  sorttype: ''
  sortcat: ''
  name: Articles
  description: >-
    One of the basic building blocks on the World Wide Web, that news artcle. A
    basic system for storing the title, data, body, and other relevant meta data
    for an article. Articles may be more news, more blog, but they all of the
    very similiar base characteristics.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-news.png
  tags: ''
- building_block_id: breaking
  type: Financial News
  category: Real-Time
  sorttype: ''
  sortcat: ''
  name: Breaking
  description: >-
    News has always had a shelf-life and in the Internet age it is all serving
    up news as real-time as you possible can. Most news providers have some sort
    break, latest, or timely news feed as part of their API.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-clock-finish.png
  tags: ''
- building_block_id: sources
  type: Financial News
  category: Meta
  sorttype: ''
  sortcat: ''
  name: Sources
  description: >-
    Providing the ability to add, remove, and associate sources of articles,
    whether it is from specific domains, companies, or other organized source.
    Some news providers focus ony on their news which may span multiple domains,
    and publications, while others focus on a wide variety of sources for their
    news.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-source.png
  tags: ''
- building_block_id: industry
  type: Financial News
  category: Meta
  sorttype: ''
  sortcat: ''
  name: Industry
  description: >-
    Identifying a news article as being in a specific industry or busines
    sector, allowing articles to be organized by industry. This allows articles
    to be organized by specific, or across multiple business sectors.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-industry.png
  tags: ''
- building_block_id: geo
  type: Financial News
  category: Meta
  sorttype: ''
  sortcat: ''
  name: Geo
  description: >-
    The ability to associate articles to a specific geographic location either
    by address, zipcode, or by latitude and longitude. Geo provides the ability
    to search for articles by city, region, or other location.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-geo-pin.jpeg
  tags: ''
- building_block_id: categories
  type: Financial News
  category: Meta
  sorttype: ''
  sortcat: ''
  name: Categories
  description: >-
    The ability to put articles into categories. Category based systems provide
    the ability to add, update, remove and delete categories as well as
    associating with articles.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-category.png
  tags: ''
- building_block_id: target-identification
  type: Hypermedia
  category: Core Concepts
  sorttype: ''
  sortcat: ''
  name: Target Identification
  description: >-
    Links establish connections across resources, and thus need ways to identify
    the linked resources.
  image: ''
  tags: Hypermedia
- building_block_id: link-relation-type
  type: Hypermedia
  category: Core Concepts
  sorttype: ''
  sortcat: ''
  name: Link Relation Type
  description: >-
    Link relations are one way of typing links, allowing them to be annotated
    with information about why a client might want to follow a given link.
  image: ''
  tags: Hypermedia
- building_block_id: humanreadable-labels
  type: Hypermedia
  category: Core Concepts
  sorttype: ''
  sortcat: ''
  name: Human-Readable Label(s)
  description: >-
    If a link is used in human-facing applications, then it often can be helpful
    to include human-readable labels.
  image: ''
  tags: Hypermedia
- building_block_id: target-resource-hints
  type: Hypermedia
  category: Core Concepts
  sorttype: ''
  sortcat: ''
  name: Target Resource Hints
  description: >-
    A link itself should represent all the information that a client needs to
    decide whether it should or should not traverse the link, based on client
    goals.
  image: ''
  tags: Hypermedia
- building_block_id: traversal-hints
  type: Hypermedia
  category: Core Concepts
  sorttype: ''
  sortcat: ''
  name: Traversal Hints
  description: >-
    A link communicates to a client one possible hypermedia navigation, and the
    client might choose to follow a link based on client goals.
  image: ''
  tags: Hypermedia
- building_block_id: topology
  type: Hypermedia
  category: Core Concepts
  sorttype: ''
  sortcat: ''
  name: Topology
  description: >-
    While links usually are thought of to have two participating resources or
    subresources (the source and the target), link models can also support other
    topologies.
  image: ''
  tags: Hypermedia
- building_block_id: directionality
  type: Hypermedia
  category: Core Concepts
  sorttype: ''
  sortcat: ''
  name: Directionality
  description: >-
    Directionality is the question of how a link is directed when it is not
    symmetric.
  image: ''
  tags: Hypermedia
- building_block_id: resource-role
  type: Hypermedia
  category: Core Concepts
  sorttype: ''
  sortcat: ''
  name: Resource Role
  description: >-
    In simple link structures, the roles of resources are implicit in the
    definition and the direction of the link.
  image: ''
  tags: Hypermedia
- building_block_id: collection+json
  type: Hypermedia
  category: Hypermedia Formats
  sorttype: ''
  sortcat: ''
  name: Collection+JSON
  description: >-
    Collection+JSON is a JSON-based read/write hypermedia-type designed to
    support management and querying of simple collections.
  image: ''
  tags: Hypermedia
- building_block_id: extensible-markup-language-xml
  type: Hypermedia
  category: Hypermedia Formats
  sorttype: ''
  sortcat: ''
  name: Extensible Markup Language (XML)
  description: >-
    Extensible Markup Language (XML) is a simple, very flexible text format
    derived from SGML (ISO 8879)
  image: ''
  tags: Hypermedia
- building_block_id: home-documents
  type: Hypermedia
  category: Hypermedia Formats
  sorttype: ''
  sortcat: ''
  name: Home Documents
  description: A home document format for non-browser HTTP  clients.
  image: ''
  tags: Hypermedia
- building_block_id: hydra
  type: Hypermedia
  category: Hypermedia Formats
  sorttype: ''
  sortcat: ''
  name: Hydra
  description: >-
    Hydra is an effort to simplify the development of interoperable,
    hypermedia-driven Web APIs.
  image: ''
  tags: Hypermedia
- building_block_id: hypertext-application-language-hal
  type: Hypermedia
  category: Hypermedia Formats
  sorttype: ''
  sortcat: ''
  name: Hypertext Application Language (HAL)
  description: >-
    HAL is a simple format that gives a consistent and easy way to hyperlink
    between resources in your API.
  image: ''
  tags: Hypermedia
- building_block_id: json-api
  type: Hypermedia
  category: Hypermedia Formats
  sorttype: ''
  sortcat: ''
  name: JSON API
  description: >-
    A specification for building APIs in JSON, and consistently formatting their
    responses.
  image: ''
  tags: Hypermedia
- building_block_id: mason
  type: Hypermedia
  category: Hypermedia Formats
  sorttype: ''
  sortcat: ''
  name: Mason
  description: >-
    Mason is a JSON format for introducing hypermedia elements to classic JSON
    data representations.
  image: ''
  tags: Hypermedia
- building_block_id: noun-as-resource-with-hyperlinks-narwhl
  type: Hypermedia
  category: Hypermedia Formats
  sorttype: ''
  sortcat: ''
  name: Noun As Resource With HyperLinks (NARWHL)
  description: >-
    A framework intended to provide a roadmap for those needing to implement an
    API using current best practices, but is flexible enough to grow into the
    future.
  image: ''
  tags: Hypermedia
- building_block_id: siren
  type: Hypermedia
  category: Hypermedia Formats
  sorttype: ''
  sortcat: ''
  name: Siren
  description: A hypermedia specification for representing entities in APIs.
  image: ''
  tags: Hypermedia
- building_block_id: uniform-basis-for-exchanging-representations-uber
  type: Hypermedia
  category: Hypermedia Formats
  sorttype: ''
  sortcat: ''
  name: Uniform Basis for Exchanging Representations (UBER)
  description: >-
    The UBER message format is a minimal read/write hypermedia type designed to
    support simple state transfers and ad-hoc hypermedia-based transitions.
  image: ''
  tags: Hypermedia
- building_block_id: xforms
  type: Hypermedia
  category: Hypermedia Formats
  sorttype: ''
  sortcat: ''
  name: XForms
  description: >-
    XForms is an XML format used for collecting inputs from web forms, and can
    be used to describe a user interface and a set of common data manipulation
    tasks.
  image: ''
  tags: Hypermedia
- building_block_id: xml-inclusions-xinclude
  type: Hypermedia
  category: Hypermedia Formats
  sorttype: ''
  sortcat: ''
  name: XML Inclusions (XInclude)
  description: >-
    Inclusion is a format to merge a number of XML information sets into a
    single composite infoset.
  image: ''
  tags: Hypermedia
- building_block_id: xml-linking-language-xlink
  type: Hypermedia
  category: Hypermedia Formats
  sorttype: ''
  sortcat: ''
  name: XML Linking Language (XLink)
  description: >-
    Allows elements to be inserted into XML documents in order to create and
    describe links between resources.
  image: ''
  tags: Hypermedia
- building_block_id: 'xml:id'
  type: Hypermedia
  category: Hypermedia Formats
  sorttype: ''
  sortcat: ''
  name: 'xml:id'
  description: >-
    An ID attribute in XML documents and defines processing of this attribute to
    identify IDs in the absence of validation, without fetching external
    resources, and without relying on an internal subset.
  image: ''
  tags: Hypermedia
- building_block_id: workspace
  type: IDE
  category: Workbench
  sorttype: ''
  sortcat: ''
  name: Workspace
  description: >-
    Workspace definition tooling and services, allowing APIs to be an integrated
    part of the IDE workspaces, either by default or custom addition.
  image: ''
  tags: IDE
- building_block_id: project
  type: IDE
  category: Workbench
  sorttype: ''
  sortcat: ''
  name: Project
  description: >-
    Allowing developers to break up API development into specific projects,
    providing well defined, project focused organization for API integration.
  image: ''
  tags: IDE
- building_block_id: environment
  type: IDE
  category: Workbench
  sorttype: ''
  sortcat: ''
  name: Environment
  description: >-
    Is there the option for establishing separate environments within an IDE.
    Are developers able to segment and group their API integrations into
    multiple environments.
  image: ''
  tags: IDE
- building_block_id: autocomplete
  type: IDE
  category: Workbench
  sorttype: ''
  sortcat: ''
  name: Autocomplete
  description: >-
    One of the hallmark features of an IDE, is autocomplete for specific
    languages and frameworks. In this scenario autocomplete is focused on
    dictionaries created by API definitions, meant for specific integrations.
  image: ''
  tags: IDE
- building_block_id: worker
  type: IDE
  category: Backend
  sorttype: ''
  sortcat: ''
  name: Worker
  description: >-
    Are there options for creating specific works, that allow specific API
    integrations to be established, and run in isolation as specific workers or
    jobs.
  image: ''
  tags: IDE
- building_block_id: container
  type: IDE
  category: Backend
  sorttype: ''
  sortcat: ''
  name: Container
  description: >-
    Are there options to be able to containerize individual API integrations,
    isolating them into specific virtualized instances.
  image: ''
  tags: IDE
- building_block_id: github
  type: IDE
  category: Extending
  sorttype: ''
  sortcat: ''
  name: Github
  description: >-
    Using Github as a source for code, templates, definitions, and other
    essential building blocks of the API development process, in a modern IDE.
  image: ''
  tags: IDE
- building_block_id: plugins
  type: IDE
  category: Extending
  sorttype: ''
  sortcat: ''
  name: Plugins
  description: >-
    Does the IDE environment allow for plugins, and extending the environment?
    Plugins allow for the introduction of 3rd party tools and services into the
    IDE workspace.
  image: ''
  tags: IDE
- building_block_id: customize
  type: IDE
  category: Extending
  sorttype: ''
  sortcat: ''
  name: Customize
  description: >-
    Are there options for customizing the IDE, from look and feel, to the
    functionality.
  image: ''
  tags: IDE
- building_block_id: editors
  type: IDE
  category: Configuration
  sorttype: ''
  sortcat: ''
  name: Editor(s)
  description: >-
    Are there options for multiple editors, depending on media or file type, or
    possible set per project and environment levels, within the IDE.
  image: ''
  tags: IDE
- building_block_id: themes
  type: IDE
  category: Configuration
  sorttype: ''
  sortcat: ''
  name: Themes
  description: >-
    Are there theme options, allowing the environment, workspace, and projects
    to be custom defined by stored themes.
  image: ''
  tags: IDE
- building_block_id: resources
  type: IDE
  category: Awareness
  sorttype: ''
  sortcat: ''
  name: Resources
  description: >-
    What API focused resources are available within an IDE environment. How do
    developers find documentation, and other resources that support them in
    their integrations.
  image: ''
  tags: IDE
- building_block_id: analytics
  type: IDE
  category: Awareness
  sorttype: ''
  sortcat: ''
  name: Analytics
  description: >-
    What analytics are available to support API integrations, during
    development? Is the ability to track and measure API related integrations
    during design and development time.
  image: ''
  tags: IDE
- building_block_id: documentation-monitoring
  type: Integration
  category: Pain Point Monitoring
  sorttype: ''
  sortcat: ''
  name: Documentation Monitoring
  description: >-
    Keeping track of changes to an APIs documentation, alerting you to potential
    changes in valuable developer API documentation for single or many APIs
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-documentation.png
  tags: ''
- building_block_id: pricing-monitoring
  type: Integration
  category: Pain Point Monitoring
  sorttype: ''
  sortcat: ''
  name: Pricing Monitoring
  description: >-
    Notifications when an API platform's pricing changes, which might trigger
    switching services or at least staying in tune with the landscape of what is
    being offered
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-dollar-sign.jpg
  tags: ''
- building_block_id: terms-of-use-monitoring
  type: Integration
  category: Pain Point Monitoring
  sorttype: ''
  sortcat: ''
  name: Terms of Use Monitoring
  description: >-
    Updates when a company changes the terms of service for a particular
    platform and providing historical versions for comparison
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-terms-conditions.png
  tags: ''
- building_block_id: provider-/-key-management
  type: Integration
  category: Authentication
  sorttype: ''
  sortcat: ''
  name: Provider / Key Management
  description: >-
    Management of multiple API platform providers, providing a secure interface
    for managing keys and tokens for common API services
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-key.png
  tags: ''
- building_block_id: oauth-integration
  type: Integration
  category: Authentication
  sorttype: ''
  sortcat: ''
  name: oAuth Integration
  description: >-
    Provides oAuth integration for developers, to one or many API providers, and
    potentially offering oAuth listing for API providers
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/oauth-logo.png
  tags: ''
- building_block_id: api-explorer
  type: Integration
  category: Integration Touch Points
  sorttype: ''
  sortcat: ''
  name: API Explorer
  description: >-
    Allowing the interactive exploring of API providers registered with the
    platform, making calls and interacting and capturing API responses
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-touch-points.jpg
  tags: ''
- building_block_id: api-monitoring
  type: Integration
  category: Integration Touch Points
  sorttype: ''
  sortcat: ''
  name: API Monitoring
  description: >-
    Actively monitoring registered API endpoints, allowing real-time oversight
    of important API integrations endpoints that applications depend on
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-heart-monitor.png
  tags: ''
- building_block_id: api-debugging
  type: Integration
  category: Integration Touch Points
  sorttype: ''
  sortcat: ''
  name: API Debugging
  description: >-
    Identifying of API errors and assistance in debugging API integration touch
    points
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-debug.png
  tags: ''
- building_block_id: api-feature-testing
  type: Integration
  category: Integration Touch Points
  sorttype: ''
  sortcat: ''
  name: API Feature Testing
  description: >-
    The configuring and testing of specific features and configurations,
    providing precise testing tools for any potential use
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-gears.png
  tags: ''
- building_block_id: api-load-testing
  type: Integration
  category: Integration Touch Points
  sorttype: ''
  sortcat: ''
  name: API Load Testing
  description: >-
    Testing, with added benefit of making sure an API will actually perform
    under a heavy load
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-load-testing.jpeg
  tags: ''
- building_block_id: api-request-editor
  type: Integration
  category: API Request Actions
  sorttype: ''
  sortcat: ''
  name: API Request Editor
  description: Allowing the editing of individual API requests
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-editor.png
  tags: ''
- building_block_id: api-request-capture
  type: Integration
  category: API Request Actions
  sorttype: ''
  sortcat: ''
  name: API Request Capture
  description: Providing the ability to capture a individual API request
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-camera.jpg
  tags: ''
- building_block_id: api-request-retry
  type: Integration
  category: API Request Actions
  sorttype: ''
  sortcat: ''
  name: API Request Retry
  description: >-
    Enabling the ability to retry a captured API request and play back in
    current time frame
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-retry.png
  tags: ''
- building_block_id: api-request-sharing
  type: Integration
  category: API Request Actions
  sorttype: ''
  sortcat: ''
  name: API Request Sharing
  description: >-
    Opening up the ability to share API requests and their results with other
    users via email, or other means
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-sharing.jpeg
  tags: ''
- building_block_id: api-request-playback
  type: Integration
  category: API Request Actions
  sorttype: ''
  sortcat: ''
  name: API Request Playback
  description: >-
    Recording and playing back captured API requests so that you can inspect the
    results
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-play.jpg
  tags: ''
- building_block_id: api-request-scheduling
  type: Integration
  category: API Request Actions
  sorttype: ''
  sortcat: ''
  name: API Request Scheduling
  description: >-
    Allowing the scheduling of any captured API request, by the minute, hour,
    day, etc.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-scheduling.jpeg
  tags: ''
- building_block_id: api-request-automation
  type: Integration
  category: API Request Actions
  sorttype: ''
  sortcat: ''
  name: API Request Automation
  description: >-
    Introducing other types of automation for individual, captured API requests
    like looping, conditional responses, etc.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-clock-gear.png
  tags: ''
- building_block_id: api-request-commenting
  type: Integration
  category: API Request Actions
  sorttype: ''
  sortcat: ''
  name: API Request Commenting
  description: >-
    Adding notes and comments to individual API requests, allowing the
    cataloging of history, behavior and communication around API request actions
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-chat.png
  tags: ''
- building_block_id: api-request-notifications
  type: Integration
  category: API Request Actions
  sorttype: ''
  sortcat: ''
  name: API Request Notifications
  description: >-
    Providing a messaging and notification framework around individual API
    requests events
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-notification.jpg
  tags: ''
- building_block_id: command-line
  type: Integration
  category: Other Areas
  sorttype: ''
  sortcat: ''
  name: Command Line
  description: Providing a command line (CL) interface for developers to interact with APIs
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-command-line.png
  tags: ''
- building_block_id: code-libraries
  type: Integration
  category: Other Areas
  sorttype: ''
  sortcat: ''
  name: Code Libraries
  description: >-
    Development and support of code libraries that work with single or multiple
    API providers
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-code.png
  tags: ''
- building_block_id: rating
  type: Integration
  category: Other Areas
  sorttype: ''
  sortcat: ''
  name: Rating
  description: >-
    Establishment of a ranking system for APIs, based upon availability, speed,
    etc.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-stars.png
  tags: ''
- building_block_id: geolocation
  type: Integration
  category: Other Areas
  sorttype: ''
  sortcat: ''
  name: Geolocation
  description: >-
    Combining of location when testing and proxying APIs from potentially
    multiple locations
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-geo-pin.jpeg
  tags: ''
- building_block_id: localhost
  type: Integration
  category: Other Areas
  sorttype: ''
  sortcat: ''
  name: LocalHost
  description: >-
    Opening up of a local web server to a public address, allowing for webhooks
    and other interactions
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-localhost.png
  tags: ''
- building_block_id: workflow
  type: Integration
  category: Other Areas
  sorttype: ''
  sortcat: ''
  name: Workflow
  description: >-
    Allowing for the daisy chaining and connecting of individual API request
    actions into a series of workflows and jobs
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-gears.png
  tags: ''
- building_block_id: teams
  type: Integration
  category: Other Areas
  sorttype: ''
  sortcat: ''
  name: Teams
  description: >-
    Providing a collaborative, team environment where multiple users can test,
    monitor and debug APIs and application dependencies
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-team.jpg
  tags: ''
- building_block_id: analytics
  type: Integration
  category: Other Areas
  sorttype: ''
  sortcat: ''
  name: Analytics
  description: >-
    Visual analytics providing insight into individual and bulk API requests and
    application usage
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-analytics-2.png
  tags: ''
- building_block_id: reports
  type: Integration
  category: Other Areas
  sorttype: ''
  sortcat: ''
  name: Reports
  description: >-
    Common reports on how APIs are being used across multiple applications and
    user profiles
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-reports.png
  tags: ''
- building_block_id: dashboard
  type: Integration
  category: Other Areas
  sorttype: ''
  sortcat: ''
  name: Dashboard
  description: >-
    Web based dashboard with analytics, reports and tools that give developers
    quick access to the most valuable integration information
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-dashboard.png
  tags: ''
- building_block_id: realtime
  type: Integration
  category: Other Areas
  sorttype: ''
  sortcat: ''
  name: Real-Time
  description: >-
    Adding real-time elements to analytics, messaging and other aspects of API
    integration
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/real-time-2.jpg
  tags: ''
- building_block_id: import-and-export
  type: Integration
  category: Other Areas
  sorttype: ''
  sortcat: ''
  name: Import and Export
  description: >-
    Allowing for importing and exporting of configurations of captured and saved
    API requests, allowing for data portability in testing, monitoring and
    integrationPublish - Providing tools for publishing monitoring and alert
    results to a public site via widget or FTP
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-import-export.jpeg
  tags: ''
- building_block_id: gateway
  type: Integration
  category: Other Areas
  sorttype: ''
  sortcat: ''
  name: Gateway
  description: >-
    Providing a software gateway for testing, monitoring and production API
    integration scenarios
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-proxy-left.png
  tags: ''
- building_block_id: terms-of-service
  type: iPaaS
  category: Management
  sorttype: ''
  sortcat: ''
  name: Terms of Service
  description: >-
    Provide loose enough terms of service, that users can migrate their data
    from one platform to another, without violating the terms of service.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-terms-conditions.png
  tags: iPaaS
- building_block_id: data-portability
  type: iPaaS
  category: Management
  sorttype: ''
  sortcat: ''
  name: Data Portability
  description: >-
    Providing users with the ability to get data out of a system through a bulk
    download and via an API in a usable format that employs open standards.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-suitcase.png
  tags: iPaaS
- building_block_id: automation
  type: iPaaS
  category: Automation
  sorttype: ''
  sortcat: ''
  name: Automation
  description: >-
    Offer ready to go integrations with popular API automation platforms like
    Zapier and IFTTT, allowing any user to migrate data between platforms.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-clock-gear.png
  tags: iPaaS
- building_block_id: oauth
  type: iPaaS
  category: Authentication
  sorttype: ''
  sortcat: ''
  name: oAuth
  description: >-
    Provides an identify and access layer for API driven resource, one that
    allows for reciprocity to occur within a single API ecosystem, and between
    multiple ecosystems.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/oauth-logo.png
  tags: iPaaS
- building_block_id: integrations
  type: iPaaS
  category: Management
  sorttype: ''
  sortcat: ''
  name: Integrations
  description: >-
    Integrations showcase other 3rd party platforms that an API provider is
    already connected to, providing ready to go platform integration solutions
    that any developer can take advantage of.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-gears.png
  tags: iPaaS
- building_block_id: apache
  type: Licensing
  category: Server Code
  sorttype: ''
  sortcat: ''
  name: Apache
  description: >-
    The Apache License is a free software license written by the Apache Software
    Foundation (ASF). The Apache License requires preservation of the copyright
    notice and disclaimer. Like other free software licenses, the license allows
    the user of the software the freedom to use the software for any purpose, to
    distribute it, to modify it, and to distribute modified versions of the
    software, under the terms of the license, without concern for royalties. -
    http://www.apache.org/licenses/LICENSE-2.0
  image: ''
  tags: Licensing
- building_block_id: gpl
  type: Licensing
  category: Server Code
  sorttype: ''
  sortcat: ''
  name: GPL
  description: >-
    The GNU General Public License (GNU GPL or GPL) is the most widely used[6]
    free software license, which guarantees end users (individuals,
    organizations, companies) the freedoms to run, study, share (copy), and
    modify the software. Software that allows these rights is called free
    software and, if the software is copylefted, requires those rights to be
    retained. - http://www.gnu.org/licenses/gpl-3.0.en.html
  image: ''
  tags: Licensing
- building_block_id: mit
  type: Licensing
  category: Server Code
  sorttype: ''
  sortcat: ''
  name: MIT
  description: >-
    The MIT License is a free software license originating at the Massachusetts
    Institute of Technology (MIT). It is a permissive free software license,
    meaning that it permits reuse within proprietary software provided all
    copies of the licensed software include a copy of the MIT License terms and
    the copyright notice. - https://opensource.org/licenses/MIT
  image: ''
  tags: Licensing
- building_block_id: public-domain-dedication-and-license-pddl
  type: Licensing
  category: Data
  sorttype: ''
  sortcat: ''
  name: Public Domain Dedication and License (PDDL)
  description: The PDDL places the data(base) in the public domain (waiving all rights).
  image: ''
  tags: Licensing
- building_block_id: attribution-license-odcby
  type: Licensing
  category: Data
  sorttype: ''
  sortcat: ''
  name: Attribution License (ODC-By)
  description: >-
    You are free to share, create, and adapt, as long as you attribute the data
    source.
  image: ''
  tags: Licensing
- building_block_id: open-database-license-odcodbl
  type: Licensing
  category: Data
  sorttype: ''
  sortcat: ''
  name: Open Database License (ODC-ODbL)
  description: >-
    You are free to share, create, and adapt, as long as you attribute the data
    source, share-aloe, and keep open.
  image: ''
  tags: Licensing
- building_block_id: attribution-cc-by
  type: Licensing
  category: Content
  sorttype: ''
  sortcat: ''
  name: Attribution (CC BY)
  description: >-
    This license lets others distribute, remix, tweak, and build upon your work,
    even commercially, as long as they credit you for the original creation.
    This is the most accommodating of licenses offered. -
    http://creativecommons.org/licenses/by/4.0/
  image: ''
  tags: Licensing
- building_block_id: attributionsharealike-cc-bysa
  type: Licensing
  category: Content
  sorttype: ''
  sortcat: ''
  name: Attribution-ShareAlike (CC BY-SA)
  description: >-
    This license lets others remix, tweak, and build upon your work even for
    commercial purposes, as long as they credit you and license their new
    creations under the identical terms. This license is often compared to
    copyleft free and open source software licenses. All new works based on
    yours will carry the same license, so any derivatives will also allow
    commercial use. - http://creativecommons.org/licenses/by-sa/4.0
  image: ''
  tags: Licensing
- building_block_id: public-domain-cc0
  type: Licensing
  category: Content
  sorttype: ''
  sortcat: ''
  name: Public Domain (CC0)
  description: >-
    Use this universal tool if you are a holder of copyright or database rights,
    and you wish to waive all your interests in your work worldwide. -
    https://creativecommons.org/about/cc0
  image: ''
  tags: Licensing
- building_block_id: attribution--cc-by
  type: Licensing
  category: API
  sorttype: ''
  sortcat: ''
  name: Attribution  (CC BY)
  description: >-
    This license lets others distribute, remix, tweak, and build upon your work,
    even commercially, as long as they credit you for the original creation.
    This is the most accommodating of licenses offered. -
    http://creativecommons.org/licenses/by/4.0/
  image: ''
  tags: Licensing
- building_block_id: attributionsharealike-cc-bysa
  type: Licensing
  category: API
  sorttype: ''
  sortcat: ''
  name: Attribution-ShareAlike (CC BY-SA)
  description: >-
    This license lets others remix, tweak, and build upon your work even for
    commercial purposes, as long as they credit you and license their new
    creations under the identical terms. This license is often compared to
    copyleft free and open source software licenses. All new works based on
    yours will carry the same license, so any derivatives will also allow
    commercial use.
  image: ''
  tags: Licensing
- building_block_id: public-domain-cc0
  type: Licensing
  category: API
  sorttype: ''
  sortcat: ''
  name: Public Domain (CC0)
  description: >-
    Use this universal tool if you are a holder of copyright or database rights,
    and you wish to waive all your interests in your work worldwide. -
    https://creativecommons.org/about/cc0
  image: ''
  tags: Licensing
- building_block_id: apache
  type: Licensing
  category: Client Code
  sorttype: ''
  sortcat: ''
  name: Apache
  description: >-
    The Apache License is a free software license written by the Apache Software
    Foundation (ASF). The Apache License requires preservation of the copyright
    notice and disclaimer. Like other free software licenses, the license allows
    the user of the software the freedom to use the software for any purpose, to
    distribute it, to modify it, and to distribute modified versions of the
    software, under the terms of the license, without concern for royalties. -
    http://www.apache.org/licenses/LICENSE-2.0
  image: ''
  tags: Licensing
- building_block_id: gpl
  type: Licensing
  category: Client Code
  sorttype: ''
  sortcat: ''
  name: GPL
  description: >-
    The GNU General Public License (GNU GPL or GPL) is the most widely used[6]
    free software license, which guarantees end users (individuals,
    organizations, companies) the freedoms to run, study, share (copy), and
    modify the software. Software that allows these rights is called free
    software and, if the software is copylefted, requires those rights to be
    retained. - http://www.gnu.org/licenses/gpl-3.0.en.html
  image: ''
  tags: Licensing
- building_block_id: mit
  type: Licensing
  category: Client Code
  sorttype: ''
  sortcat: ''
  name: MIT
  description: >-
    The MIT License is a free software license originating at the Massachusetts
    Institute of Technology (MIT). It is a permissive free software license,
    meaning that it permits reuse within proprietary software provided all
    copies of the licensed software include a copy of the MIT License terms and
    the copyright notice. - https://opensource.org/licenses/MIT
  image: ''
  tags: Licensing
- building_block_id: 'datensparsamkeit:-data-minimization'
  type: Logging
  category: Ethics
  sorttype: ''
  sortcat: ''
  name: 'Datensparsamkeit: Data Minimization'
  description: >-
    It's an attitude to how we capture and store data, saying that we should
    only handle data that we really need.
  image: ''
  tags: Ethics
- building_block_id: login
  type: Management
  category: Onboarding
  sorttype: ''
  sortcat: ''
  name: Login
  description: >-
    A single location, with permalink which API consumers login to their
    accounts.
  image: ''
  tags: ''
- building_block_id: getting-started
  type: Management
  category: Onboarding
  sorttype: ''
  sortcat: ''
  name: Getting Started
  description: >-
    Laying out simple, clear steps for developers on how to register,
    authenticate, access documentation and code samples, and get support and any
    other details that are essential to integration.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-running.png
  tags: 'Management,API Management Onboarding'
- building_block_id: selfservice-registration
  type: Management
  category: Onboarding
  sorttype: ''
  sortcat: ''
  name: Self-Service Registration
  description: >-
    Providing a self-service registration for a developer portal, allowing
    developers to signup and get access to an API, 24 hours a day, 7 days a
    week.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-hand-wrench.jpg
  tags: 'Management,API Management Onboarding'
- building_block_id: best-practices
  type: Management
  category: Onboarding
  sorttype: ''
  sortcat: ''
  name: Best Practices
  description: >-
    Publishing of a plain english introduction to the best practices around
    integrating with an API, providing introductory lesson for developers of how
    to properly integrate with an API.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-yingyang.jpg
  tags: Management
- building_block_id: faq
  type: Management
  category: Onboarding
  sorttype: ''
  sortcat: ''
  name: FAQ
  description: >-
    Providing developers a list of the common questions asked of an API
    platform, with simple answers to each question, allowing them to understand
    the common problems faced during onboarding.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-question-mark.png
  tags: 'Management,API Management Onboarding'
- building_block_id: service-accord
  type: Management
  category: Onboarding
  sorttype: ''
  sortcat: ''
  name: Service Accord
  description: >-
    Service level agreements (SLA) provide a legal framework managing the
    relationships between API consumers, and service accords provide a plain
    english explanation of what they expect from a provider, without the
    legaleze, in a format they can understand without calling the lawyers.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-handshake.jpg
  tags: 'Management,API Management Onboarding'
- building_block_id: sign-up-email
  type: Management
  category: Onboarding
  sorttype: ''
  sortcat: ''
  name: Sign Up Email
  description: >-
    Providing a simple, informative, personal email immediately upon signup,
    letting developers know what they need to onboard.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-email-open.png
  tags: 'Management,API Management Onboarding'
- building_block_id: google-authentication
  type: Management
  category: Onboarding
  sorttype: ''
  sortcat: ''
  name: Google Authentication
  description: >-
    Allowing developers to create their API account using their Google account,
    and allowing the to login in the future using their Google oAuth.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-google.png
  tags: 'Management,API Management Onboarding'
- building_block_id: github-authentication
  type: Management
  category: Onboarding
  sorttype: ''
  sortcat: ''
  name: Github Authentication
  description: >-
    Allowing developers to create their API account using their Github account,
    and allowing the to login in the future using their Github oAuth.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-github.jpg
  tags: 'Management,API Management Onboarding'
- building_block_id: facebook-authentication
  type: Management
  category: Onboarding
  sorttype: ''
  sortcat: ''
  name: Facebook Authentication
  description: >-
    Allowing developers to create their API account using their Facebook
    account, and allowing the to login in the future using their Facebook
    credentials.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-facebook.png
  tags: 'Management,API Management Onboarding'
- building_block_id: flexible-messaging-area
  type: Management
  category: Onboarding
  sorttype: ''
  sortcat: ''
  name: Flexible Messaging Area
  description: >-
    Provide a simple, flexible messaging area on the top or bottom of login or
    signup, providing consumers with simple updates about platform operations.
  image: ''
  tags: Management
- building_block_id: search
  type: Management
  category: Onboarding
  sorttype: ''
  sortcat: ''
  name: Search
  description: Provide a keyword search option for discovery across API operations.
  image: ''
  tags: Management
- building_block_id: developer-dashboard
  type: Management
  category: Developer Account
  sorttype: ''
  sortcat: ''
  name: Developer Dashboard
  description: >-
    Provide developers a single dashboard for getting at all their tools,
    metrics and information they need to successfully manage their usage.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-dashboard.png
  tags: Management
- building_block_id: account-settings
  type: Management
  category: Developer Account
  sorttype: ''
  sortcat: ''
  name: Account Settings
  description: >-
    Provide developers access to their basic account detail and settings, giving
    them quick access to their account configuration and allow for easy updates.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-account-settings.png
  tags: Management
- building_block_id: reset-password
  type: Management
  category: Developer Account
  sorttype: ''
  sortcat: ''
  name: Reset Password
  description: >-
    Provide the necessary tools for developers to gain access to their account
    if they lose their password.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-reset.jpeg
  tags: Management
- building_block_id: application-manager
  type: Management
  category: Developer Account
  sorttype: ''
  sortcat: ''
  name: Application Manager
  description: >-
    Providing an interface that allows developers to manage one or many
    applications that will be integrating with an API.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-app-icon.jpg
  tags: Management
- building_block_id: usage-logs--analytics
  type: Management
  category: Developer Account
  sorttype: ''
  sortcat: ''
  name: Usage Logs & Analytics
  description: >-
    Allowing developers to be able to see where they stand with usage, logging
    and other aspects of operations, by providing them reports and analytics of
    their history.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-analytics-2.png
  tags: Management
- building_block_id: billing-history
  type: Management
  category: Developer Account
  sorttype: ''
  sortcat: ''
  name: Billing History
  description: >-
    Provide clear and easy access to what a developer has been billed, allowing
    them to access and download their billing history around API usage.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-history.jpeg
  tags: Management
- building_block_id: message-center
  type: Management
  category: Developer Account
  sorttype: ''
  sortcat: ''
  name: Message Center
  description: >-
    Providing developers with a messaging system within their developer
    accounts, and communicate with API providers, and receive system updates.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-message-send.png
  tags: Management
- building_block_id: github-authentication
  type: Management
  category: Developer Account
  sorttype: ''
  sortcat: ''
  name: Github Authentication
  description: >-
    Allow developers to create and login to their API developer account using
    their own Github account credentials.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-github.jpg
  tags: Management
- building_block_id: delete-account
  type: Management
  category: Developer Account
  sorttype: ''
  sortcat: ''
  name: Delete Account
  description: >-
    Giving developers the ability to delete their account from within their
    account portal.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/3-factor-x.jpeg
  tags: Management
- building_block_id: service-tier-management
  type: Management
  category: Developer Account
  sorttype: ''
  sortcat: ''
  name: Service Tier Management
  description: >-
    Allow developers to change the service tier they operate with in via their
    developer dashboard, without having to request changes from platform
    support.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-tiers.jpg
  tags: Management
- building_block_id: sandbox
  type: Management
  category: Environment
  sorttype: ''
  sortcat: ''
  name: Sandbox
  description: >-
    Provide developers a sandbox environment to develop and test their code,
    reducing headaches for consumers when developing their applications.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-sandbox.jpeg
  tags: Management
- building_block_id: production
  type: Management
  category: Environment
  sorttype: ''
  sortcat: ''
  name: Production
  description: >-
    Offer a production environment in addition to a sandbox, allowing developers
    to push an application into production mode when it is ready.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-production.png
  tags: Management
- building_block_id: simulator
  type: Management
  category: Environment
  sorttype: ''
  sortcat: ''
  name: Simulator
  description: >-
    Providing an environment where developers can find existing profiles,
    templates or other collections of data, as well as the ​sequence for
    simulating a particular experience via an API platform.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-data-template.png
  tags: Management
- building_block_id: templates
  type: Management
  category: Environment
  sorttype: ''
  sortcat: ''
  name: Templates
  description: "Offering predefined templates of\_operation, when a new environment is setup, either sandbox, production, or simulator, it can be pre-populated with data, and other configuration."
  image: ''
  tags: Management
- building_block_id: documentation-language
  type: Management
  category: Internationalization
  sorttype: ''
  sortcat: ''
  name: Documentation Language
  description: >-
    Use a&nbsp;query string lang= parameter to set the language the API
    documentation should be speaking.
  image: ''
  tags: Management
- building_block_id: internationalization
  type: Management
  category: Internationalization
  sorttype: ''
  sortcat: ''
  name: Internationalization
  description: >-
    Provide resources that help developers localize, and internationalize their
    applications to meet the needs of specific global markets.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-global.png
  tags: 'Management,API Management Resources'
- building_block_id: team-showcase
  type: Management
  category: Corporate
  sorttype: ''
  sortcat: ''
  name: Team Showcase
  description: >-
    Provide a simple team page, showcasing the team behind the API, including
    photos, personal stories or bios, and any relevant social media accounts
    like Twitter and Github.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-teams.jpeg
  tags: Management
- building_block_id: mission
  type: Management
  category: Corporate
  sorttype: ''
  sortcat: ''
  name: Mission
  description: >-
    What is the mission of your company, organization, or government agency
    behind the platform.
  image: ''
  tags: Management
- building_block_id: user-management
  type: Management
  category: Management API
  sorttype: ''
  sortcat: ''
  name: User Management
  description: >-
    A user management API, enabling the ability to create, read, update, and
    delete information associated with a specific user.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-users-male-female.png
  tags: Management
- building_block_id: account-management
  type: Management
  category: Management API
  sorttype: ''
  sortcat: ''
  name: Account Management
  description: >-
    An account management API, enabling users to create, read, update, and
    delete information associated with their account.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-account-settings.png
  tags: Management
- building_block_id: application-management
  type: Management
  category: Management API
  sorttype: ''
  sortcat: ''
  name: Application Management
  description: >-
    An application management API, allowing users to manage their registered
    applications, and get information about their consumption.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-app.png
  tags: Management
- building_block_id: service-management
  type: Management
  category: Management API
  sorttype: ''
  sortcat: ''
  name: Service Management
  description: >-
    A service management API, providing users to see what services are
    available, and their access and usage levels for any given service.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-service-request.png
  tags: Management
- building_block_id: labs
  type: Management
  category: Research & Development
  sorttype: ''
  sortcat: ''
  name: Labs
  description: >-
    Offering a labs environment, that showcases ideas that are being developed
    internally and by partners, possibly even providing opportunities for public
    consumers.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-app-development.png
  tags: Management
- building_block_id: ideas
  type: Management
  category: Research & Development
  sorttype: ''
  sortcat: ''
  name: Ideas
  description: >-
    Like showcase existing applications, an idea showcase is about providing a
    place where new and existing ideas can be shared, and potentially built upon
    by the community.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-light-bulb-bright.png
  tags: Management
- building_block_id: opportunities
  type: Management
  category: Research & Development
  sorttype: ''
  sortcat: ''
  name: Opportunities
  description: >-
    Providing an area where aPI consumers can find opportunities available on
    the platform from potential projects, to posting job opportunities that are
    currently available.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-exlamation-point.gif
  tags: Management
- building_block_id: smoke
  type: Mistakes
  category: Bullshit
  sorttype: ''
  sortcat: ''
  name: Smoke
  description: >-
    Smoke is used to hide the truth and make you confused about what is actually
    happening with an API. With a good amount of smoke, any provider can hide
    their true motivations, forcing developers to never quite understand what is
    going on until it is too late. One of the essential components of a modern
    API platform is a smoke free environment.&nbsp;
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-smoke.png
  tags: ''
- building_block_id: mirrors
  type: Mistakes
  category: Bullshit
  sorttype: ''
  sortcat: ''
  name: Mirrors
  description: >-
    When you need to fool your API consumers, you need to use mirrors to reflect
    as much as you can back at them. If you don't have anythign substantial to
    reflect back, just reflect some light back into their eyes and blind them.
    Mirrors are great because many users are vain, and will just like looking at
    themselves.&nbsp;
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-mirrors.png
  tags: ''
- building_block_id: send-multimedia-message
  type: MMS
  category: Message
  sorttype: ''
  sortcat: ''
  name: Send Multimedia Message
  description: >-
    Providing servicds for sending of multimedia messages via API, for delivery
    of images, video, and audio.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-mms-send.png
  tags: ''
- building_block_id: receive-multimedia-message
  type: MMS
  category: Message
  sorttype: ''
  sortcat: ''
  name: Receive Multimedia Message
  description: >-
    Providing servicds for receiving of multimedia messages via API, for
    delivery of images, video, and audio.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-mms-receive.png
  tags: ''
- building_block_id: media-types
  type: MMS
  category: Media
  sorttype: ''
  sortcat: ''
  name: Media Types
  description: >-
    Support for multiple media types across the image, video, and audio
    spectrum.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-media.png
  tags: ''
- building_block_id: transcoding
  type: MMS
  category: Media
  sorttype: ''
  sortcat: ''
  name: Transcoding
  description: >-
    Providing services for transcoding of meta files into specific sizes, frame
    rates, or conversions based upon device or network delivery.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-media-encoding.png
  tags: ''
- building_block_id: distribution
  type: MMS
  category: Media
  sorttype: ''
  sortcat: ''
  name: Distribution
  description: >-
    Providing a content delivery network, allowing for the distribution of media
    used in messages to desired network and geographic locations.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-distribution.png
  tags: ''
- building_block_id: lists-/-groups
  type: MMS
  category: Organization
  sorttype: ''
  sortcat: ''
  name: Lists / Groups
  description: >-
    Provide the ability to manage lists of users, and send multimedia messages
    to these lists or groups.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-list.png
  tags: ''
- building_block_id: keywords-/-tags
  type: MMS
  category: Organization
  sorttype: ''
  sortcat: ''
  name: Keywords / Tags
  description: >-
    Provide the ability to manage keywords or tags and associate with MMS
    messages or the users who message are sent to or received from.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-keyword.png
  tags: ''
- building_block_id: optimization
  type: MMS
  category: Delivery
  sorttype: ''
  sortcat: ''
  name: Optimization
  description: >-
    Providing MMS delivery optimization services, allowing developers to take
    the best routes, and build in other optimization features into their
    multimedia message delivery.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-delivery-optimization.png
  tags: ''
- building_block_id: queues
  type: MMS
  category: Delivery
  sorttype: ''
  sortcat: ''
  name: Queues
  description: >-
    Allowing multimedia media messages to be put into delivery queues, sending
    messages at particular times, or when optimal network connectivity is
    available.&nbsp;
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-stacks.png
  tags: ''
- building_block_id: short-codes
  type: MMS
  category: Delivery
  sorttype: ''
  sortcat: ''
  name: Short Codes
  description: >-
    Providing short codes for the delivery of messages, allowing multimedia
    messages messages to be delivered via a single number codes.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-telephone-keypad.png
  tags: ''
- building_block_id: entry
  type: Monetization
  category: Acquisition
  sorttype: ''
  sortcat: ''
  name: Entry
  description: 'Costs, resources, and investment involved with entry of data into a system.'
  image: ''
  tags: Monetization
- building_block_id: validation
  type: Monetization
  category: Acquisition
  sorttype: ''
  sortcat: ''
  name: Validation
  description: >-
    All acquisition of data will require some sort of validation to ensure the
    quality of information.
  image: ''
  tags: Monetization
- building_block_id: etl
  type: Monetization
  category: Acquisition
  sorttype: ''
  sortcat: ''
  name: ETL
  description: 'The extracting, transferring and loading of data into the system.'
  image: ''
  tags: Monetization
- building_block_id: discover
  type: Monetization
  category: Acquisition
  sorttype: ''
  sortcat: ''
  name: Discover
  description: >-
    What did I spent to find this. I may have had to buy someone dinner or beer
    to find, as well as time on the Internet searching, and connecting the dots.
  image: ''
  tags: Monetization
- building_block_id: negotiate
  type: Monetization
  category: Acquisition
  sorttype: ''
  sortcat: ''
  name: Negotiate
  description: >-
    What time to I have in actually getting access to something. Most of the
    time its on the Internet, and other times it requires travel, and meeting
    with folks.
  image: ''
  tags: Monetization
- building_block_id: licensing
  type: Monetization
  category: Acquisition
  sorttype: ''
  sortcat: ''
  name: Licensing
  description: >-
    There is a chance I would license a database from a company or institution,
    so I want to have this option in here. Even if this is open source, I want
    the license referenced as part of acquisition.
  image: ''
  tags: Monetization
- building_block_id: purchase
  type: Monetization
  category: Acquisition
  sorttype: ''
  sortcat: ''
  name: Purchase
  description: >-
    Also the chance I may buy a database from someone outright, or pay them to
    put the database together, resulting in one-time fee, which I'm going to
    call purchase.
  image: ''
  tags: Monetization
- building_block_id: investment
  type: Monetization
  category: Development
  sorttype: ''
  sortcat: ''
  name: Investment
  description: >-
    Who put up the money to support the development of this API resource? Was it
    internal, or did we have to take external investment.
  image: ''
  tags: Monetization
- building_block_id: grant
  type: Monetization
  category: Development
  sorttype: ''
  sortcat: ''
  name: Grant
  description: >-
    Was the development of this API rolled up in a grant, or specifically a
    grant for its development. Covering costs involved.
  image: ''
  tags: Monetization
- building_block_id: normalization
  type: Monetization
  category: Development
  sorttype: ''
  sortcat: ''
  name: Normalization
  description: >-
    What does it take me to cleanup, and normalize a dataset, or across content.
    This is usually he busy janitorial work necessary.
  image: ''
  tags: Monetization
- building_block_id: design
  type: Monetization
  category: Development
  sorttype: ''
  sortcat: ''
  name: Design
  description: >-
    What does it take me to generate a Swagger and API Blueprint, something that
    isn't just auto-generated, but also has the required hand polish it will
    require.
  image: ''
  tags: Monetization
- building_block_id: database
  type: Monetization
  category: Development
  sorttype: ''
  sortcat: ''
  name: Database
  description: >-
    How much work am I putting into setting up the database. A lot of this I can
    automate, but there is always a setup cost involved.
  image: ''
  tags: Monetization
- building_block_id: server
  type: Monetization
  category: Development
  sorttype: ''
  sortcat: ''
  name: Server
  description: >-
    Defining the amount of work I put into setting up, and configuring the
    server to run a new API, including where it goes in my overall operations
    plan.
  image: ''
  tags: Monetization
- building_block_id: coding
  type: Monetization
  category: Development
  sorttype: ''
  sortcat: ''
  name: Coding
  description: >-
    How much work to I put into actually coding an API. I use the Slim PHP
    framework, and using automation scripts I can generate 75% of it usually,
    but there is always finish work.
  image: ''
  tags: Monetization
- building_block_id: dns
  type: Monetization
  category: Development
  sorttype: ''
  sortcat: ''
  name: DNS
  description: >-
    What was the overhead in me defining, and configuring the DNS for any API,
    setting up endpoint domain, as well as potentially a portal to house
    operations.
  image: ''
  tags: Monetization
- building_block_id: definition
  type: Monetization
  category: Operation
  sorttype: ''
  sortcat: ''
  name: Definition
  description: >-
    How much resources am I applying to creating and maintaining APIs.json,
    Swagger, and API Blueprint definitions for my APIs.
  image: ''
  tags: Monetization
- building_block_id: compute
  type: Monetization
  category: Operation
  sorttype: ''
  sortcat: ''
  name: Compute
  description: >-
    What percentage of my AWS compute is dedicated to an API. Flat percentage of
    the server its one until usage history exists.
  image: ''
  tags: Monetization
- building_block_id: storage
  type: Monetization
  category: Operation
  sorttype: ''
  sortcat: ''
  name: Storage
  description: >-
    How much on disk storage am I using to operate an API? Could fluctuate from
    month to month, and exponentially increase for some.
  image: ''
  tags: Monetization
- building_block_id: bandwidth
  type: Monetization
  category: Operation
  sorttype: ''
  sortcat: ''
  name: Bandwidth
  description: How much bandwidth in / out is an API using to get the job done.
  image: ''
  tags: Monetization
- building_block_id: management
  type: Monetization
  category: Operation
  sorttype: ''
  sortcat: ''
  name: Management
  description: >-
    What percentage of API management resources is dedicated to the API. A flat
    percentage of API management overhead until usage history exists.
  image: ''
  tags: Monetization
- building_block_id: code
  type: Monetization
  category: Operation
  sorttype: ''
  sortcat: ''
  name: Code
  description: >-
    What does it cost me to maintain my code samples, libraries, and SDKs for
    each individual API, or possibly across multiple APIs and endpoints.
  image: ''
  tags: Monetization
- building_block_id: evangelism
  type: Monetization
  category: Operation
  sorttype: ''
  sortcat: ''
  name: Evangelism
  description: >-
    How much energy do I put into evangelizing any single API? Did I write a
    blog post, or am I'm buying Twitter or Google Ads? How is the word getting
    out?
  image: ''
  tags: Monetization
- building_block_id: monitoring
  type: Monetization
  category: Operation
  sorttype: ''
  sortcat: ''
  name: Monitoring
  description: >-
    What percentage of the API monitoring, testing, and performance service
    budget is dedicated to this API. How large is surface area for monitoring?
  image: ''
  tags: Monetization
- building_block_id: security
  type: Monetization
  category: Operation
  sorttype: ''
  sortcat: ''
  name: Security
  description: >-
    What does it cost for me to secure a single API, as part of the larger
    overall operations? Does internal resource spend time, or is this a 3rd
    party service.
  image: ''
  tags: Monetization
- building_block_id: virtualization
  type: Monetization
  category: Operation
  sorttype: ''
  sortcat: ''
  name: Virtualization
  description: >-
    What am I spending on virtualization for an API, as part of QA process, for
    retail sandbox and simulation environments, or for specific partner needs.
  image: ''
  tags: Monetization
- building_block_id: api-value
  type: Monetization
  category: Direct Value
  sorttype: ''
  sortcat: ''
  name: API Value
  description: >-
    Each API will have its own credit rate set, where some will be one credit,
    while others may be 100 credits to make a single call, it can be defined by
    API or a specific endpoint.
  image: ''
  tags: Monetization
- building_block_id: limits
  type: Monetization
  category: Direct Value
  sorttype: ''
  sortcat: ''
  name: Limits
  description: >-
    The daily allowed credit limit will be determined by the access level tier
    is registered at, starting with daily free public access to retail, trusted,
    and potentially custom tiers.
  image: ''
  tags: Monetization
- building_block_id: usage
  type: Monetization
  category: Direct Value
  sorttype: ''
  sortcat: ''
  name: Usage
  description: >-
    How many credits does any one user use during a day, week, or month, across
    all APIs. When each API is used, it will apply the defined credit value for
    the single API call.
  image: ''
  tags: Monetization
- building_block_id: incentive
  type: Monetization
  category: Direct Value
  sorttype: ''
  sortcat: ''
  name: Incentive
  description: >-
    How can the platform give credits as an incentive for use, or even pay
    credits for writing to certain APIs, and enriching the system, or driving
    traffic.
  image: ''
  tags: Monetization
- building_block_id: purchase
  type: Monetization
  category: Direct Value
  sorttype: ''
  sortcat: ''
  name: Purchase
  description: >-
    What does it cost to buy a credit, something that could fluctuate from day
    to day, week to week, or month to month.
  image: ''
  tags: Monetization
- building_block_id: buyout
  type: Monetization
  category: Direct Value
  sorttype: ''
  sortcat: ''
  name: Buyout
  description: >-
    Allow API consumers to get paid for the credits on their account, preferably
    all users are encouraged to spend credits, but buyout is an option.
  image: ''
  tags: Monetization
- building_block_id: discounts
  type: Monetization
  category: Direct Value
  sorttype: ''
  sortcat: ''
  name: Discounts
  description: >-
    Can we give discounts when you buy credits through specific channels,
    promotions, or other type of planned deal.
  image: ''
  tags: Monetization
- building_block_id: volume
  type: Monetization
  category: Direct Value
  sorttype: ''
  sortcat: ''
  name: Volume
  description: >-
    Are there volume discounts for buying of credits, allowing consumers to
    purchase credits in bulk, when they need to and apply when they desire.
  image: ''
  tags: Monetization
- building_block_id: applying
  type: Monetization
  category: Direct Value
  sorttype: ''
  sortcat: ''
  name: Applying
  description: >-
    Can you wait to apply credits you have accumulated? Given the option with
    each billing cycle to apply, or you may want to wait and use at future date.
  image: ''
  tags: Monetization
- building_block_id: value
  type: Monetization
  category: Direct Value
  sorttype: ''
  sortcat: ''
  name: Value
  description: >-
    What is the value of an API resource? Often you will be just making this up,
    but at the least you should be able to articulate in some way.
  image: ''
  tags: 'Management,Monetization'
- building_block_id: revenue
  type: Monetization
  category: Direct Value
  sorttype: ''
  sortcat: ''
  name: Revenue
  description: >-
    What revenue opportunities for the ecosystem around an API and its
    operation, sharing in the money made from platform operations.
  image: ''
  tags: 'Management,Monetization'
- building_block_id: timeframes
  type: Monetization
  category: Direct Value
  sorttype: ''
  sortcat: ''
  name: Timeframes
  description: >-
    What timeframes can be leverage to generate direct value? Timeframes should
    be used in conjunction with plans to dial in the value generated.
  image: ''
  tags: Monetization
- building_block_id: metrics
  type: Monetization
  category: Direct Value
  sorttype: ''
  sortcat: ''
  name: Metrics
  description: >-
    What are the metrics, no matter what you choose to track by, what is the
    metric and its value? The most common metrics is the hit, but could be any
    other quantifiable metric you can consider.
  image: ''
  tags: Monetization
- building_block_id: geo
  type: Monetization
  category: Direct Value
  sorttype: ''
  sortcat: ''
  name: Geo
  description: >-
    How can geographic location be leverage as part of determining value
    generation? Different data centers, or networks, or possibly as part of
    support. How can geographic constraints be applied to maximize value
    generated.
  image: ''
  tags: Monetization
- building_block_id: resources
  type: Monetization
  category: Direct Value
  sorttype: ''
  sortcat: ''
  name: Resources
  description: >-
    The best part of API design, is you can dial in your value generate to the
    smallest unit of compute, the single API resource. How are APIs value
    generation considered at the individual level like this?
  image: ''
  tags: Monetization
- building_block_id: extensions
  type: Monetization
  category: Direct Value
  sorttype: ''
  sortcat: ''
  name: Extensions
  description: >-
    Are there extensions available that will impact the developers, or end-users
    experience. Can extensions be used for a default experience, or added on to
    incrementally increase value generated.
  image: ''
  tags: Monetization
- building_block_id: usage
  type: Monetization
  category: Direct Value
  sorttype: ''
  sortcat: ''
  name: Usage
  description: >-
    How is usage wielded as part of value generation? Is value about the
    increased usage of a resource, or possible value generated by a minimum
    usage of a resource? Usage is an important dimension of determining how
    value is generated as part of API operations.
  image: ''
  tags: Monetization
- building_block_id: fees
  type: Monetization
  category: Direct Value
  sorttype: ''
  sortcat: ''
  name: Fees
  description: >-
    How are fees leveraged as part of value generation, where like usage, fees
    driving that value generation, or possibly the lack of fees is where the
    value lies.  Where, within the ecosystem do discussing fees make sense?
  image: ''
  tags: Monetization
- building_block_id: donations
  type: Monetization
  category: Direct Value
  sorttype: ''
  sortcat: ''
  name: Donations
  description: >-
    Does API operations depend on donations, either one time, or possibly
    soliciting ongoing donations to make sure an API operations. An actual API
    may be present to allow for donations to occur in-line.
  image: ''
  tags: Monetization
- building_block_id: grants
  type: Monetization
  category: Direct Value
  sorttype: ''
  sortcat: ''
  name: Grants
  description: >-
    Is the value generated around API operations because of a single, or
    possibly multiple grants? How are grant programs leveraged to develop the
    API itself, or possibly drive the evolution of resources made available via
    APIs.
  image: ''
  tags: Monetization
- building_block_id: percentages
  type: Monetization
  category: Direct Value
  sorttype: ''
  sortcat: ''
  name: Percentages
  description: >-
    Is value generation measured in percentages? Such as revenue share, or
    percentage of any resource usage for free. There are a number of ways to
    think about percentages, and how they apply to defining value generation.
  image: ''
  tags: Monetization
- building_block_id: users
  type: Monetization
  category: Direct Value
  sorttype: ''
  sortcat: ''
  name: Users
  description: >-
    How is value generated on a per user level? More users is valuable, or
    possible fewer users. Teams, groups, and many other ways to determine how
    users impact positively or negatively the value generated from platform
    usage.
  image: ''
  tags: Monetization
- building_block_id: relationships
  type: Monetization
  category: Direct Value
  sorttype: ''
  sortcat: ''
  name: Relationships
  description: >-
    How can relationships between users, or companies be applied to value
    generated? Will access to more relationships positively or negatively impact
    how value is generated for platform, and consumers?
  image: ''
  tags: Monetization
- building_block_id: support
  type: Monetization
  category: Direct Value
  sorttype: ''
  sortcat: ''
  name: Support
  description: >-
    Is access to support something that impacts the value being generated? Does
    access to support resources introduce the optimal levels of value consumers
    are looking for? How is support wielded within overall platform
    monetization.
  image: ''
  tags: Monetization
- building_block_id: applications
  type: Monetization
  category: Direct Value
  sorttype: ''
  sortcat: ''
  name: Applications
  description: >-
    Is value generated looked at on a per application basis? Does having
    multiple applications impact the value generate? Coming up with interesting
    ways to understand how applications impact platform value for everyone.
  image: ''
  tags: Monetization
- building_block_id: integrations
  type: Monetization
  category: Direct Value
  sorttype: ''
  sortcat: ''
  name: Integrations
  description: >-
    What external integrations are available? How can these be leveraged to
    enhance the value for consumers? Are some integrations part of base
    operations, where others are accessible at higher levels, or on a one off
    basis.
  image: ''
  tags: Monetization
- building_block_id: investment
  type: Monetization
  category: Direct Value
  sorttype: ''
  sortcat: ''
  name: Investment
  description: >-
    Similar to donations, what investment possibilities are part of platform
    operations? How can access to invest be a value option for consumers, and be
    used to create more value for platform operators?
  image: ''
  tags: Monetization
- building_block_id: marketing-vehicle
  type: Monetization
  category: Indirect Value
  sorttype: ''
  sortcat: ''
  name: Marketing Vehicle
  description: >-
    Having an API is cool these days, and some APIs are worth just having for
    the PR value, and extending the overall brand of the platform.
  image: ''
  tags: Monetization
- building_block_id: traffic-generation
  type: Monetization
  category: Indirect Value
  sorttype: ''
  sortcat: ''
  name: Traffic Generation
  description: >-
    The API exists solely for distributing links to web and mobile applications,
    driving traffic to specific properties - is this tracked as part of other
    analytics?
  image: ''
  tags: Monetization
- building_block_id: brand-awareness
  type: Monetization
  category: Indirect Value
  sorttype: ''
  sortcat: ''
  name: Brand Awareness
  description: >-
    Applying a brand strategy, and using the API to incentivize publishers to
    extend the reach of the brand and ultimately the platform - can we quantify
    this?
  image: ''
  tags: Monetization
- building_block_id: data--content-acquisition
  type: Monetization
  category: Indirect Value
  sorttype: ''
  sortcat: ''
  name: Data & Content Acquisition
  description: >-
    Using the API, and the applications built on top as part of a larger data
    and content acquisition strategy--can we quantify this?
  image: ''
  tags: Monetization
- building_block_id: saas
  type: Monetization
  category: Indirect Value
  sorttype: ''
  sortcat: ''
  name: SaaS
  description: >-
    Value generated is focused on SaaS services, and API value generation is
    about augmenting these services, secondary to the core SaaS business model.
  image: ''
  tags: Monetization
- building_block_id: paas
  type: Monetization
  category: Indirect Value
  sorttype: ''
  sortcat: ''
  name: PaaS
  description: >-
    Value generated is focused on PaaS services, and API value generation is
    about augmenting these services, secondary to the core PaaS business model.
  image: ''
  tags: Monetization
- building_block_id: devices
  type: Monetization
  category: Indirect Value
  sorttype: ''
  sortcat: ''
  name: Devices
  description: >-
    An API exists purely in support of a device, such as Fitbit, or with a 3D
    Robotics Drone. All value generated by the API is about enhancing, and
    building on the overall device experience.
  image: ''
  tags: Monetization
- building_block_id: products
  type: Monetization
  category: Indirect Value
  sorttype: ''
  sortcat: ''
  name: Products
  description: >-
    An API exists in support of a specific product. Just like devices, but
    products could be physical devices that are not connected to the database.
  image: ''
  tags: Monetization
- building_block_id: services
  type: Monetization
  category: Indirect Value
  sorttype: ''
  sortcat: ''
  name: Services
  description: >-
    As with products, an API may exist to augment an existing in-person, or
    possibly a digital service being offered by a company. The API value is
    centered around this service, and not the actual API.
  image: ''
  tags: Monetization
- building_block_id: syndication
  type: Monetization
  category: Indirect Value
  sorttype: ''
  sortcat: ''
  name: Syndication
  description: >-
    An API exists to help syndicate data or content on the web. All value
    generated by the API is in service of the syndication process.
  image: ''
  tags: Monetization
- building_block_id: analytics
  type: Monetization
  category: Indirect Value
  sorttype: ''
  sortcat: ''
  name: Analytics
  description: >-
    How can analytics be leveraged as part of API value generation? Are
    analytics part of the base of operations, or are they an added value
    incentive for consumers, and platform operators.
  image: ''
  tags: Monetization
- building_block_id: reporting
  type: Monetization
  category: Indirect Value
  sorttype: ''
  sortcat: ''
  name: Reporting
  description: >-
    How is reporting via an API platform part over the overall value being
    generated? Reporting can be something that benefits internal or external
    operators, and bring more value to the table.
  image: ''
  tags: Monetization
- building_block_id: talent
  type: Monetization
  category: Indirect Value
  sorttype: ''
  sortcat: ''
  name: Talent
  description: >-
    How is talent, from an HR perspective considered as part of the value being
    generated by an API? Does the API exists as a sort of honeypot to attract
    talent for hire, project work, or possibly acquisitions and investments.
  image: ''
  tags: Monetization
- building_block_id: security
  type: Monetization
  category: Indirect Value
  sorttype: ''
  sortcat: ''
  name: Security
  description: >-
    How is security used as a lens for measuring, quantifying, and delivering
    value via the platform. Does the existence of security only available at
    higher levels or on-demand usage? Security will continue to play an ever
    increasing role in API monetization.
  image: ''
  tags: Monetization
- building_block_id: link-affiliate
  type: Monetization
  category: Partner Revenue Generation
  sorttype: ''
  sortcat: ''
  name: Link Affiliate
  description: >-
    What revenue is generated and paid out via links that are made available via
    the API, with potentially externally affiliate links embedded.
  image: ''
  tags: Monetization
- building_block_id: revenue-share
  type: Monetization
  category: Partner Revenue Generation
  sorttype: ''
  sortcat: ''
  name: Revenue Share
  description: >-
    What portion API revenue is paid out to potential re-sellers who drive API
    usage. Revenue is percentage of overall credit purchases / usage.
  image: ''
  tags: Monetization
- building_block_id: credits-to-bill
  type: Monetization
  category: Partner Revenue Generation
  sorttype: ''
  sortcat: ''
  name: Credits to Bill
  description: >-
    All revenue is paid in credits on account, and user can decide to get buy
    out of credits at any time, or possibly use in other aspects of system
    operation.
  image: ''
  tags: Monetization
- building_block_id: reseller
  type: Monetization
  category: Partner Revenue Generation
  sorttype: ''
  sortcat: ''
  name: Reseller
  description: >-
    Is there a reseller program available for any levels of API platform
    operations? Are API consumers incentivized to sell products or services, in
    which they are compensated for? How can platform value being broken up using
    reseller approaches?
  image: ''
  tags: Monetization
- building_block_id: timeframe
  type: Monetization
  category: Reporting
  sorttype: ''
  sortcat: ''
  name: Timeframe
  description: >-
    How much revenue is being brought in on a daily, weekly, monthly, quarterly,
    or annual basis for an API and all of its endpoints.
  image: ''
  tags: Monetization
- building_block_id: users
  type: Monetization
  category: Reporting
  sorttype: ''
  sortcat: ''
  name: Users
  description: >-
    How much revenue is being brought in on a monthly basis for a specific user,
    for an API and all of its endpoints.
  image: ''
  tags: Monetization
- building_block_id: applications
  type: Monetization
  category: Reporting
  sorttype: ''
  sortcat: ''
  name: Applications
  description: >-
    How much revenue is being brought in on a monthly basis for a specific
    application, for an API and all of its endpoints.
  image: ''
  tags: Monetization
- building_block_id: plans
  type: Monetization
  category: Reporting
  sorttype: ''
  sortcat: ''
  name: Plans
  description: >-
    Which plans generate most usage and revenue? I should be applying just as
    easily to aspects of platform / internal usage as well. Better understanding
    value generated across all plan levels.
  image: ''
  tags: Monetization
- building_block_id: affiliate-revenue
  type: Monetization
  category: Reporting
  sorttype: ''
  sortcat: ''
  name: Affiliate Revenue
  description: >-
    What was generated from affiliate links made available via APIs, minus what
    percentage was paid out to API consumers.
  image: ''
  tags: Monetization
- building_block_id: advertising-revenue
  type: Monetization
  category: Reporting
  sorttype: ''
  sortcat: ''
  name: Advertising Revenue
  description: >-
    What advertising revenue was derived from web or mobile application traffic
    resulting from the API, minus whatever was paid out as rev share to API
    consumers.
  image: ''
  tags: Monetization
- building_block_id: country
  type: Monetization
  category: Reporting
  sorttype: ''
  sortcat: ''
  name: Country
  description: >-
    How are things broken down by country? Country defined API operations will
    continue to be an important way to look at API operations, and value
    generated.
  image: ''
  tags: Monetization
- building_block_id: region
  type: Monetization
  category: Reporting
  sorttype: ''
  sortcat: ''
  name: Region
  description: >-
    Keeping in alignment with traditional sales regions, and looking at value
    generated within specific regions.
  image: ''
  tags: Monetization
- building_block_id: addons
  type: Monetization
  category: Extensions
  sorttype: ''
  sortcat: ''
  name: Add-Ons
  description: >-
    Are add-ons used to monetize the platforms? Are they a unit of value that
    can be used as part of base operations, or on-demand, or as part of any
    other dimension of API plans?
  image: ''
  tags: Monetization
- building_block_id: reciprocity
  type: Monetization
  category: Extensions
  sorttype: ''
  sortcat: ''
  name: Reciprocity
  description: >-
    How can API interoperability, automation, and reciprocity with other
    platforms be used as part of the overall API monetization strategy? Common
    approaches to reciprocityi can be leveraged as part of API monetization and
    planning.
  image: ''
  tags: Monetization
- building_block_id: single-sign-on-sso
  type: Monetization
  category: Extensions
  sorttype: ''
  sortcat: ''
  name: Single Sign On (SSO)
  description: >-
    How can Single Sign On be leveraged as part of API monetization? Are there
    some opportunities that can be available for free, or are there other higher
    levels of access where SSO is an option? Consider how this level of
    authentication can impact monetization?
  image: ''
  tags: Monetization
- building_block_id: service-availability
  type: Monitoring
  category: Core Details
  sorttype: ''
  sortcat: ''
  name: Service Availability
  description: Making sure a service is available.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-heart-monitor.png
  tags: Monitoring
- building_block_id: latency-measurement
  type: Monitoring
  category: Core Details
  sorttype: ''
  sortcat: ''
  name: Latency Measurement
  description: Measuring the latency associated with a specific request.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-speedometer.png
  tags: Monitoring
- building_block_id: response-header-validation
  type: Monitoring
  category: Core Details
  sorttype: ''
  sortcat: ''
  name: Response Header Validation
  description: Being able to validate for a specific header for a request.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-validation.jpg
  tags: Monitoring
- building_block_id: response-body-validation
  type: Monitoring
  category: Core Details
  sorttype: ''
  sortcat: ''
  name: Response Body Validation
  description: Being able to validate the content of the body for a request.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-validation.jpg
  tags: Monitoring
- building_block_id: request-editor
  type: Monitoring
  category: Core Details
  sorttype: ''
  sortcat: ''
  name: Request Editor
  description: Being able to edit the request being made as part of API monitoring process.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-editor.png
  tags: Monitoring
- building_block_id: request-retry
  type: Monitoring
  category: Core Details
  sorttype: ''
  sortcat: ''
  name: Request Retry
  description: >-
    Being able to retry a specific request that has been made at previous
    timeframe.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-retry.png
  tags: Monitoring
- building_block_id: request-sharing
  type: Monitoring
  category: Core Details
  sorttype: ''
  sortcat: ''
  name: Request Sharing
  description: Allow the sharing of a specific request designated for monitoring.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-sharing.jpeg
  tags: Monitoring
- building_block_id: request-playback
  type: Monitoring
  category: Core Details
  sorttype: ''
  sortcat: ''
  name: Request Playback
  description: >-
    Enable the playback of a specific request that has been made at previous
    timeframe.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-play.jpg
  tags: Monitoring
- building_block_id: request-scheduling
  type: Monitoring
  category: Core Details
  sorttype: ''
  sortcat: ''
  name: Request Scheduling
  description: Allow the scheduling of when to run specific task at specific time(s).
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-scheduling.jpeg
  tags: Monitoring
- building_block_id: request-compare
  type: Monitoring
  category: Core Details
  sorttype: ''
  sortcat: ''
  name: Request Compare
  description: Being able to compare to requests against each other.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-compare.png
  tags: Monitoring
- building_block_id: request-scripting
  type: Monitoring
  category: Core Details
  sorttype: ''
  sortcat: ''
  name: Request Scripting
  description: The ability to script against a specific request.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-html-code.png
  tags: Monitoring
- building_block_id: request-automation
  type: Monitoring
  category: Core Details
  sorttype: ''
  sortcat: ''
  name: Request Automation
  description: The ability to automate the running of multiple requests.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-clock-gear.png
  tags: Monitoring
- building_block_id: request-commenting
  type: Monitoring
  category: Core Details
  sorttype: ''
  sortcat: ''
  name: Request Commenting
  description: Allowing the ability to comment on a specific request.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-chat.png
  tags: Monitoring
- building_block_id: documentation-monitoring
  type: Monitoring
  category: Management Monitoring
  sorttype: ''
  sortcat: ''
  name: Documentation Monitoring
  description: Keeping track of changes to an APIs documentation
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-documentation.png
  tags: Monitoring
- building_block_id: pricing-monitoring
  type: Monitoring
  category: Management Monitoring
  sorttype: ''
  sortcat: ''
  name: Pricing Monitoring
  description: Notifications when an API platform's pricing changes
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-dollar-sign.jpg
  tags: Monitoring
- building_block_id: terms-of-service-monitoring
  type: Monitoring
  category: Management Monitoring
  sorttype: ''
  sortcat: ''
  name: Terms of Service Monitoring
  description: Updates when a company changes the terms of service&nbsp;
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-terms-conditions.png
  tags: Monitoring
- building_block_id: provider-based-monitoring
  type: Monitoring
  category: Targeted Monitoring
  sorttype: ''
  sortcat: ''
  name: Provider Based Monitoring
  description: Being able to monitor an LAPI from a particular provider.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-api-provider.png
  tags: Monitoring
- building_block_id: region-based-monitoring
  type: Monitoring
  category: Targeted Monitoring
  sorttype: ''
  sortcat: ''
  name: Region Based Monitoring
  description: Begin able to monitor from a specific geographical region.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-region.png
  tags: Monitoring
- building_block_id: public-monitoring
  type: Monitoring
  category: Targeted Monitoring
  sorttype: ''
  sortcat: ''
  name: Public Monitoring
  description: 'Monitoring of public APIs, and providing the information for others to use.'
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-people.png
  tags: Monitoring
- building_block_id: basic-auth
  type: Monitoring
  category: Authentication
  sorttype: ''
  sortcat: ''
  name: Basic Auth
  description: 'Using Basic Auth, a username and password for authentication.'
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-basic-auth.jpg
  tags: Monitoring
- building_block_id: oauth
  type: Monitoring
  category: Authentication
  sorttype: ''
  sortcat: ''
  name: OAuth
  description: Using OAuth for platform authentication.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/oauth-logo.png
  tags: Monitoring
- building_block_id: api-keys
  type: Monitoring
  category: Authentication
  sorttype: ''
  sortcat: ''
  name: API Keys
  description: Using API keys for authentication.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-key.png
  tags: Monitoring
- building_block_id: collections
  type: Monitoring
  category: Utility
  sorttype: ''
  sortcat: ''
  name: Collections
  description: Being able to organize requests into collections.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-collection.png
  tags: Monitoring
- building_block_id: virtualize
  type: Monitoring
  category: Utility
  sorttype: ''
  sortcat: ''
  name: Virtualize
  description: The ability to virtualize any single or group of requests.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-virtualization.png
  tags: Monitoring
- building_block_id: localhost
  type: Monitoring
  category: Utility
  sorttype: ''
  sortcat: ''
  name: Localhost
  description: Allow for executing monitoring requests using localhost.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-localhost.png
  tags: Monitoring
- building_block_id: teams
  type: Monitoring
  category: Utility
  sorttype: ''
  sortcat: ''
  name: Teams
  description: Enable the ability for teams to work together and share monitoring.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-team-male-female.png
  tags: Monitoring
- building_block_id: api
  type: Monitoring
  category: Utility
  sorttype: ''
  sortcat: ''
  name: API
  description: Providing an API for API monitoring tools.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/api-commons-icon.png
  tags: Monitoring
- building_block_id: sms
  type: Monitoring
  category: Notification
  sorttype: ''
  sortcat: ''
  name: SMS
  description: Allow notifications to be received by SMS.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-sms-2.png
  tags: Monitoring
- building_block_id: email
  type: Monitoring
  category: Notification
  sorttype: ''
  sortcat: ''
  name: Email
  description: Allow notifications to be received by email.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-email.png
  tags: Monitoring
- building_block_id: phone
  type: Monitoring
  category: Notification
  sorttype: ''
  sortcat: ''
  name: Phone
  description: Allow notifications to be received by Phone.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-iphone.png
  tags: Monitoring
- building_block_id: webhook
  type: Monitoring
  category: Notification
  sorttype: ''
  sortcat: ''
  name: Webhook
  description: Allow notifications to be received by webhook.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/webhooks.png
  tags: Monitoring
- building_block_id: postman
  type: Monitoring
  category: Import
  sorttype: ''
  sortcat: ''
  name: Postman
  description: Allow for importing using Postman Collections.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-postman.png
  tags: Monitoring
- building_block_id: openapi-spec
  type: Monitoring
  category: Import
  sorttype: ''
  sortcat: ''
  name: OpenAPI Spec
  description: Allow for importing using OpenAPI Spec.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-swagger-round.png
  tags: Monitoring
- building_block_id: raml
  type: Monitoring
  category: Import
  sorttype: ''
  sortcat: ''
  name: RAML
  description: Allow for importing using RAML.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-raml.png
  tags: Monitoring
- building_block_id: har
  type: Monitoring
  category: Import
  sorttype: ''
  sortcat: ''
  name: HAR
  description: Allow for importing using HAR.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-har-file.png
  tags: Monitoring
- building_block_id: dashboard
  type: Monitoring
  category: Reporting
  sorttype: ''
  sortcat: ''
  name: Dashboard
  description: Providing a dashboard to review monitors.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-status-dashboard.png
  tags: Monitoring
- building_block_id: analytics
  type: Monitoring
  category: Reporting
  sorttype: ''
  sortcat: ''
  name: Analytics
  description: Providing analytics around API monitoring.
  image: ''
  tags: ''
- building_block_id: embeddable
  type: Monitoring
  category: Reporting
  sorttype: ''
  sortcat: ''
  name: Embeddable
  description: Providing emeddable tools for API monitoring.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-embeddable.png
  tags: Monitoring
- building_block_id: slack
  type: Monitoring
  category: 3rd Party
  sorttype: ''
  sortcat: ''
  name: Slack
  description: Provide integration with Slack.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/slack-icon.png
  tags: Monitoring
- building_block_id: pagerduty
  type: Monitoring
  category: 3rd Party
  sorttype: ''
  sortcat: ''
  name: PagerDuty
  description: Provide integration with PagerDuty.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/pager-duty-icon.png
  tags: Monitoring
- building_block_id: victorops
  type: Monitoring
  category: 3rd Party
  sorttype: ''
  sortcat: ''
  name: VictorOps
  description: Provide integration with VictorOps.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/victorops-icon.jpeg
  tags: Monitoring
- building_block_id: hipchat
  type: Monitoring
  category: 3rd Party
  sorttype: ''
  sortcat: ''
  name: HipChat
  description: Provide integration with HipChat.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/hip-chat-icon.png
  tags: Monitoring
- building_block_id: flowdock
  type: Monitoring
  category: 3rd Party
  sorttype: ''
  sortcat: ''
  name: Flowdock
  description: Provide integration with Flowdock
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/flowdock-icon.jpeg
  tags: Monitoring
- building_block_id: opsgenie
  type: Monitoring
  category: 3rd Party
  sorttype: ''
  sortcat: ''
  name: OpsGenie
  description: Provide integration with OpsGenie.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/opsgenie-icon.png
  tags: Monitoring
- building_block_id: articles
  type: News
  category: News Content
  sorttype: ''
  sortcat: ''
  name: Articles
  description: >-
    One of the basic building blocks on the World Wide Web, that news artcle. A
    basic system for storing the title, data, body, and other relevant meta data
    for an article. Articles may be more news, more blog, but they all of the
    very similiar base characteristics.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-news.png
  tags: ''
- building_block_id: transcripts
  type: News
  category: News Content
  sorttype: ''
  sortcat: ''
  name: Transcripts
  description: >-
    Providing full transcripts of news stories, providing a full text of any
    supporting media like video, audio, as well as connections to each article
    associated with the transcript.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-exam.png
  tags: ''
- building_block_id: comments
  type: News
  category: News Content
  sorttype: ''
  sortcat: ''
  name: Comments
  description: >-
    Conversation surrounding an article, either via custom commenting system, or
    Disqus. Some options might be to use Stack Exchange, Github, Twitter, or
    other 3rd party social stream, and provide reference to related
    articles.&nbsp;
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-comment-bubbles.png
  tags: ''
- building_block_id: breaking
  type: News
  category: Real-Time
  sorttype: ''
  sortcat: ''
  name: Breaking
  description: >-
    News has always had a shelf-life and in the Internet age it is all serving
    up news as real-time as you possible can. Most news providers have some sort
    break, latest, or timely news feed as part of their API.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-clock-finish.png
  tags: ''
- building_block_id: subscription
  type: News
  category: Real-Time
  sorttype: ''
  sortcat: ''
  name: Subscription
  description: >-
    The ability to subscribe to news feed via RSS, PubSub, or some subscription
    mechanisms that either pushes out to clients or responds to clients on a
    regular basis.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-rss-icon.png
  tags: ''
- building_block_id: trends
  type: News
  category: Real-Time
  sorttype: ''
  sortcat: ''
  name: Trends
  description: >-
    Introducing the ability to see trends across news networks, providing
    insight on what is popular, and what is trending downward as well. Most
    trend related services provie some sort of real-time subscription portion
    ensuring timeliness.&nbsp;
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-trends.png
  tags: ''
- building_block_id: analytics
  type: News
  category: Real-Time
  sorttype: ''
  sortcat: ''
  name: Analytics
  description: >-
    It isn't enough to show trends, some news networks are porviding the data
    behind the trends, and insight into the algorthms. Analytics are become part
    of many news networks providing insight all areas of the enws.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-analytics-2.png
  tags: ''
- building_block_id: social-amplifier
  type: News
  category: Real-Time
  sorttype: ''
  sortcat: ''
  name: Social Amplifier
  description: >-
    Social has become a big part of news, and many of the news platforms are in
    business of amplifying the reach of popular articles, publishing, and
    pushing the conversation onto popular social media networks.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-social.png
  tags: ''
- building_block_id: tags
  type: News
  category: Meta
  sorttype: ''
  sortcat: ''
  name: Tags
  description: >-
    The ability to loosely organize news articles with tags. Tagging system
    provides the ability to add, update, remove and delete tags as well as
    associating with articles.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-tag.png
  tags: ''
- building_block_id: categories
  type: News
  category: Meta
  sorttype: ''
  sortcat: ''
  name: Categories
  description: >-
    The ability to put articles into categories. Category based systems provide
    the ability to add, update, remove and delete categories as well as
    associating with articles.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-category.png
  tags: ''
- building_block_id: types
  type: News
  category: Meta
  sorttype: ''
  sortcat: ''
  name: Types
  description: >-
    Similiar to categories, types provide the ability to put articles into
    buckets by the type of article. Type systems provides the ability to add,
    update, remove and delete types as well as associating with articles.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-type.png
  tags: ''
- building_block_id: topics
  type: News
  category: Meta
  sorttype: ''
  sortcat: ''
  name: Topics
  description: >-
    Topics allow conversation to be organized by the topical direction they are
    headed, providing a more conversational focus to stories, and while could be
    done with tags, categories, or types, provide another method for organizng
    stories.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-topic.png
  tags: ''
- building_block_id: sections
  type: News
  category: Meta
  sorttype: ''
  sortcat: ''
  name: Sections
  description: >-
    Providing a way to track articles that is in line with traditional newspaper
    sections. Section system allow for adding and removing of stories into each
    section.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-section.png
  tags: ''
- building_block_id: rooms
  type: News
  category: Meta
  sorttype: ''
  sortcat: ''
  name: Rooms
  description: >-
    Rooms allow for on-demand news rooms to be created, allowing stories to be
    developed, and aggregated within specific news rooms. News room systems
    allow for the adding, updating, and removing of rooms, and their stories.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-news-room.png
  tags: ''
- building_block_id: stories
  type: News
  category: Meta
  sorttype: ''
  sortcat: ''
  name: Stories
  description: >-
    Allowing for the organization of articles into sequential stories, providing
    a flowing order to group them by. Story systems allow for the creation of
    stories, and the adding and removal of articles from these stories.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-story-2.png
  tags: ''
- building_block_id: taxonomy
  type: News
  category: Meta
  sorttype: ''
  sortcat: ''
  name: Taxonomy
  description: >-
    Providing a full taxonomy for articles reflects a very structured approach
    to organizing of articles, linking them together. Taxonomy system usually
    reflect an open standard for categorizing, and linking of documents like
    RDF, and other formats.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-hypermedia.png
  tags: ''
- building_block_id: sources
  type: News
  category: Meta
  sorttype: ''
  sortcat: ''
  name: Sources
  description: >-
    Providing the ability to add, remove, and associate sources of articles,
    whether it is from specific domains, companies, or other organized source.
    Some news providers focus ony on their news which may span multiple domains,
    and publications, while others focus on a wide variety of sources for their
    news.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-source.png
  tags: ''
- building_block_id: author
  type: News
  category: Meta
  sorttype: ''
  sortcat: ''
  name: Author
  description: >-
    Providing the ability to track more than just the author name for an
    article, and track on more details about authors, like other articles,
    social networks, bio, and other relevant information.&nbsp;
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-pen.jpeg
  tags: ''
- building_block_id: geo
  type: News
  category: Meta
  sorttype: ''
  sortcat: ''
  name: Geo
  description: >-
    The ability to associate articles to a specific geographic location either
    by address, zipcode, or by latitude and longitude. Geo provides the ability
    to search for articles by city, region, or other location.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-geo-pin.jpeg
  tags: ''
- building_block_id: images
  type: News
  category: Media
  sorttype: ''
  sortcat: ''
  name: Images
  description: >-
    Providing the ability to add, update, and remove images that are associated
    with news articles. Images provide the visual layer for the news
    network.&nbsp;
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-photo.png
  tags: ''
- building_block_id: videos
  type: News
  category: Media
  sorttype: ''
  sortcat: ''
  name: Videos
  description: >-
    Providing the ability to add, update, and remove videos that are associated
    with news articles. Videos provide an interactive visual layer for the news
    network.&nbsp;
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-video.png
  tags: ''
- building_block_id: email
  type: News
  category: Messaging
  sorttype: ''
  sortcat: ''
  name: Email
  description: >-
    Allowing for the sending of articles via email from platform APIs. Sharing
    of articles by email is a pretty basic feature of being able to share, and
    syndicate news articles via a messaging system.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-email.png
  tags: ''
- building_block_id: widgets
  type: News
  category: Embeddable
  sorttype: ''
  sortcat: ''
  name: Widgets
  description: >-
    Allow for the copy and paste of simple JavaScript widgets that can be
    embedded on any website, or within any application, syndicating news beyond
    the original source. Embeddable widgets work directly with API driven news
    resources.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-embeddable.png
  tags: ''
- building_block_id: wordpress
  type: News
  category: Platform
  sorttype: ''
  sortcat: ''
  name: Wordpress
  description: >-
    Providing the ability to syndicate news articles directly to any WordPress
    installation using a plugin developed specifically for the API. WordPress is
    one of the top platforms for deploying websites and blogs, and one of the
    first plugins developed by many API providers.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-wordpress.png
  tags: ''
- building_block_id: drupal
  type: News
  category: Platform
  sorttype: ''
  sortcat: ''
  name: Drupal
  description: >-
    Allowing for easy distribution to applications launched via the Heroku
    Platform as a Service (PaaS). Heroku allows for the easy distribution of
    news content to cloud platforms that are driving websites, web and mobile
    applications.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-heroku-icon.png
  tags: ''
- building_block_id: landing-page
  type: Partners
  category: Program Details
  sorttype: ''
  sortcat: ''
  name: Landing Page
  description: An official landing page for the partner program.
  image: ''
  tags: Partners
- building_block_id: program-details
  type: Partners
  category: Program Details
  sorttype: ''
  sortcat: ''
  name: Program Details
  description: 'Short, concise information about the program.'
  image: ''
  tags: Partners
- building_block_id: program-requirements
  type: Partners
  category: Program Details
  sorttype: ''
  sortcat: ''
  name: Program Requirements
  description: Information about what the details of the program are.
  image: ''
  tags: Partners
- building_block_id: program-levels
  type: Partners
  category: Program Details
  sorttype: ''
  sortcat: ''
  name: Program Levels
  description: Details about what the different levels of the partner program are.
  image: ''
  tags: Partners
- building_block_id: list-of-partners
  type: Partners
  category: Partner Showcase
  sorttype: ''
  sortcat: ''
  name: List of Partners
  description: 'A list of partners, usually name and logo, maybe with some description.'
  image: ''
  tags: Partners
- building_block_id: partner-stories
  type: Partners
  category: Partner Showcase
  sorttype: ''
  sortcat: ''
  name: Partner Stories
  description: Stories of the partners and how they use the platform.
  image: ''
  tags: Partners
- building_block_id: partner-search
  type: Partners
  category: Partner Showcase
  sorttype: ''
  sortcat: ''
  name: Partner Search
  description: A keyword search for discovering partners.
  image: ''
  tags: Partners
- building_block_id: application-/-registration
  type: Partners
  category: Partner Program
  sorttype: ''
  sortcat: ''
  name: Application / Registration
  description: The actual application for registering to become a partner.
  image: ''
  tags: Partners
- building_block_id: private-portal
  type: Partners
  category: Partner Program
  sorttype: ''
  sortcat: ''
  name: Private Portal
  description: A private portal for partners to login to.
  image: ''
  tags: Partners
- building_block_id: certification
  type: Partners
  category: Partner Program
  sorttype: ''
  sortcat: ''
  name: Certification
  description: >-
    Official certification showing that a partner is officially approved and
    vetted.
  image: ''
  tags: Partners
- building_block_id: quota-increase
  type: Partners
  category: API
  sorttype: ''
  sortcat: ''
  name: Quota Increase
  description: Increasing the rate limit for existing APIs.
  image: ''
  tags: Partners
- building_block_id: additional-apis
  type: Partners
  category: API
  sorttype: ''
  sortcat: ''
  name: Additional APIs
  description: Provide access to APIs that are only accessible to their partner tiers.
  image: ''
  tags: Partners
- building_block_id: read-/-write-apis
  type: Partners
  category: API
  sorttype: ''
  sortcat: ''
  name: Read / Write APIs
  description: >-
    Access to not only read, but also write, update, and possibly delete access
    to aPIs.
  image: ''
  tags: Partners
- building_block_id: program-api
  type: Partners
  category: API
  sorttype: ''
  sortcat: ''
  name: Program API
  description: >-
    Providing an API that opens up access to all or part of partner program
    operations, providing programmatic access and transparency to the program.
    Like most other lines along the API lifecycle, partner programs should have
    APIs of their own.
  image: ''
  tags: ''
- building_block_id: early-communication
  type: Partners
  category: Early Access
  sorttype: ''
  sortcat: ''
  name: Early Communication
  description: Allow for partners to get early access to platform communications.
  image: ''
  tags: Partners
- building_block_id: early-opportunities
  type: Partners
  category: Early Access
  sorttype: ''
  sortcat: ''
  name: Early Opportunities
  description: Access to early platform opportunities meant just for partners.
  image: ''
  tags: Partners
- building_block_id: alpha--beta-access
  type: Partners
  category: Early Access
  sorttype: ''
  sortcat: ''
  name: Alpha & Beta Access
  description: Allow for beta access to new platform products.
  image: ''
  tags: Partners
- building_block_id: agreement
  type: Partners
  category: Legal
  sorttype: ''
  sortcat: ''
  name: Agreement
  description: The legaleze for the partner program agreement.
  image: ''
  tags: Partners
- building_block_id: privacy-policy
  type: Partners
  category: Legal
  sorttype: ''
  sortcat: ''
  name: Privacy Policy
  description: What is the privacy policy for the partner program.
  image: ''
  tags: Partners
- building_block_id: code-of-conduct
  type: Partners
  category: Legal
  sorttype: ''
  sortcat: ''
  name: Code of Conduct
  description: 'A code of conduct targeting partners, explaining what is expected.'
  image: ''
  tags: Partners
- building_block_id: blog-posts
  type: Partners
  category: Marketing Activities
  sorttype: ''
  sortcat: ''
  name: Blog Posts
  description: Provide blog posts for partners to take advantage of one time or recurring.
  image: ''
  tags: Partners
- building_block_id: press-release
  type: Partners
  category: Marketing Activities
  sorttype: ''
  sortcat: ''
  name: Press Release
  description: >-
    Provide press releases for new partners, and possibly recurring for other
    milestones.
  image: ''
  tags: Partners
- building_block_id: facebook-post
  type: Partners
  category: Marketing Activities
  sorttype: ''
  sortcat: ''
  name: Facebook Post
  description: Post updates to the platforms Facebook account.
  image: ''
  tags: Partners
- building_block_id: twitter-post
  type: Partners
  category: Marketing Activities
  sorttype: ''
  sortcat: ''
  name: Twitter Post
  description: Post updates to the platforms Twitter account.
  image: ''
  tags: Partners
- building_block_id: google-plus
  type: Partners
  category: Marketing Activities
  sorttype: ''
  sortcat: ''
  name: Google Plus
  description: Post updates to the platforms Google Plus account.
  image: ''
  tags: Partners
- building_block_id: discounts
  type: Partners
  category: Support
  sorttype: ''
  sortcat: ''
  name: Discounts
  description: Provide discounts on direct support for partners.
  image: ''
  tags: Partners
- building_block_id: office-hours
  type: Partners
  category: Support
  sorttype: ''
  sortcat: ''
  name: Office Hours
  description: Provide virtual open office hours just for partners.
  image: ''
  tags: Partners
- building_block_id: training
  type: Partners
  category: Support
  sorttype: ''
  sortcat: ''
  name: Training
  description: Offer direct training opportunities that is designed just for partners.
  image: ''
  tags: Partners
- building_block_id: advisors
  type: Partners
  category: Support
  sorttype: ''
  sortcat: ''
  name: Advisors
  description: Provide special advisors that are there to support partners.
  image: ''
  tags: Partners
- building_block_id: quotes
  type: Partners
  category: Content
  sorttype: ''
  sortcat: ''
  name: Quotes
  description: >-
    Allow partners to provide quotes thath can be published to relevant
    properties.
  image: ''
  tags: Partners
- building_block_id: testimonials
  type: Partners
  category: Content
  sorttype: ''
  sortcat: ''
  name: Testimonials
  description: Have partners provide testimonials that get published to relevant sites.
  image: ''
  tags: Partners
- building_block_id: use-of-logo
  type: Partners
  category: Content
  sorttype: ''
  sortcat: ''
  name: Use of Logo
  description: 'Allow partners to use the platform logo, or special partner platform logo.'
  image: ''
  tags: Partners
- building_block_id: blog
  type: Partners
  category: Communication
  sorttype: ''
  sortcat: ''
  name: Blog
  description: >-
    Have a blog that is dedicated to providing information for the partner
    program.
  image: ''
  tags: Partners
- building_block_id: spotlight
  type: Partners
  category: Communication
  sorttype: ''
  sortcat: ''
  name: Spotlight
  description: Have a special section to spotlight on partners.
  image: ''
  tags: Partners
- building_block_id: newsletter
  type: Partners
  category: Communication
  sorttype: ''
  sortcat: ''
  name: Newsletter
  description: Provide a dedicated partner newsletter.
  image: ''
  tags: Partners
- building_block_id: revenue-sharing
  type: Partners
  category: Financial
  sorttype: ''
  sortcat: ''
  name: Revenue Sharing
  description: Offer revenue sharing for partners.
  image: ''
  tags: Partners
- building_block_id: reseller-discounts
  type: Partners
  category: Financial
  sorttype: ''
  sortcat: ''
  name: Reseller Discounts
  description: Offer reseller discounts from referrals they make.
  image: ''
  tags: Partners
- building_block_id: merchant-account
  type: Payments
  category: Payments
  sorttype: ''
  sortcat: ''
  name: Merchant Account
  description: >-
    Creation, management and integration with merchant accounts that are
    required to process credit cards.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-store.png
  tags: ''
- building_block_id: bank-account
  type: Payments
  category: Payments
  sorttype: ''
  sortcat: ''
  name: Bank Account
  description: 'Integration with existing bank accounts, for linking with payment workflows.'
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-bank.png
  tags: ''
- building_block_id: processor-/-gateways
  type: Payments
  category: Payments
  sorttype: ''
  sortcat: ''
  name: Processor / Gateways
  description: Access to multiple payent processors and gateways in multiple countries.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-proxy-left.png
  tags: ''
- building_block_id: currencies
  type: Payments
  category: Payments
  sorttype: ''
  sortcat: ''
  name: Currencies
  description: >-
    Ability to conduct transactions in multiple currencies, handling all the
    conversions for developers.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-currency.png
  tags: ''
- building_block_id: credit-card-transactions
  type: Payments
  category: Payments
  sorttype: ''
  sortcat: ''
  name: Credit Card Transactions
  description: The option to process major credit cards.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-credit-card.png
  tags: ''
- building_block_id: ach-transactions
  type: Payments
  category: Payments
  sorttype: ''
  sortcat: ''
  name: ACH Transactions
  description: The option to process transactions over the ACH network.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-dollar-sign.png
  tags: ''
- building_block_id: checks-/-wire-transactions
  type: Payments
  category: Payments
  sorttype: ''
  sortcat: ''
  name: Checks / Wire Transactions
  description: 'The option to do bank to bank, wire and check transactions.'
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-dollar-sign.png
  tags: ''
- building_block_id: cash-transactions
  type: Payments
  category: Payments
  sorttype: ''
  sortcat: ''
  name: Cash Transactions
  description: The option to accept cash payments at retail locations.&nbsp;
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-cash.png
  tags: ''
- building_block_id: virtual-transactions
  type: Payments
  category: Payments
  sorttype: ''
  sortcat: ''
  name: Virtual Transactions
  description: The option to accept transactions for credits via virtual accounts.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-dollar-sign.png
  tags: ''
- building_block_id: aggregate-transactions
  type: Payments
  category: Payments
  sorttype: ''
  sortcat: ''
  name: Aggregate Transactions
  description: Tools for performing multiple transactions at once.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-touch-points.jpg
  tags: ''
- building_block_id: credit-card-reader
  type: Payments
  category: Payments
  sorttype: ''
  sortcat: ''
  name: Credit Card Reader
  description: A physical credit card reading device.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-credit-card.png
  tags: ''
- building_block_id: credit-card-scan-/-picture
  type: Payments
  category: Payments
  sorttype: ''
  sortcat: ''
  name: Credit Card Scan / Picture
  description: A mobile phone scan or picture of a credit card.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-credit-card.png
  tags: ''
- building_block_id: one-click-/-one-touch-/-instant-buy
  type: Payments
  category: Payments
  sorttype: ''
  sortcat: ''
  name: One Click / One Touch / Instant Buy
  description: The ability to enable single action transaction
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-click.png
  tags: ''
- building_block_id: recurring-payments
  type: Payments
  category: Payments
  sorttype: ''
  sortcat: ''
  name: Recurring Payments
  description: The ability to perform recurring or subscription based transactions.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-payment-scheduled.png
  tags: ''
- building_block_id: prepayments
  type: Payments
  category: Payments
  sorttype: ''
  sortcat: ''
  name: Pre-Payments
  description: The ability to setup payment(s) prior to designated payment date.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-dollar-sign.png
  tags: ''
- building_block_id: metered-payments
  type: Payments
  category: Payments
  sorttype: ''
  sortcat: ''
  name: Metered Payments
  description: Payments based upon some metered usage of a resource.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-payment-scheduled.png
  tags: ''
- building_block_id: estimates
  type: Payments
  category: Payments
  sorttype: ''
  sortcat: ''
  name: Estimates
  description: 'Estimations of payments, with payment handling at designated time.'
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-question-mark.png
  tags: ''
- building_block_id: invoices
  type: Payments
  category: Payments
  sorttype: ''
  sortcat: ''
  name: Invoices
  description: Physical or online invoicing of customers as request for payment.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-invoice.png
  tags: ''
- building_block_id: mobile-billing
  type: Payments
  category: Payments
  sorttype: ''
  sortcat: ''
  name: Mobile Billing
  description: The ability to perform transaction against mobile users monthly phone bill.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-in-app-purchases.png
  tags: ''
- building_block_id: social-payments
  type: Payments
  category: Payments
  sorttype: ''
  sortcat: ''
  name: Social Payments
  description: >-
    An option for making and accepting payments via social platforms like
    Facebook and Twitter.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-facebook-credits.png
  tags: ''
- building_block_id: email-payments
  type: Payments
  category: Payments
  sorttype: ''
  sortcat: ''
  name: Email Payments
  description: Tools for sending and receiving transactions via email.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-email-money.png
  tags: ''
- building_block_id: sms-payments
  type: Payments
  category: Payments
  sorttype: ''
  sortcat: ''
  name: SMS Payments
  description: Tools for sending and receiving transactions via SMS.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-sms.jpg
  tags: ''
- building_block_id: carts
  type: Payments
  category: Payments
  sorttype: ''
  sortcat: ''
  name: Carts
  description: Ready to go online shopping cart solutions to support payment services.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-cart.png
  tags: ''
- building_block_id: checkout
  type: Payments
  category: Payments
  sorttype: ''
  sortcat: ''
  name: Checkout
  description: 'Ready to go checkout pages, to support payment services.'
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-cart-checkout.png
  tags: ''
- building_block_id: forms
  type: Payments
  category: Payments
  sorttype: ''
  sortcat: ''
  name: Forms
  description: Embeddable HTML and JavaScript forms to conduct transactions.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-page.jpg
  tags: ''
- building_block_id: buttons
  type: Payments
  category: Payments
  sorttype: ''
  sortcat: ''
  name: Buttons
  description: Embeddable HTML and JavaScript buttons to initiate transactions.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-pay-now-button.png
  tags: ''
- building_block_id: marketplace
  type: Payments
  category: Payments
  sorttype: ''
  sortcat: ''
  name: Marketplace
  description: >-
    The ability to facilitate marketplace style transactions between sellers and
    vendors.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-marketplace.png
  tags: ''
- building_block_id: fraud-protection
  type: Payments
  category: Payments
  sorttype: ''
  sortcat: ''
  name: Fraud Protection
  description: Tools and services that assist developers in preventing payment fraud.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-fraud.png
  tags: ''
- building_block_id: pci-compliance
  type: Payments
  category: Payments
  sorttype: ''
  sortcat: ''
  name: PCI Compliance
  description: Tools and services that help developers achieve PCI compliance.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-pci-logo.png
  tags: ''
- building_block_id: encryption
  type: Payments
  category: Payments
  sorttype: ''
  sortcat: ''
  name: Encryption
  description: Providing necessary encryption tools and services to protect communications.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-padlock.png
  tags: ''
- building_block_id: sandbox
  type: Payments
  category: Payments
  sorttype: ''
  sortcat: ''
  name: Sandbox
  description: >-
    A safe environment for developers to develop applications against, ensuring
    quality of service in production environments.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-sandbox.jpeg
  tags: ''
- building_block_id: webhooks
  type: Payments
  category: Payments
  sorttype: ''
  sortcat: ''
  name: Webhooks
  description: >-
    A webhook in web development is a method of augmenting or altering the
    behavior of a web page, or web application, with custom callbacks. These
    callbacks may be maintained, modified, and managed by third-party users and
    developers who may not necessarily be affiliated with the originating
    website or application.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/webhooks.png
  tags: ''
- building_block_id: push-notifications
  type: Payments
  category: Payments
  sorttype: ''
  sortcat: ''
  name: Push Notifications
  description: >-
    A push notification framework for developers to use when delivering push
    features in their applications.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-notification.jpg
  tags: ''
- building_block_id: barcodes
  type: Payments
  category: Payments
  sorttype: ''
  sortcat: ''
  name: Barcodes
  description: >-
    The ability to generate barcodes that represent potential physical or
    virtual transactions.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-barcode.jpg
  tags: ''
- building_block_id: products
  type: Payments
  category: Payments
  sorttype: ''
  sortcat: ''
  name: Products
  description: Separate systems for managing products that transactions will include.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-product.png
  tags: ''
- building_block_id: orders
  type: Payments
  category: Payments
  sorttype: ''
  sortcat: ''
  name: Orders
  description: Separate systems for managing orders in which transactions support.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-orders.png
  tags: ''
- building_block_id: customers
  type: Payments
  category: Payments
  sorttype: ''
  sortcat: ''
  name: Customers
  description: Separate systems for managing customers who make transactions.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-customers.png
  tags: ''
- building_block_id: coupons
  type: Payments
  category: Payments
  sorttype: ''
  sortcat: ''
  name: Coupons
  description: >-
    Separate systems that issue coupons which can be applied against
    transactions and affect the balance.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-deals.png
  tags: ''
- building_block_id: loyalty
  type: Payments
  category: Payments
  sorttype: ''
  sortcat: ''
  name: Loyalty
  description: Separate systems for managing customer loyalty programs.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-handshake.jpg
  tags: ''
- building_block_id: expenses
  type: Payments
  category: Payments
  sorttype: ''
  sortcat: ''
  name: Expenses
  description: Separate systems or managing expenses that involve transactions.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-expenses.png
  tags: ''
- building_block_id: time-tracking
  type: Payments
  category: Payments
  sorttype: ''
  sortcat: ''
  name: Time Tracking
  description: Separate systems for tracking time associated with transactions.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-clock.jpeg
  tags: ''
- building_block_id: cards
  type: Payments
  category: Payments
  sorttype: ''
  sortcat: ''
  name: Cards
  description: >-
    The ability to issue physical or virtual gift, membership and other types of
    cards.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-cards.png
  tags: ''
- building_block_id: js-libraries
  type: Payments
  category: Payments
  sorttype: ''
  sortcat: ''
  name: JS Libraries
  description: >-
    Supporting Javascript libraries that provide embeddable integration with
    payment services.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-javascript.png
  tags: ''
- building_block_id: mobile-sdks
  type: Payments
  category: Payments
  sorttype: ''
  sortcat: ''
  name: Mobile SDKs
  description: >-
    Supporting mobile SDKs for iOS, Android, Windows and others, to facilitate
    mobile payments.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-iphone.png
  tags: ''
- building_block_id: onpremise
  type: Payments
  category: Payments
  sorttype: ''
  sortcat: ''
  name: On-Premise
  description: >-
    The ability to deploy payment services on-premise, keeping transaction
    local.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-home-icon.jpeg
  tags: ''
- building_block_id: cloud
  type: Payments
  category: Payments
  sorttype: ''
  sortcat: ''
  name: Cloud
  description: >-
    The ability to deploy payment services in the clouds, with centralized
    security.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-cloud.png
  tags: ''
- building_block_id: 3rd-party-shopping-carts
  type: Payments
  category: Payments
  sorttype: ''
  sortcat: ''
  name: 3rd Party Shopping Carts
  description: Integration options for popular 3rd party shopping carts.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-cart.png
  tags: ''
- building_block_id: platform-as-a-service-paas-integration
  type: Payments
  category: Payments
  sorttype: ''
  sortcat: ''
  name: Platform as a Service (PaaS) Integration
  description: Integration with popular PaaS platforms like Salesforce and Amazon.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-cloud.png
  tags: ''
- building_block_id: frameworks
  type: Payments
  category: Payments
  sorttype: ''
  sortcat: ''
  name: Frameworks
  description: Integration with popular programming frameworks like Backbone and Angular.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-code.png
  tags: ''
- building_block_id: automation
  type: Payments
  category: Payments
  sorttype: ''
  sortcat: ''
  name: Automation
  description: Integration with popular API automation platforms like Zapier and IFTTT.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-clock-gear.png
  tags: ''
- building_block_id: cpu-usage
  type: Performance
  category: Core Performance
  sorttype: ''
  sortcat: ''
  name: CPU Usage
  description: Allow for the monitoring of CPU usage.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-cpu.png
  tags: Performance
- building_block_id: memory-usage
  type: Performance
  category: Core Performance
  sorttype: ''
  sortcat: ''
  name: Memory Usage
  description: Allow for the monitoring of memory usage.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-memory.png
  tags: Performance
- building_block_id: disk-i/o
  type: Performance
  category: Core Performance
  sorttype: ''
  sortcat: ''
  name: Disk I/O
  description: Allow for the monitoring of disk I/O.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-hard-drive.png
  tags: Performance
- building_block_id: network-i/o
  type: Performance
  category: Core Performance
  sorttype: ''
  sortcat: ''
  name: Network I/O
  description: Allow for the monitoring of network I/O.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-network.png
  tags: Performance
- building_block_id: request-editor
  type: Performance
  category: Core Performance
  sorttype: ''
  sortcat: ''
  name: Request Editor
  description: Being able to edit the request being made.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-editor.png
  tags: Performance
- building_block_id: request-retry
  type: Performance
  category: Core Performance
  sorttype: ''
  sortcat: ''
  name: Request Retry
  description: Allow the retry of any performance test.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-retry.png
  tags: Performance
- building_block_id: request-sharing
  type: Performance
  category: Core Performance
  sorttype: ''
  sortcat: ''
  name: Request Sharing
  description: Enable the sharing of performance tests.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-sharing.jpeg
  tags: Performance
- building_block_id: request-playback
  type: Performance
  category: Core Performance
  sorttype: ''
  sortcat: ''
  name: Request Playback
  description: Enable the playback of any performance test.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-play.jpg
  tags: Performance
- building_block_id: request-scheduling
  type: Performance
  category: Core Performance
  sorttype: ''
  sortcat: ''
  name: Request Scheduling
  description: Enable the scheduling of performance tests.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-scheduling.jpeg
  tags: Performance
- building_block_id: request-compare
  type: Performance
  category: Core Performance
  sorttype: ''
  sortcat: ''
  name: Request Compare
  description: Allow for the comparison of performance tests.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-compare.png
  tags: Performance
- building_block_id: request-scripting
  type: Performance
  category: Core Performance
  sorttype: ''
  sortcat: ''
  name: Request Scripting
  description: Allow for the scripting againsts tests.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-html-code.png
  tags: Performance
- building_block_id: request-automation
  type: Performance
  category: Core Performance
  sorttype: ''
  sortcat: ''
  name: Request Automation
  description: Allow for the automation of performance tests.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-clock-gear.png
  tags: Performance
- building_block_id: request-commenting
  type: Performance
  category: Core Performance
  sorttype: ''
  sortcat: ''
  name: Request Commenting
  description: Enable testers to comment on tests.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-chat.png
  tags: Performance
- building_block_id: latency-testing
  type: Performance
  category: Core Performance
  sorttype: ''
  sortcat: ''
  name: Latency Testing
  description: Provide latency testing tools.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-speedometer.png
  tags: Performance
- building_block_id: simulator
  type: Performance
  category: Core Performance
  sorttype: ''
  sortcat: ''
  name: Simulator
  description: Provide a performance test simulator.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-siimulation.png
  tags: Performance
- building_block_id: region-based-testing
  type: Performance
  category: Targeted Performance
  sorttype: ''
  sortcat: ''
  name: Region Based Testing
  description: Allow for performance tests from specific geographic regions.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-region.png
  tags: Performance
- building_block_id: provider-based-testing
  type: Performance
  category: Targeted Performance
  sorttype: ''
  sortcat: ''
  name: Provider Based Testing
  description: Allow for performance tests from specific providers.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-api-provider.png
  tags: Performance
- building_block_id: basicauth
  type: Performance
  category: Authentication
  sorttype: ''
  sortcat: ''
  name: Basic-Auth
  description: Using Basic Auth for authentication.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-basic-auth.jpg
  tags: Performance
- building_block_id: api-keys
  type: Performance
  category: Authentication
  sorttype: ''
  sortcat: ''
  name: API Keys
  description: Using API keys for authentication.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-key.png
  tags: Performance
- building_block_id: oauth
  type: Performance
  category: Authentication
  sorttype: ''
  sortcat: ''
  name: OAuth
  description: Using OAuth for authentication.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/oauth-logo.png
  tags: Performance
- building_block_id: collections
  type: Performance
  category: Utility
  sorttype: ''
  sortcat: ''
  name: Collections
  description: Allow performance tests to be organized in collections.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-collection.png
  tags: Performance
- building_block_id: command-line-interface
  type: Performance
  category: Utility
  sorttype: ''
  sortcat: ''
  name: Command Line Interface
  description: Provide a command line interface for performance tests.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-command-line.png
  tags: Performance
- building_block_id: virtualization
  type: Performance
  category: Utility
  sorttype: ''
  sortcat: ''
  name: Virtualization
  description: Allow performance tests to be conducted against virtualized instances.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-virtualization.png
  tags: Performance
- building_block_id: teams
  type: Performance
  category: Utility
  sorttype: ''
  sortcat: ''
  name: Teams
  description: Enable team environments for performance testing.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-team-male-female.png
  tags: Performance
- building_block_id: api
  type: Performance
  category: Utility
  sorttype: ''
  sortcat: ''
  name: API
  description: Provide an API for integrating with all testing.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/api-commons-icon.png
  tags: Performance
- building_block_id: postman
  type: Performance
  category: Import
  sorttype: ''
  sortcat: ''
  name: Postman
  description: Allow for tests to be imported using Postman.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-postman.png
  tags: Performance
- building_block_id: openapi-spec
  type: Performance
  category: Import
  sorttype: ''
  sortcat: ''
  name: OpenAPI Spec
  description: Allow for tests to be imported using OpenAPI Spec.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-swagger-round.png
  tags: Performance
- building_block_id: raml
  type: Performance
  category: Import
  sorttype: ''
  sortcat: ''
  name: RAML
  description: Allow for tests to be imported using RAML.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-raml.png
  tags: Performance
- building_block_id: har
  type: Performance
  category: Import
  sorttype: ''
  sortcat: ''
  name: HAR
  description: Allow for tests to be imported using HAR files.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-har-file.png
  tags: Performance
- building_block_id: junit-xml
  type: Performance
  category: Import
  sorttype: ''
  sortcat: ''
  name: JUnit XML
  description: Allow for tests to be imported using JUnit XML.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/junit-icon.gif
  tags: Performance
- building_block_id: jmeter
  type: Performance
  category: 3rd Party
  sorttype: ''
  sortcat: ''
  name: JMeter
  description: Provide 3rd pay integration with JMeterr
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/jmeter-logo.jpg
  tags: Performance
- building_block_id: dedicated-plans-/-pricing-page
  type: Plans
  category: Overview
  sorttype: ''
  sortcat: ''
  name: Dedicated Plans / Pricing Page
  description: >-
    Providing a single landing page, available at a simple URL, with all the
    information about plans available as part of platform operations. There may
    be more than one plan overview page available, for example one for SaaS side
    of offering, one for developers, and another possibly for enterprise or
    partner consumers.
  image: ''
  tags: Plans
- building_block_id: private
  type: Plans
  category: Elements
  sorttype: ''
  sortcat: ''
  name: Private
  description: >-
    Is this plan a private one, available only to a limited audience? While the
    landing page, or overall portal might be publicly available, the API access
    itself requires approval, or existing account access before you can get more
    details. Private APIs are more common than public APIs, but you should think
    about the pros / cons of keeping things private.
  image: ''
  tags: Plans
- building_block_id: public
  type: Plans
  category: Elements
  sorttype: ''
  sortcat: ''
  name: Public
  description: >-
    Is this a publicly available API operation, something that may only apply to
    some plans? While not all aspects of API operations will be 100% publicly
    available, there are some elements that anyone from the public can gain
    access to, even if it is rate limited in some way.
  image: ''
  tags: Plans
- building_block_id: free
  type: Plans
  category: Elements
  sorttype: ''
  sortcat: ''
  name: Free
  description: >-
    Is this a free resource, or set of resources, something that may not apply
    to all plans. Free should be considered even if it is part of a trial, demo,
    or just a limited level of access by time other metric. Free should be a way
    to incentivize users to higher level of access, and not damage potential
    revenue.
  image: ''
  tags: Plans
- building_block_id: trial
  type: Plans
  category: Elements
  sorttype: ''
  sortcat: ''
  name: Trial
  description: >-
    Is there a trial period that is limited by number of days, which may not
    apply to all plans. Not all audiences will respond to trial levels of
    access, but may work will with incentivizing higher levels of access, and
    API consumption. Refrain from requiring credit cards for trial levels of
    access, as it deters signup from abuse by other providers.
  image: ''
  tags: Plans
- building_block_id: demo
  type: Plans
  category: Elements
  sorttype: ''
  sortcat: ''
  name: Demo
  description: >-
    This resource or set of resources has a demonstration associated with it,
    which might apply to multiple plans. Consider the possibilities of offer
    live, or scheduled demos with overall platform operations, as well as
    individual planned levels of acess.
  image: ''
  tags: Plans
- building_block_id: access
  type: Plans
  category: Elements
  sorttype: ''
  sortcat: ''
  name: Access
  description: >-
    Access should not be taken for granted, requiring you to request access, or
    elevated access levels. While different levels of API access are common, it
    is also common to use API access itself as an element of planned API
    operations.
  image: ''
  tags: Plans
- building_block_id: setup
  type: Plans
  category: Elements
  sorttype: ''
  sortcat: ''
  name: Setup
  description: >-
    What are the costs associated with setting up and configuring an account for
    API access. Whatever time and resources are involved with setting up, or
    even perceived costs to end-users should be considered. Be careful making
    setup costs an obstacle for the on-boarding of consumers.
  image: ''
  tags: Plans
- building_block_id: ondemand
  type: Plans
  category: Elements
  sorttype: ''
  sortcat: ''
  name: On-Demand
  description: >-
    The resource or set of resources can be deployed, and shut down on demand.
    Each resource can be evaluated for how long it should be available. With
    current approaches to virtualizations, it is easier to make API resources
    available on demand, similar to how Amazon has done with many of their cloud
    compute resources.
  image: ''
  tags: Plans
- building_block_id: reserved
  type: Plans
  category: Elements
  sorttype: ''
  sortcat: ''
  name: Reserved
  description: >-
    There are opportunities to reserve an instance of a resource or set of
    resources for specific time frames. If the resources are also available
    on-demand, a complimentary reserved option should also be considered as part
    of planning operations.
  image: ''
  tags: Plans
- building_block_id: volume
  type: Plans
  category: Elements
  sorttype: ''
  sortcat: ''
  name: Volume
  description: >-
    Volume pricing levels are available, with plans based entirely on volume
    level access to resources. Some platforms operate entirely on volume levels
    of API access, and levels should be crafted with end consumers in mind, and
    how they will be consumed, and at what levels.
  image: ''
  tags: Plans
- building_block_id: spot
  type: Plans
  category: Elements
  sorttype: ''
  sortcat: ''
  name: Spot
  description: >-
    There is an opportunity to big on resources in a localized or distributed
    marketplace driven environment. Maybe the demand for a resource changes from
    week, month, season or otherwise, and allowing for bidding can increase
    competition for a variety of API resources.
  image: ''
  tags: Plans
- building_block_id: dedicated
  type: Plans
  category: Elements
  sorttype: ''
  sortcat: ''
  name: Dedicated
  description: >-
    Resources can be allocated in a dedicated state, remaining available with no
    downtime, or according to SLA. This element is complimentary to on-demand,
    and reserved instances, where the resources can be purchased on a dedicated
    bases. For many API resources dedicated will be the default state, and not
    worth mentioning unless on-demand, and other elements are available.
  image: ''
  tags: Plans
- building_block_id: infrequent
  type: Plans
  category: Elements
  sorttype: ''
  sortcat: ''
  name: Infrequent
  description: >-
    Resources are accessed infrequently, treating them as warehoused, or off to
    the side. Another side of the resource availability which focuses on these
    infrequent levels of access, and may allow a users access or plan shift from
    infrequent, to higher levels, if rate limits are exceeded.
  image: ''
  tags: Plans
- building_block_id: archive
  type: Plans
  category: Elements
  sorttype: ''
  sortcat: ''
  name: Archive
  description: >-
    Resources are in an archived state and require very little access, and can
    be stored in different manner. Like infrequent, archive is mean for maybe
    one-time access, in future dates. Think of these levels as minimum rate
    limits, which base pricing not on volume, but only is cheap if minimum
    thresholds are met.
  image: ''
  tags: Plans
- building_block_id: subscription
  type: Plans
  category: Elements
  sorttype: ''
  sortcat: ''
  name: Subscription
  description: >-
    There is a regular, recurring element to accessing a resource, as part of a
    larger subscription part of, or separated from plans. In addition to the
    regular usage, a subscription plan usually continues, and has costs
    associated with it even if there are no calls against the API made.
  image: ''
  tags: Plans
- building_block_id: personal
  type: Plans
  category: Elements
  sorttype: ''
  sortcat: ''
  name: Personal
  description: >-
    There is a personal element to a set of resources, meant for the casual
    user, and probably not developing an application or custom integration.
    These elements of API access usually involve some way for access APIs for
    non-developers through API reciprocity services like Zapier, or API
    aggregation providers like Cloud Elements, and not meant for developers.
  image: ''
  tags: Plans
- building_block_id: commercial
  type: Plans
  category: Elements
  sorttype: ''
  sortcat: ''
  name: Commercial
  description: >-
    There is a commercial licensing element to a set of resources, which require
    additional business or legal requirements. This element may not be cost
    associated, and just stipulate there are commercial opportunities around an
    API. These elements may require requesting access, or additional steps
    before they can become available.
  image: ''
  tags: Plans
- building_block_id: noncommercial
  type: Plans
  category: Elements
  sorttype: ''
  sortcat: ''
  name: Non-Commercial
  description: >-
    The platform allows for non-commercial access to resources, which usually
    means there is additional commercial requirements. Allowing non-profit
    organizations, researchers, and other potential API consumers the ability to
    validate their identity, and achieve reduced, or free levels of access can
    benefit the overall platform reach, and potential marketing engine.
  image: ''
  tags: Plans
- building_block_id: educational
  type: Plans
  category: Elements
  sorttype: ''
  sortcat: ''
  name: Educational
  description: >-
    A platform provides considerations for K-12 or higher educational access to
    resources. Like non-profit levels of access, education can benefit the
    overall platform reach, and benefit other marketing efforts. Reaching
    educational users, can lead to future individual, business, or institutional
    users, and improve the overall platform image.
  image: ''
  tags: Plans
- building_block_id: wholesale
  type: Plans
  category: Elements
  sorttype: ''
  sortcat: ''
  name: Wholesale
  description: >-
    There are wholesale options around deploying and accessing resources that
    are available via a platform. With cloud computing providers like AWS,
    Heroku, and Google, as well as virtualization technology like Docker,
    providing wholesale implementations of APIs are growing more possible, and
    are becoming more commonplace in API plans.
  image: ''
  tags: Plans
- building_block_id: government
  type: Plans
  category: Elements
  sorttype: ''
  sortcat: ''
  name: Government
  description: >-
    A set of API resources is available specifically for government access,
    meeting the specialized needs of local or federal government use.
    Complimentary to non-profit, and educational elements of access, government
    considerations are growing more common place for some API providers to
    offer.
  image: ''
  tags: Plans
- building_block_id: internal
  type: Plans
  category: Elements
  sorttype: ''
  sortcat: ''
  name: Internal
  description: >-
    A set of resources are tailored specifically for internal consumption rather
    than for public or partner level access. Internal APIs, like public ones
    will usually have a portal available at an Internet URL, but will require
    additional access before you can see anything related to the API.
  image: ''
  tags: Plans
- building_block_id: partner
  type: Plans
  category: Elements
  sorttype: ''
  sortcat: ''
  name: Partner
  description: >-
    There is a focus on partner access to resources, resulting in separate
    access layers, and features dedicated to partner level consumption. While
    anyone accessing APIs can be considered a partner, these levels of access
    usually require much more vetting, making sure business objectives are in
    alignment, and legal obligations are met. Keeping partner access layers as
    transparent as possible helps keep harony with lower levels of public, or
    even internal API access.
  image: ''
  tags: Plans
- building_block_id: reseller
  type: Plans
  category: Elements
  sorttype: ''
  sortcat: ''
  name: Reseller
  description: >-
    There are reseller opportunities in place around resources available via the
    platform, that allow approved API consumers to access resources, as well as
    resell access to resources. Resellers are paid a fixed amount, or possibly
    percentages of sales of products and services, which could include accessing
    and usage of API resources.
  image: ''
  tags: Plans
- building_block_id: venture
  type: Plans
  category: Elements
  sorttype: ''
  sortcat: ''
  name: Venture
  description: >-
    There are venture opportunities around a platform and the resources
    available, allow for investments to be made, or possibly received. API
    portals are often used as idea incubation area, but some API providers are
    going further and allowing for direct investment via the platform, opening
    up the opportunity financially supporting of various aspects of API
    operations, and products within its ecosystem
  image: ''
  tags: Plans
- building_block_id: type
  type: Plans
  category: Elements
  sorttype: ''
  sortcat: ''
  name: Type
  description: >-
    Are there custom types of plans available, with a grouping dimension that
    goes beyond just the available plans. Thinking of plan types as a sort of
    categorization, allowing plans to be grouped by other dimensions, for more
    easily sharing with different groups. Think about separate between SaaS,
    developer, or possibly enterprise levels of access, and how plans can be
    organized by type.
  image: ''
  tags: Plans
- building_block_id: features
  type: Plans
  category: Elements
  sorttype: ''
  sortcat: ''
  name: Features
  description: >-
    Additional features, usually key / value pairs that can be used to describe
    addition elements of API access and consumption. The purpose of this
    research is to identify some of the common elements of how API providers
    plan their operations, and there will be a long tale of features that I do
    not capture--these are features.
  image: ''
  tags: Plans
- building_block_id: marketing
  type: Plans
  category: Elements
  sorttype: ''
  sortcat: ''
  name: Marketing
  description: >-
    Is a big part of API operations about driving marketing efforts for other
    aspects of business operations. Direct API access is not always the primary
    motivation for having an API, especially a public API. There are a number of
    ways to increase attention to products, services, as well as the overall
    corporate engine using APIs.  Acknowledging this across API planning is
    important to understanding the value generated by API consumption, beyond
    direct elements.
  image: ''
  tags: Plans
- building_block_id: branding
  type: Plans
  category: Elements
  sorttype: ''
  sortcat: ''
  name: Branding
  description: >-
    Is there a strong brand aspect to API operations, with clear guidelines,
    resources, and a presence for the companies brand. It is common to require
    API consumers to provide brand attribution on their site, and sometimes on
    web or mobile applications, as part of the API consumption contract.
    Branding should be reflected as an element for all public APIs, with details
    about different requirements for different plan levels.
  image: ''
  tags: Plans
- building_block_id: saas
  type: Plans
  category: Elements
  sorttype: ''
  sortcat: ''
  name: SaaS
  description: >-
    Is the API operations secondary to a strong SaaS focus for a platform. How
    does an API add value to a SaaS offering? Considering the relationship
    between an API, and how it can benefit end-users of the platform is
    important to establishing a stable plan that can benefit both sides of the
    operation in harmony.
  image: ''
  tags: Plans
- building_block_id: paas
  type: Plans
  category: Elements
  sorttype: ''
  sortcat: ''
  name: PaaS
  description: >-
    Is the API operations secondary to a strong PaaS focus for a platform. How
    does an API add value to a PaaS offering? Considering the relationship
    between an API, and how it can benefit end-users of the platform is
    important to establishing a stable plan that can benefit both sides of the
    operation in harmony.
  image: ''
  tags: Plans
- building_block_id: traffic
  type: Plans
  category: Elements
  sorttype: ''
  sortcat: ''
  name: Traffic
  description: >-
    Is a primary focus of an API platform centered around driving traffic to a
    web or mobile presence. If there is a solid business model around users
    accessing content or data, driving traffic through an API, without charging
    API consumers can be a successful approach.  How can API consumers be
    incentivized to drive more traffic to web and mobile properties, by
    extending the reach of the platform through APIs.
  image: ''
  tags: Plans
- building_block_id: content
  type: Plans
  category: Elements
  sorttype: ''
  sortcat: ''
  name: Content
  description: >-
    One of the primary objectives for API resources existing is in support of
    acquiring data and content that fuels platform operations. This is a very
    common element of successful API platforms that are operating today, such as
    Crunchbase or Angellist, or even Twitter and Tumblr. These are all examples
    of platforms where content acquisition is a core element of their API plans.
  image: ''
  tags: Plans
- building_block_id: devices
  type: Plans
  category: Elements
  sorttype: ''
  sortcat: ''
  name: Devices
  description: >-
    Situations where APIs are available in support of devices. You can see
    examples of this with Fitbit or Nest, where they API is just value-add to
    the devices, allowing 3rd parties to develop applications, and put content
    or data to use that is generated around the API. This is the layer of the
    API space that is expanding to what is often called Internet of Things
    (IoT).
  image: ''
  tags: Plans
- building_block_id: products
  type: Plans
  category: Elements
  sorttype: ''
  sortcat: ''
  name: Products
  description: >-
    An API primarily exists to support the existence, or drive the sales of
    another product, or product line. I separate out devices from this grouping,
    because they require separate attention. This could describe entire supply
    chain integration using APIs, all the way to affiliate or reseller style
    systems like used by Amazon. There are a number of ways products can be
    sold, by putting APIs to work.
  image: ''
  tags: Plans
- building_block_id: services
  type: Plans
  category: Elements
  sorttype: ''
  sortcat: ''
  name: Services
  description: >-
    API resources exist to support other related services, and act as value-add
    to the primary business focus. This is somewhat duplicate to SaaS or PaaS
    elements, but more likely is about the delivery of classic services like
    Uber, TaskRabbit, and other sharing economy solutions are focused on today.
    How is an API driving the demand of other services, that may not be software
    based, and bridge into the physical world.
  image: ''
  tags: Plans
- building_block_id: syndication
  type: Plans
  category: Elements
  sorttype: ''
  sortcat: ''
  name: Syndication
  description: >-
    API resources exist to encourage syndication of data, content, and other
    digital resources. How are APIs supporting the syndication of data and
    content to other public or private locations, something that may overlap
    with embeddedable aspects of API operations. APIs driven syndication can be
    seen in popular platforms like Twitter or Facebook.
  image: ''
  tags: Plans
- building_block_id: analytics
  type: Plans
  category: Elements
  sorttype: ''
  sortcat: ''
  name: Analytics
  description: >-
    A set of API resources exist to gather, refine, and organize data for the
    purpose of driving analytics. While these analytics might be also extended
    to API consumers, as well as end-users, one of the primary elements of API
    plans is to generate much needed data for use in analytics, increasing the
    value of a central, or even distribute resources.
  image: ''
  tags: Plans
- building_block_id: reporting
  type: Plans
  category: Elements
  sorttype: ''
  sortcat: ''
  name: Reporting
  description: >-
    A set of API resources exist to gather, refine, and organize data for the
    purpose of driving reporting efforts. Analytics is the intelligence, and
    reports is the distribution model. Using APIs to drive static, or even
    dynamic reports that can be published, printed, or delivered via dashboards.
  image: ''
  tags: Plans
- building_block_id: talent
  type: Plans
  category: Elements
  sorttype: ''
  sortcat: ''
  name: Talent
  description: >-
    API resources are focused on driving talent acquisition, or even placement
    with ecosystem related companies or as part of wider services. This could be
    in support of an actual recruitment platform, or could just be one aspect of
    what an API platform does to support talent needed internally, by partners,
    or even end-users of recruitment related services.
  image: ''
  tags: Plans
- building_block_id: security
  type: Plans
  category: Elements
  sorttype: ''
  sortcat: ''
  name: Security
  description: >-
    Access to API resources provide a security benefit, or are in support of
    other related security products and services. There should always be a base
    level of security to just keep a platform stable, but sometimes additional,
    or tighter security elements can be factored into the plan for overall
    platform operations. Security is an ever-increasing aspect of overall
    platform health and stability.
  image: ''
  tags: Plans
- building_block_id: terms-of-service
  type: Plans
  category: Elements
  sorttype: ''
  sortcat: ''
  name: Terms of Service
  description: >-
    API resources allow for the dynamic configuration of available terms of
    service that cover access and usage of resources. Terms of service will play
    a key role in defining every element of platforms, so it makes sense that it
    can be a variable used across API planning decisions, and even allow for it
    to be part of different levels of plans, allowing TOS to play variable
    roles, depending on which plan you exist in.
  image: ''
  tags: Plans
- building_block_id: governance
  type: Plans
  category: Elements
  sorttype: ''
  sortcat: ''
  name: Governance
  description: >-
    API resources are focused on governance related tasks within a company or
    possibly a wider industry. For APIs that operate in more heavily regulated
    spaces, governance will be a pretty big element of planning around APIs.
    Governance can be applied across API operations, and subject to variability
    depending on plan levels and partner tiers of access.
  image: ''
  tags: Plans
- building_block_id: donations
  type: Plans
  category: Elements
  sorttype: ''
  sortcat: ''
  name: Donations
  description: >-
    API resources allow for, or depend on donations as part of platform
    operations. Not all APIs will be operating for profit, and will require
    donations for all, or part of the operational budget. These donations might
    be large, or they might be smaller from individual API consumers, or
    possibly end-user groups that benefit from an APIs existence.
  image: ''
  tags: Plans
- building_block_id: grants
  type: Plans
  category: Elements
  sorttype: ''
  sortcat: ''
  name: Grants
  description: >-
    API resources exist because of grant related resources, which pay for their
    design, deployment or operations. Similar to donations, grants could be more
    formal funding opportunities for certain APIs that provide a civic or public
    good. Part of the goal in identifying this as a building block, is bringing
    more focus to the need of some APIs in this area, and drive more grant
    funding their way.
  image: ''
  tags: Plans
- building_block_id: advertising
  type: Plans
  category: Elements
  sorttype: ''
  sortcat: ''
  name: Advertising
  description: >-
    API resources exist in support of advertising related elements of platform
    operations, driving advertising, or possibly alleviating the need for
    advertising to be present. The purpose of the APIs might be directly tied to
    advertising, or be more about helping drive traffic, or attention to
    resources that depend on advertising for their revenue. This element is
    focused on how advertising is coupled to API planning, no matter how tight
    it is.
  image: ''
  tags: Plans
- building_block_id: api
  type: Plans
  category: Elements
  sorttype: ''
  sortcat: ''
  name: API
  description: >-
    There are APIs available to access all or part of the plans, pricing, or
    limitations around an API platform operations. The API platforms I track on
    that have been around the longest, and are the most mature, have APIs for
    consumers to use, that gives access to plan information, rate limits,
    pricing, and other aspects of API operations. I include this as essential,
    because it will be something every API provider will need to complete in the
    future.
  image: ''
  tags: Plans
- building_block_id: organization
  type: Plans
  category: Elements
  sorttype: ''
  sortcat: ''
  name: Organization
  description: >-
    There are organizational elements around API access and usage for API
    consumers to take advantage of. Are API plans organized by organization, or
    possibly specific access only for a specific group. How does user
    organizations, groups, and other ways to categorize API consumption applied
    at the API planning level?
  image: ''
  tags: Plans
- building_block_id: customization
  type: Plans
  category: Elements
  sorttype: ''
  sortcat: ''
  name: Customization
  description: >-
    There are customization opportunities around API plans, pricing, and rate
    limits, giving more control to consumers to customize their experience. For
    many plans, things may be fixed, but as you go further up the chain, into
    enterprise and partner level tiers, there may be opportunities for
    customization of plan elements, where other users do not have the
    opportunity.
  image: ''
  tags: Plans
- building_block_id: seconds
  type: Plans
  category: Timeframes
  sorttype: ''
  sortcat: ''
  name: Seconds
  description: >-
    Managing, guiding, and restricting plan entries in seconds. This is a common
    timeframe for considering rate limits, and judging the overall volume
    requirements of different users. Availability in seconds is often directly
    linked to compute resources being applied as part of operations, and tie in
    with overall availability.
  image: ''
  tags: Plans
- building_block_id: minutes
  type: Plans
  category: Timeframes
  sorttype: ''
  sortcat: ''
  name: Minutes
  description: >-
    Managing, guiding, and restricting plan entries in minutes. Like seconds
    this is a common timeframe for considering rate limits, and judging the
    overall volume requirements of different users. Availability in seconds is
    often directly linked to compute resources being applied as part of
    operations, and tie in with overall availability.
  image: ''
  tags: Plans
- building_block_id: hourly
  type: Plans
  category: Timeframes
  sorttype: ''
  sortcat: ''
  name: Hourly
  description: >-
    Managing, guiding, and restricting plan entries in hours. While there may be
    rate limits at the hourly level, this timeframe is more applied to resources
    that are on-demand and ephemeral, and can be consumed as needed, in a
    utility style that is becoming common way to plan API access.
  image: ''
  tags: Plans
- building_block_id: daily
  type: Plans
  category: Timeframes
  sorttype: ''
  sortcat: ''
  name: Daily
  description: >-
    Managing, guiding, and restricting plan entries in days. Like seconds and
    minutes this is a common timeframe for considering rate limits, and judging
    the overall volume requirements of different users. Availability in seconds
    is often directly linked to compute resources being applied as part of
    operations, and tie in with overall availability.
  image: ''
  tags: Plans
- building_block_id: weekly
  type: Plans
  category: Timeframes
  sorttype: ''
  sortcat: ''
  name: Weekly
  description: >-
    Managing, guiding, and restricting plan entries in weeks. This timeframe is
    more used to organizing billing and support cycles, organizing resource
    usage and services rendered within the weekly time period, and aligning
    billing, and other aspects to this timeframe.
  image: ''
  tags: Plans
- building_block_id: monthly
  type: Plans
  category: Timeframes
  sorttype: ''
  sortcat: ''
  name: Monthly
  description: >-
    Managing, guiding, and restricting plan entries in months. Like weekly, this
    timeframe is more used to organizing billing and support cycles, organizing
    resource usage and services rendered within the weekly time period, and
    aligning billing, and other aspects to this timeframe.
  image: ''
  tags: Plans
- building_block_id: quarterly
  type: Plans
  category: Timeframes
  sorttype: ''
  sortcat: ''
  name: Quarterly
  description: >-
    Managing, guiding, and restricting plan entries in quarters. Like monthly,
    and weekly, this timeframe is more used to organizing billing and support
    cycles, organizing resource usage and services rendered within the weekly
    time period, and aligning billing, and other aspects to this timeframe.
  image: ''
  tags: Plans
- building_block_id: annually
  type: Plans
  category: Timeframes
  sorttype: ''
  sortcat: ''
  name: Annually
  description: >-
    Managing, guiding, and restricting plan entries in years.  Like quarterly,
    monthly, and weekly, this timeframe is more used to organizing billing and
    support cycles, organizing resource usage and services rendered within the
    weekly time period, and aligning billing, and other aspects to this
    timeframe.
  image: ''
  tags: Plans
- building_block_id: access
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Access
  description: >-
    Where access to an API is on the table, and might not be publicly available,
    or part of all plans. Differing from API access as an element, this is about
    actually limiting entire APIs from various groups and plans, and allowing it
    to be metered as part of overall measurements.
  image: ''
  tags: Plans
- building_block_id: calls
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Calls
  description: 'The most fundamental metric for APIs, the API call.'
  image: ''
  tags: Plans
- building_block_id: value
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Value
  description: >-
    What is the value of an API or endpoint, is it simple 1, or maybe 10,
    allowing for multiple value settings.
  image: ''
  tags: Plans
- building_block_id: transaction
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Transaction
  description: >-
    Allow for the concept of transactions to exist which may span multiple API
    calls, moving a single concept forward.
  image: ''
  tags: Plans
- building_block_id: count
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Count
  description: >-
    Tracking by the count of something, could be API calls, files, or any other
    county of objects that are part of API operations.
  image: ''
  tags: Plans
- building_block_id: instances
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Instances
  description: >-
    Allowing for instances of resources that are available via an API platform,
    and can be used in different ways within existing plans.
  image: ''
  tags: Plans
- building_block_id: matches
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Matches
  description: >-
    Allowing for the measurement of API access in terms of when pre-defined
    matches are returned, rather than all of the results.
  image: ''
  tags: Plans
- building_block_id: message
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Message
  description: >-
    Charging per message rather than each API call that is required to prepare,
    send, or access messages.
  image: ''
  tags: Plans
- building_block_id: volume
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Volume
  description: >-
    Volume is used as a basic measurement of how consumers can access API,
    providing a standard set of pricing, as well as volume pricing.
  image: ''
  tags: Plans
- building_block_id: compute
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Compute
  description: Providing API resource access based upon various levels of compute power.
  image: ''
  tags: Plans
- building_block_id: load-balancing
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Load Balancing
  description: >-
    Measurement of resource usage, based upon the amount of load balancing that
    occurs.
  image: ''
  tags: Plans
- building_block_id: operating-system
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Operating System
  description: >-
    Measurement of resources, based upon the operating system for compute
    resources.
  image: ''
  tags: Plans
- building_block_id: storage
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Storage
  description: Measuring API resources based upon the size on the disk.
  image: ''
  tags: Plans
- building_block_id: uploads
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Uploads
  description: Restricting and measuring API access based upon the number of file uploads.
  image: ''
  tags: Plans
- building_block_id: upload-size
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Upload Size
  description: Restricting and measuring API access based upon file upload size.
  image: ''
  tags: Plans
- building_block_id: upload-speed
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Upload Speed
  description: Restricting and measuring API access based upon file upload speed.
  image: ''
  tags: Plans
- building_block_id: records
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Records
  description: Measuring API access based upon the number of records accessed or returned.
  image: ''
  tags: Plans
- building_block_id: containers
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Containers
  description: >-
    Measuring API access based upon the number of folders, buckets or virtual
    containers deployed.
  image: ''
  tags: Plans
- building_block_id: transcripts
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Transcripts
  description: Measuring API access based upon the transcripts generated.
  image: ''
  tags: Plans
- building_block_id: bandwidth
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Bandwidth
  description: Measuring API access based upon the amount of bandwidth used.
  image: ''
  tags: Plans
- building_block_id: connections
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Connections
  description: >-
    Measuring API access based upon the number of connections or threads made to
    resources.
  image: ''
  tags: Plans
- building_block_id: simulations
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Simulations
  description: Measuring API access based upon the number of simulations generated.
  image: ''
  tags: Plans
- building_block_id: transfers
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Transfers
  description: Measuring API access based upon the number of transfers that are executed.
  image: ''
  tags: Plans
- building_block_id: transfer-limits
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Transfer Limits
  description: Using the ability to change transfer limits as a metric in API consumption.
  image: ''
  tags: Plans
- building_block_id: sync
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Sync
  description: >-
    Measurement for API consumption based upon the number of syncs that are
    exected.
  image: ''
  tags: Plans
- building_block_id: conversions
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Conversions
  description: >-
    Measurement for API consumption based upon the number of conversions that
    are executed.
  image: ''
  tags: Plans
- building_block_id: syndication
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Syndication
  description: Measurement for API consumption based upon how much syndication occurs.
  image: ''
  tags: Plans
- building_block_id: connectors
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Connectors
  description: >-
    Measuring API access baed upon the number of connectors that are employed,
    or part of account access.
  image: ''
  tags: Plans
- building_block_id: relationships
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Relationships
  description: >-
    Measuring API access baed upon the number of relationships between users and
    objects that are established or accessed.
  image: ''
  tags: Plans
- building_block_id: migrations
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Migrations
  description: Measurement of API accessed based upon the number of migrations that occur.
  image: ''
  tags: Plans
- building_block_id: archives
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Archives
  description: >-
    Measurement of API accessed based upon the number of archives that are
    created.
  image: ''
  tags: Plans
- building_block_id: rollback
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Rollback
  description: >-
    Measurement of API accessed based upon the number of rollbacks that are
    executed.
  image: ''
  tags: Plans
- building_block_id: tasks
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Tasks
  description: >-
    Using the number of tasks that are started or completed as a measurement of
    API access.
  image: ''
  tags: Plans
- building_block_id: events
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Events
  description: >-
    Measuring of API consumption based upon the number of events that occur or
    are triggered.
  image: ''
  tags: Plans
- building_block_id: trainings
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Trainings
  description: Measurement based upon the number of trainings that occur around API access.
  image: ''
  tags: Plans
- building_block_id: maintenance
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Maintenance
  description: >-
    Measuring maintenance events that occur, and affecting API consumption based
    upon.
  image: ''
  tags: Plans
- building_block_id: latency
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Latency
  description: >-
    Measuring the latency that occurs as part of API access, and allowing it to
    impact API consumption plans.
  image: ''
  tags: Plans
- building_block_id: performance
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Performance
  description: Using performance as a consideration when measuring API consumption.
  image: ''
  tags: Plans
- building_block_id: users
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Users
  description: >-
    Using the number of users as a metric when it comes to planning, and pricing
    adjustments.
  image: ''
  tags: Plans
- building_block_id: media
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Media
  description: >-
    Measuring specifically media related considerations as part of API
    consumption tracking.
  image: ''
  tags: Plans
- building_block_id: scan
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Scan
  description: >-
    Measure the scanning of a physical or digital object involved in API
    operations.
  image: ''
  tags: Plans
- building_block_id: support
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Support
  description: >-
    Directly using support elements as a consideration in API resource planning
    and consumption.
  image: ''
  tags: Plans
- building_block_id: fees
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Fees
  description: >-
    Fees that are used as part of API accounts, and consumption, and applied as
    part of API plans.
  image: ''
  tags: Plans
- building_block_id: percentages
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Percentages
  description: >-
    The application of various percentages as part of measuring API consumption,
    and plan operation.
  image: ''
  tags: Plans
- building_block_id: consulting
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Consulting
  description: >-
    Factoring in hourly consulting as part of API consumption, and plan
    operations.
  image: ''
  tags: Plans
- building_block_id: priority
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Priority
  description: >-
    Providing the option of being prioritized in API requests and responses, and
    measured as part of overall planning.
  image: ''
  tags: Plans
- building_block_id: groups
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Groups
  description: >-
    API access adjusted based upon grouping, or group level access which is
    aside from standard plans.
  image: ''
  tags: Plans
- building_block_id: zone
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Zone
  description: >-
    Another form of grouping API access, into zones, allowing consumers to
    access and use resources by zone.
  image: ''
  tags: Plans
- building_block_id: memory
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Memory
  description: >-
    Allowing for the measurement of resource access to be determined by the
    amount of memory available or consumed.
  image: ''
  tags: Plans
- building_block_id: health
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Health
  description: >-
    Factoring in health checks in API consumption, and charging specifically on
    health checks, or changing plans based upon health results.
  image: ''
  tags: Plans
- building_block_id: encryption
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Encryption
  description: >-
    Considering the existence of, or strength of encryption as part of the API
    consumption process.
  image: ''
  tags: Plans
- building_block_id: characters
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Characters
  description: >-
    Counting of textual characters as part of the overall API consumption
    tracking process.
  image: ''
  tags: Plans
- building_block_id: agent
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Agent
  description: >-
    Tracking on physical or virtual access to human agents as part of API
    consumption.
  image: ''
  tags: Plans
- building_block_id: price-per
  type: Plans
  category: Metrics
  sorttype: ''
  sortcat: ''
  name: Price Per
  description: >-
    Considering a price per a specific amount of API calls or other metric being
    applied as part of API consumption.
  image: ''
  tags: Plans
- building_block_id: overview
  type: Plans
  category: Geo
  sorttype: ''
  sortcat: ''
  name: Overview
  description: >-
    Providing an overview of what geographic regions are covered or available as
    part of API consumption.
  image: ''
  tags: Plans
- building_block_id: country
  type: Plans
  category: Geo
  sorttype: ''
  sortcat: ''
  name: Country
  description: Providing API access or replication within specific countries.
  image: ''
  tags: Plans
- building_block_id: region
  type: Plans
  category: Geo
  sorttype: ''
  sortcat: ''
  name: Region
  description: Providing API access or replication within specific regions.
  image: ''
  tags: Plans
- building_block_id: onpremise
  type: Plans
  category: Geo
  sorttype: ''
  sortcat: ''
  name: On-Premise
  description: >-
    Providing API deployment locally or within existing infrastructure,
    providing on-premise access levels.
  image: ''
  tags: Plans
- building_block_id: colocation
  type: Plans
  category: Geo
  sorttype: ''
  sortcat: ''
  name: Co-Location
  description: Allowing for access of API resources via colocated facilities.
  image: ''
  tags: Plans
- building_block_id: charts
  type: Plans
  category: Limits
  sorttype: ''
  sortcat: ''
  name: Charts
  description: Providing a chart with a listing of all endpoints and limits for each one.
  image: ''
  tags: Plans
- building_block_id: overview
  type: Plans
  category: Limits
  sorttype: ''
  sortcat: ''
  name: Overview
  description: >-
    A single page which provides an overview of limits that are in place on API
    operations.
  image: ''
  tags: Plans
- building_block_id: inline
  type: Plans
  category: Limits
  sorttype: ''
  sortcat: ''
  name: Inline
  description: >-
    Providing information about rate limits inline, either within documentation
    or available within API response details.
  image: ''
  tags: Plans
- building_block_id: range
  type: Plans
  category: Limits
  sorttype: ''
  sortcat: ''
  name: Range
  description: >-
    Considering a range of values when measuring API consumption, and evaluating
    plan level access.
  image: ''
  tags: Plans
- building_block_id: resources
  type: Plans
  category: Limits
  sorttype: ''
  sortcat: ''
  name: Resources
  description: >-
    Limits are place upon specific endpoints or verbs, providing granular
    controls over API resources.
  image: ''
  tags: Plans
- building_block_id: increased
  type: Plans
  category: Limits
  sorttype: ''
  sortcat: ''
  name: Increased
  description: >-
    Opportunities for increasing rate limits either by changing plans, or simply
    requesting limits to be raised.
  image: ''
  tags: Plans
- building_block_id: unlimited
  type: Plans
  category: Limits
  sorttype: ''
  sortcat: ''
  name: Unlimited
  description: 'The ability to overcome limits, and achieve unlimited access to resources.'
  image: ''
  tags: Plans
- building_block_id: service-level-agreement-sla
  type: Plans
  category: Limits
  sorttype: ''
  sortcat: ''
  name: Service Level Agreement (SLA)
  description: >-
    A service level agreement (SLA) is applied as part of API operations as a
    whole, or as part of particular plans.
  image: ''
  tags: Plans
- building_block_id: api
  type: Plans
  category: Limits
  sorttype: ''
  sortcat: ''
  name: API
  description: >-
    There is an API specifically for accessing limitations around API resources
    for API consumers to use.
  image: ''
  tags: Plans
- building_block_id: endpoints
  type: Plans
  category: Resources
  sorttype: ''
  sortcat: ''
  name: Endpoints
  description: >-
    Providing access constraints based specifically on API endpoints allowing
    granular controls over each available resource.
  image: ''
  tags: Plans
- building_block_id: verbs
  type: Plans
  category: Resources
  sorttype: ''
  sortcat: ''
  name: Verbs
  description: >-
    Allowing access controls applied down to the HTTP verb level, providing
    granular controls for GET, POST, PUT, DELETE, and other dimensions of
    resources.
  image: ''
  tags: Plans
- building_block_id: addons
  type: Plans
  category: Extensions
  sorttype: ''
  sortcat: ''
  name: Add-Ons
  description: >-
    Factoring the availability of add-ons into specific API plans or overall API
    operations.
  image: ''
  tags: Plans
- building_block_id: connectors
  type: Plans
  category: Extensions
  sorttype: ''
  sortcat: ''
  name: Connectors
  description: >-
    Factoring the availability of 3rd party or internal platform connections
    into specific API plans or overall API operations.
  image: ''
  tags: Plans
- building_block_id: developer-portal
  type: Portal
  category: Portal
  sorttype: ''
  sortcat: ''
  name: Developer Portal
  description: A developer portal for the API
  image: ''
  tags: Portal
- building_block_id: permitted-and-prohibited-uses
  type: Privacy
  category: Usage of Service
  sorttype: ''
  sortcat: ''
  name: Permitted and Prohibited Uses
  description: >-
    What are the permitted uses of data and content made available via the APIs,
    and what are some of the common prohibited uses that impact the
  image: ''
  tags: Privacy
- building_block_id: privacy-policy-page
  type: Privacy
  category: Overview
  sorttype: ''
  sortcat: ''
  name: Privacy Policy Page
  description: >-
    Providing a single page dedicated to providing a listing of elements that
    impact privacy for developers and end-users.
  image: ''
  tags: ''
- building_block_id: use-of-personally-identifiable-information
  type: Privacy
  category: Data & Information
  sorttype: ''
  sortcat: ''
  name: Use of Personally Identifiable Information
  description: >-
    Linking to the same area in terms of service, how is privacy considered when
    personally identifiable information is put to use. Lay out what is
    considered in this area.
  image: ''
  tags: Privacy
- building_block_id: user-submissions
  type: Privacy
  category: Data & Information
  sorttype: ''
  sortcat: ''
  name: User Submissions
  description: >-
    What is the general view of user submissions, and user generated content and
    data. Is it core to platform operations, and what is the general tone of
    users and API consumers access and ownership of this exhaust.
  image: ''
  tags: Privacy
- building_block_id: user-discussion-lists-and-forums
  type: Privacy
  category: Data & Information
  sorttype: ''
  sortcat: ''
  name: User Discussion Lists and Forums
  description: >-
    What privacy considerations have been made around discussion lists and
    forums operated by the platform? What data is stored? How is the privacy of
    users addressed?
  image: ''
  tags: Privacy
- building_block_id: license
  type: Privacy
  category: Legal Department
  sorttype: ''
  sortcat: ''
  name: License
  description: >-
    What licensing considerations are there that could potentially impact the
    privacy of platform owners, consumers, and end-users.
  image: ''
  tags: Privacy
- building_block_id: intellectual-property-rights
  type: Privacy
  category: Legal Department
  sorttype: ''
  sortcat: ''
  name: Intellectual Property Rights
  description: >-
    Where does intellectual property rights come into play, that could
    potentially impact the privacy of platform owners, consumers, and end-users.
  image: ''
  tags: Privacy
- building_block_id: liability
  type: Privacy
  category: Legal Department
  sorttype: ''
  sortcat: ''
  name: Liability
  description: >-
    What is the liability assumed by the platform, or possibly consumers, and
    end-users when it comes to platform operations, in the area of privacy.
  image: ''
  tags: Privacy
- building_block_id: warranty-disclaimer
  type: Privacy
  category: Legal Department
  sorttype: ''
  sortcat: ''
  name: Warranty Disclaimer
  description: >-
    A disclaimer is a defensive measure, used generally with the purpose of
    protection from unwanted claims or liability. A platform may disclaim
    responsibility for loss or damage to a customer's Personal Property, or a
    disclaimer clause in a contract might set forth certain promises and deny
    all other promises or responsibilities.
  image: ''
  tags: Privacy
- building_block_id: technical-requirements-and-limitations
  type: Privacy
  category: Technical Details
  sorttype: ''
  sortcat: ''
  name: Technical Requirements and Limitations
  description: >-
    What are the technical requirements and limitations that impact the privacy
    of platform owners, consumers, and end-users.
  image: ''
  tags: Privacy
- building_block_id: links-to-other-materials
  type: Privacy
  category: Site Linkage
  sorttype: ''
  sortcat: ''
  name: Links to Other Materials
  description: >-
    What are the privacy considerations when external sites and materials are
    linked to.
  image: ''
  tags: Privacy
- building_block_id: termination
  type: Privacy
  category: Platform Changes
  sorttype: ''
  sortcat: ''
  name: Termination
  description: >-
    What privacy considerations are taken when accounts are terminated. Can
    users, and API consumers terminate their relationship and assume that
    privacy is respected.
  image: ''
  tags: Privacy
- building_block_id: changes
  type: Privacy
  category: Platform Changes
  sorttype: ''
  sortcat: ''
  name: Changes
  description: >-
    How may changes to the platform, APIs, and how data is collected and stored
    that may impact privacy.
  image: ''
  tags: Privacy
- building_block_id: real-time-page
  type: Real Time
  category: Overview
  sorttype: ''
  sortcat: ''
  name: Real Time Page
  description: >-
    Providing a single page dedicated to information about real time tooling,
    processes, and other resources that contribute to the real time experience.
  image: ''
  tags: ''
- building_block_id: simple-or-streaming-text-orientated-messaging-protocol-stomp
  type: Real Time
  category: Technology
  sorttype: ''
  sortcat: ''
  name: Simple (or Streaming) Text Orientated Messaging Protocol (STOMP)
  description: >-
    STOMP is the Simple (or Streaming) Text Orientated Messaging Protocol. STOMP
    provides an interoperable wire format so that STOMP clients can communicate
    with any STOMP message broker to provide easy and widespread messaging
    interoperability among many languages, platforms and brokers.
  image: ''
  tags: Real Time
- building_block_id: advanced-message-queuing-protocol-amqp
  type: Real Time
  category: Technology
  sorttype: ''
  sortcat: ''
  name: Advanced Message Queuing Protocol (AMQP)
  description: >-
    The Advanced Message Queuing Protocol (AMQP) is an open standard for passing
    business messages between applications or organizations.  It connects
    systems, feeds business processes with the information they need and
    reliably transmits onward the instructions that achieve their goals.
  image: ''
  tags: Real Time
- building_block_id: mqtt
  type: Real Time
  category: Technology
  sorttype: ''
  sortcat: ''
  name: MQTT
  description: >-
    MQTT is a machine-to-machine (M2M)/Internet of Things connectivity protocol.
    It was designed as an extremely lightweight publish/subscribe messaging
    transport. It is useful for connections with remote locations where a small
    code footprint is required and/or network bandwidth is at a premium.
  image: ''
  tags: Real Time
- building_block_id: rss
  type: Real Time
  category: Technology
  sorttype: ''
  sortcat: ''
  name: RSS
  description: >-
    RSS (Rich Site Summary; originally RDF Site Summary; often called Really
    Simple Syndication) uses a family of standard web feed formats to publish
    frequently updated information: blog entries, news headlines, audio, video.
    An RSS document (called feed, web feed, or channel) includes full or
    summarized text, and metadata, like publishing date and author's name.
  image: ''
  tags: Real Time
- building_block_id: atom
  type: Real Time
  category: Technology
  sorttype: ''
  sortcat: ''
  name: Atom
  description: >-
    The name Atom applies to a pair of related Web standards. The Atom
    Syndication Format is an XML language used for web feeds, while the Atom
    Publishing Protocol (AtomPub or APP) is a simple HTTP-based protocol for
    creating and updating web resources.
  image: ''
  tags: Real Time
- building_block_id: json
  type: Real Time
  category: Technology
  sorttype: ''
  sortcat: ''
  name: JSON
  description: >-
    JSON (JavaScript Object Notation) is a lightweight data-interchange format.
    It is easy for humans to read and write. It is easy for machines to parse
    and generate.
  image: ''
  tags: Real Time
- building_block_id: openwire
  type: Real Time
  category: Technology
  sorttype: ''
  sortcat: ''
  name: OpenWire
  description: >-
    OpenWire is our cross language Wire Protocol to allow native access to
    ActiveMQ from a number of different languages and platforms. The Java
    OpenWire transport is the default transport in ActiveMQ 4.x or later.
  image: ''
  tags: Real Time
- building_block_id: webhooks
  type: Real Time
  category: Technology
  sorttype: ''
  sortcat: ''
  name: Webhooks
  description: >-
    A webhook in web development is a method of augmenting or altering the
    behavior of a web page, or web application, with custom callbacks. These
    callbacks may be maintained, modified, and managed by third-party users and
    developers who may not necessarily be affiliated with the originating
    website or application.
  image: ''
  tags: Real Time
- building_block_id: websockets
  type: Real Time
  category: Technology
  sorttype: ''
  sortcat: ''
  name: Websockets
  description: >-
    WebSocket is a protocol providing full-duplex communication channels over a
    single TCP connection. The WebSocket protocol was standardized by the IETF
    as RFC 6455 in 2011, and the WebSocket API in Web IDL is being standardized
    by the W3C.
  image: ''
  tags: Real Time
- building_block_id: extensible-messaging-and-presence-protocol-xmpp
  type: Real Time
  category: Technology
  sorttype: ''
  sortcat: ''
  name: Extensible Messaging and Presence Protocol (XMPP)
  description: >-
    XMPP is the Extensible Messaging and Presence Protocol, a set of open
    technologies for instant messaging, presence, multi-party chat, voice and
    video calls, collaboration, lightweight middleware, content syndication, and
    generalized routing of XML data.
  image: ''
  tags: Real Time
- building_block_id: sockjs
  type: Real Time
  category: Technology
  sorttype: ''
  sortcat: ''
  name: SockJS
  description: >-
    SockJS is a browser JavaScript library that provides a WebSocket-like
    object. SockJS gives you a coherent, cross-browser, Javascript API which
    creates a low latency, full duplex, cross-domain communication channel
    between the browser and the web server.
  image: ''
  tags: Real Time
- building_block_id: pubsubhubbub
  type: Real Time
  category: Technology
  sorttype: ''
  sortcat: ''
  name: PubSubHubbub
  description: >-
    PubSubHubbub is an open protocol for distributed publish/subscribe
    communication on the Internet. Initially designed to extend the Atom (and
    RSS) protocols for data feeds, the protocol can be applied to any data type
    (e.g. HTML, text, pictures, audio, video) as long as it is accessible via
    HTTP. Its main purpose is to provide real-time notifications of changes,
    which improves upon the typical situation where a client periodically polls
    the feed server at some arbitrary interval. In this way, PubSubHubbub
    provides pushed HTTP notifications without requiring clients to spend
    resources on polling for changes.
  image: ''
  tags: Real Time
- building_block_id: protocol-buffers
  type: Real Time
  category: Technology
  sorttype: ''
  sortcat: ''
  name: Protocol Buffers
  description: >-
    Protocol buffers are Google's language-neutral, platform-neutral, extensible
    mechanism for serializing structured data – think XML, but smaller, faster,
    and simpler. You define how you want your data to be structured once, then
    you can use special generated source code to easily write and read your
    structured data to and from a variety of data streams and using a variety of
    languages.
  image: ''
  tags: Real Time
- building_block_id: real-time-streaming-protocol-rtsp
  type: Real Time
  category: Technology
  sorttype: ''
  sortcat: ''
  name: Real Time Streaming Protocol (RTSP)
  description: >-
    The Real Time Streaming Protocol (RTSP) is a network control protocol
    designed for use in entertainment and communications systems to control
    streaming media servers. The protocol is used for establishing and
    controlling media sessions between end points. Clients of media servers
    issue VCR-style commands, such as play and pause, to facilitate real-time
    control of playback of media files from the server.
  image: ''
  tags: Real Time
- building_block_id: hypertext-transfer-protocol-http
  type: Real Time
  category: Technology
  sorttype: ''
  sortcat: ''
  name: Hypertext Transfer Protocol (HTTP)
  description: >-
    The Hypertext Transfer Protocol (HTTP) is an application protocol for
    distributed, collaborative, hypermedia information systems.[1] HTTP is the
    foundation of data communication for the World Wide Web.
  image: ''
  tags: Real Time
- building_block_id: transmission-control-protocol-tcp
  type: Real Time
  category: Technology
  sorttype: ''
  sortcat: ''
  name: Transmission Control Protocol (TCP)
  description: >-
    The Transmission Control Protocol (TCP) is a core protocol of the Internet
    protocol suite. It originated in the initial network implementation in which
    it complemented the Internet Protocol (IP). Therefore, the entire suite is
    commonly referred to as TCP/IP. TCP provides reliable, ordered, and
    error-checked delivery of a stream of octets between applications running on
    hosts communicating over an IP network.
  image: ''
  tags: Real Time
- building_block_id: user-datagram-protocol-udp
  type: Real Time
  category: Technology
  sorttype: ''
  sortcat: ''
  name: User Datagram Protocol (UDP)
  description: >-
    The User Datagram Protocol (UDP) is one of the core members of the Internet
    protocol suite. The protocol was designed by David P. Reed in 1980 and
    formally defined in RFC 768. UDP uses a simple connectionless transmission
    model with a minimum of protocol mechanism. It has no handshaking dialogues,
    and thus exposes the user's program to any unreliability of the underlying
    network protocol. There is no guarantee of delivery, ordering, or duplicate
    protection. UDP provides checksums for data integrity, and port numbers for
    addressing different functions at the source and destination of the
    datagram.
  image: ''
  tags: Real Time
- building_block_id: ftp
  type: Real Time
  category: Technology
  sorttype: ''
  sortcat: ''
  name: FTP
  description: >-
    The File Transfer Protocol (FTP) is a standard network protocol used to
    transfer computer files between a client and server on a computer network.
    FTP is built on a client-server model architecture and uses separate control
    and data connections between the client and the server.[1] FTP users may
    authenticate themselves with a clear-text sign-in protocol, normally in the
    form of a username and password, but can connect anonymously if the server
    is configured to allow it.
  image: ''
  tags: Real Time
- building_block_id: simple-mail-transfer-protocol-smtp
  type: Real Time
  category: Technology
  sorttype: ''
  sortcat: ''
  name: Simple Mail Transfer Protocol (SMTP)
  description: >-
    Simple Mail Transfer Protocol (SMTP) is an Internet standard for electronic
    mail (email) transmission. First defined by RFC 821 in 1982, it was last
    updated in 2008 with the Extended SMTP additions by RFC 5321—which is the
    protocol in widespread use today. SMTP by default uses TCP port 25.
  image: ''
  tags: Real Time
- building_block_id: serversent-events
  type: Real Time
  category: Technology
  sorttype: ''
  sortcat: ''
  name: Server-Sent Events
  description: >-
    Server-sent events (SSE) is a technology where a browser receives automatic
    updates from a server via HTTP connection. The Server-Sent Events
    EventSource API is standardized as part of HTML5 by the W3C.
  image: ''
  tags: Real Time
- building_block_id: http-live-streaming-hls
  type: Real Time
  category: Technology
  sorttype: ''
  sortcat: ''
  name: HTTP Live Streaming (HLS)
  description: >-
    HTTP Live Streaming (also known as HLS) is an HTTP-based media streaming
    communications protocol implemented by Apple Inc. as part of its QuickTime,
    Safari, OS X, and iOS software.
  image: ''
  tags: Real Time
- building_block_id: http-long-polling
  type: Real Time
  category: Technology
  sorttype: ''
  sortcat: ''
  name: HTTP Long Polling
  description: >-
    HTTP long polling, where the client polls the server requesting new
    information.  The server holds the request open until new data is available.
    Once available, the server responds and sends the new information. When the
    client receives the new information, it immediately sends another request,
    and the operation is repeated. This effectively emulates a server push
    feature.
  image: ''
  tags: Real Time
- building_block_id: presence
  type: Real Time
  category: Features
  sorttype: ''
  sortcat: ''
  name: Presence
  description: >-
    Presence provides information on when a user has joined or left a channel,
    who, and how many, users are subscribed to a particular channel, which
    channel(s) an individual user is subscribed to associated state information
    for these users, which may include latitude / longitude, typing status, and
    more.
  image: ''
  tags: Real Time
- building_block_id: push-notifications
  type: Real Time
  category: Features
  sorttype: ''
  sortcat: ''
  name: Push Notifications
  description: >-
    Push notifications let your application notify a user of new messages or
    events even when the user is not actively using your application. On Android
    devices, when a device receives a push notification, your application's icon
    and a message appear in the status bar.
  image: ''
  tags: Real Time
- building_block_id: messaging
  type: Real Time
  category: Features
  sorttype: ''
  sortcat: ''
  name: Messaging
  description: >-
    Approaches to enabling messaging for users from custom formats, to SMTP,
    XMPP chat, and any other way of sending messages back and forth between
    clients.
  image: ''
  tags: Real Time
- building_block_id: chat
  type: Real Time
  category: Features
  sorttype: ''
  sortcat: ''
  name: Chat
  description: >-
    Providing a always on experience when messaging, establishing presence
    awareness of each user that is part of a conversation.
  image: ''
  tags: Real Time
- building_block_id: groups
  type: Real Time
  category: Features
  sorttype: ''
  sortcat: ''
  name: Groups
  description: >-
    Allow users and applications to be put into lists, allowing real time
    features to participants of these groups.
  image: ''
  tags: Real Time
- building_block_id: search
  type: Real Time
  category: Features
  sorttype: ''
  sortcat: ''
  name: Search
  description: >-
    Providing search features, allowing the real time search of users, messages,
    and other data or content.
  image: ''
  tags: Real Time
- building_block_id: scheduling
  type: Real Time
  category: Features
  sorttype: ''
  sortcat: ''
  name: Scheduling
  description: >-
    Offering the ability to schedule messages, jobs, and other events, and allow
    triggering of them on defined schedules.
  image: ''
  tags: Real Time
- building_block_id: multilingual
  type: Real Time
  category: Features
  sorttype: ''
  sortcat: ''
  name: Multi-Lingual
  description: >-
    Providing default multi-lingual support, either natively or through real
    time translation.
  image: ''
  tags: Real Time
- building_block_id: offline
  type: Real Time
  category: Features
  sorttype: ''
  sortcat: ''
  name: Offline
  description: >-
    Provide graceful degradation of services when their is no network
    connection, allowing for seamless on and offline transitions.
  image: ''
  tags: Real Time
- building_block_id: java-authentication-and-authorization-service-jaas
  type: Real Time
  category: Authentication
  sorttype: ''
  sortcat: ''
  name: Java Authentication and Authorization Service (JaaS)
  description: >-
    Java Authentication and Authorization Service, or JAAS, pronounced Jazz, is
    the Java implementation of the standard Pluggable Authentication Module
    (PAM) information security framework. JAAS was introduced as an extension
    library to the Java Platform, Standard Edition 1.3 and was integrated in
    version 1.4.
  image: ''
  tags: Real Time
- building_block_id: aclbased-authorization
  type: Real Time
  category: Authentication
  sorttype: ''
  sortcat: ''
  name: ACL-Based Authorization
  description: >-
    An access control list (ACL), with respect to a computer file system, is a
    list of permissions attached to an object. An ACL specifies which users or
    system processes are granted access to objects, as well as what operations
    are allowed on given objects.[1] Each entry in a typical ACL specifies a
    subject and an operation. For instance, if a file object has an ACL that
    contains (Alice: read,write; Bob: read), this would give Alice permission to
    read and write the file and Bob to only read it.
  image: ''
  tags: Real Time
- building_block_id: transport-layer-security-tls--secure-sockets-layer-ssl
  type: Real Time
  category: Security
  sorttype: ''
  sortcat: ''
  name: Transport Layer Security (TLS) & Secure Sockets Layer (SSL)
  description: >-
    Transport Layer Security (TLS) and its predecessor, Secure Sockets Layer
    (SSL), both of which are frequently referred to as 'SSL', are cryptographic
    protocols designed to provide communications security over a computer
    network.
  image: ''
  tags: Real Time
- building_block_id: security-rules-language
  type: Real Time
  category: Security
  sorttype: ''
  sortcat: ''
  name: Security Rules Language
  description: >-
    Firebase provides a flexible, expression-based rules language with
    JavaScript-like syntax to easily define how your data should be structured
    and when your data can be read from and written to. Combined with our login
    service which allows for easy authentication, you can define who has access
    to what data and keep all of your user's personal information secure. The
    Security and Firebase Rules live on the Firebase servers and are
    automatically enforced at all times.
  image: ''
  tags: Real Time
- building_block_id: analytics
  type: Real Time
  category: Management
  sorttype: ''
  sortcat: ''
  name: Analytics
  description: >-
    Providing analytics on all activity via account(s), allowing users to review
    their usage in a visual way.
  image: ''
  tags: Real Time
- building_block_id: deep-linking
  type: Real Time
  category: Management
  sorttype: ''
  sortcat: ''
  name: Deep Linking
  description: >-
    Deep linking is the use of a hyperlink that links to a specific, generally
    searchable or indexed, piece of web content on a website.
  image: ''
  tags: Real Time
- building_block_id: logging
  type: Real Time
  category: Management
  sorttype: ''
  sortcat: ''
  name: Logging
  description: >-
    Allow the logging of all activity that occurs, and access by end users and
    developers.
  image: ''
  tags: Real Time
- building_block_id: rate-limiting
  type: Real Time
  category: Management
  sorttype: ''
  sortcat: ''
  name: Rate Limiting
  description: >-
    Provide tools for controlling the rate limits of activities on a platform,
    via a number of different mechanisms.
  image: ''
  tags: Real Time
- building_block_id: debugging
  type: Real Time
  category: Management
  sorttype: ''
  sortcat: ''
  name: Debugging
  description: >-
    Offering debugging tools to assist developers when they are building
    applications using real time technology.
  image: ''
  tags: Real Time
- building_block_id: statistics
  type: Real Time
  category: Management
  sorttype: ''
  sortcat: ''
  name: Statistics
  description: >-
    Providing statistical information about how API resources are being consumed
    in a client.
  image: ''
  tags: Real Time
- building_block_id: geofencing
  type: Real Time
  category: Geo
  sorttype: ''
  sortcat: ''
  name: Geofencing
  description: >-
    A geofence is a virtual barrier. Programs that incorporate geo-fencing allow
    an administrator to set up triggers so when a device enters (or exits) the
    boundaries defined by the administrator, a text message or email alert is
    sent.
  image: ''
  tags: Real Time
- building_block_id: geolocation
  type: Real Time
  category: Geo
  sorttype: ''
  sortcat: ''
  name: GeoLocation
  description: >-
    Geolocation is the identification of the real-world geographic location of
    an object, such as a radar source, mobile phone or Internet-connected
    computer terminal. Geolocation may refer to the practice of assessing the
    location, or to the actual assessed location.
  image: ''
  tags: Real Time
- building_block_id: beacon
  type: Real Time
  category: Geo
  sorttype: ''
  sortcat: ''
  name: Beacon
  description: >-
    A beacon is an intentionally conspicuous device designed to attract
    attention to a specific location. Beacons can also be combined with
    semaphoric or other indicators to provide important information, such as the
    status of an airport, by the color and rotational pattern of its airport
    beacon, or of pending weather as indicated on a weather beacon mounted at
    the top of a tall building or similar site. When used in such fashion,
    beacons can be considered a form of optical telegraphy.
  image: ''
  tags: Real Time
- building_block_id: proxy
  type: Real Time
  category: Architecture
  sorttype: ''
  sortcat: ''
  name: Proxy
  description: >-
    A proxy server is a server (a computer system or an application) that acts
    as an intermediary for requests from clients seeking resources from other
    servers.
  image: ''
  tags: Real Time
- building_block_id: compute
  type: Real Time
  category: Architecture
  sorttype: ''
  sortcat: ''
  name: Compute
  description: >-
    Providing cloud compute infrastructure to accompany and support real time
    technology.
  image: ''
  tags: Real Time
- building_block_id: containers
  type: Real Time
  category: Architecture
  sorttype: ''
  sortcat: ''
  name: Containers
  description: >-
    Providing container virtualization infrastructure to accompany and support
    real time technology.
  image: ''
  tags: Real Time
- building_block_id: database
  type: Real Time
  category: Architecture
  sorttype: ''
  sortcat: ''
  name: Database
  description: >-
    Providing database infrastructure to accompany and support real time
    technology.
  image: ''
  tags: Real Time
- building_block_id: storage
  type: Real Time
  category: Architecture
  sorttype: ''
  sortcat: ''
  name: Storage
  description: >-
    Providing cloud storage infrastructure to accompany and support real time
    technology.
  image: ''
  tags: Real Time
- building_block_id: content-delivery-network-cdn
  type: Real Time
  category: Architecture
  sorttype: ''
  sortcat: ''
  name: Content Delivery Network (CDN)
  description: >-
    Providing content deliver network (CDN) infrastructure to accompany and
    support real time technology.
  image: ''
  tags: Real Time
- building_block_id: caching
  type: Real Time
  category: Architecture
  sorttype: ''
  sortcat: ''
  name: Caching
  description: >-
    Providing caching infrastructure to accompany and support real time
    technology.
  image: ''
  tags: Real Time
- building_block_id: compression
  type: Real Time
  category: Architecture
  sorttype: ''
  sortcat: ''
  name: Compression
  description: >-
    Providing request and response compression infrastructure to accompany and
    support real time technology.
  image: ''
  tags: Real Time
- building_block_id: open-source
  type: Real Time
  category: Architecture
  sorttype: ''
  sortcat: ''
  name: Open Source
  description: Providing open source tooling to accompany and support real time technology.
  image: ''
  tags: Real Time
- building_block_id: dns
  type: Real Time
  category: Architecture
  sorttype: ''
  sortcat: ''
  name: DNS
  description: Providing DNS infrastructure to accompany and support real time technology.
  image: ''
  tags: Real Time
- building_block_id: android
  type: Real Time
  category: SDK
  sorttype: ''
  sortcat: ''
  name: Android
  description: Providing an Android SDK for mobile developers to put to use.
  image: ''
  tags: Real Time
- building_block_id: ios
  type: Real Time
  category: SDK
  sorttype: ''
  sortcat: ''
  name: IOS
  description: Providing an IOS SDK for mobile developers to put to use.
  image: ''
  tags: Real Time
- building_block_id: javascript
  type: Real Time
  category: SDK
  sorttype: ''
  sortcat: ''
  name: JavaScript
  description: Providing a JavaScript SDK for mobile developers to put to use.
  image: ''
  tags: Real Time
- building_block_id: issues
  type: Road Map
  category: Now
  sorttype: ''
  sortcat: ''
  name: Issues
  description: >-
    Showcasing what the open issues are, letting people know they are
    outstanding, saving the need to report.
  image: ''
  tags: Issues
- building_block_id: status-dashboard
  type: Road Map
  category: Now
  sorttype: ''
  sortcat: ''
  name: Status Dashboard
  description: >-
    A single location, at dedicated subdomain, providing status update(s) for
    all API resources, giving developers a place to go when looking to see if
    platform is available.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-status-dashboard.png
  tags: Issues
- building_block_id: status-rss
  type: Road Map
  category: Now
  sorttype: ''
  sortcat: ''
  name: Status RSS
  description: >-
    Providing an RSS feed for a status dashboard, allowing users to receive
    updates on any website, and via any RSS client.
  image: ''
  tags: Issues
- building_block_id: status-history
  type: Road Map
  category: Now
  sorttype: ''
  sortcat: ''
  name: Status History
  description: >-
    Providing a history of status, usually by day, and showing results month by
    month, or week by week, as long as status has been tracked for an API.
  image: ''
  tags: Change Log
- building_block_id: change-log
  type: Road Map
  category: Past
  sorttype: ''
  sortcat: ''
  name: Change Log
  description: >-
    A detailed list of changes have been made to an API platform, giving
    consumers a single place they can go to learn about what changes have been
    made.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-recycling.jpg
  tags: Change Log
- building_block_id: road-map
  type: Road Map
  category: Future
  sorttype: ''
  sortcat: ''
  name: Road Map
  description: >-
    A detailed list of what additions and changes are being planned as part of
    API operations, giving consumers a place where they can go learn about what
    is next in an APIs evolution.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-highway.png
  tags: Road Map
- building_block_id: idea-submission
  type: Road Map
  category: Future
  sorttype: ''
  sortcat: ''
  name: Idea Submission
  description: >-
    Allow for the submission of ideas, using the Github issue management, or
    other system, giving API consumers the ability to potentially contribute to
    the API road map.
  image: ''
  tags: Road Map
- building_block_id: email-change-notifications
  type: Road Map
  category: Notifications
  sorttype: ''
  sortcat: ''
  name: Email Change Notifications
  description: >-
    Sending of email to API consumers anytime there is an addition to the road
    map, or a change in the status of the API platform.
  image: ''
  tags: Change Log
- building_block_id: sms-change-notification
  type: Road Map
  category: Notifications
  sorttype: ''
  sortcat: ''
  name: SMS Change Notification
  description: >-
    Sending of SMS to API consumers anytime there is an addition to the road
    map, or a change in the status of the API platform.
  image: ''
  tags: Change Log
- building_block_id: concept-extraction
  type: Scraping
  category: Content Harvesting & Extraction
  sorttype: ''
  sortcat: ''
  name: Concept Extraction
  description: Extracting topics that are present as tags from extracted content
  image: ''
  tags: Scraping Content
- building_block_id: summarization
  type: Scraping
  category: Content Harvesting & Extraction
  sorttype: ''
  sortcat: ''
  name: Summarization
  description: Providing a summarization of content that is extracted from a URL.
  image: ''
  tags: Scraping Content
- building_block_id: entity-extraction
  type: Scraping
  category: Content Harvesting & Extraction
  sorttype: ''
  sortcat: ''
  name: Entity Extraction
  description: >-
    Locate and classify named entities, such as the names of persons,
    organizations, locations from extracted content.
  image: ''
  tags: Scraping Content
- building_block_id: taxonomy--classification
  type: Scraping
  category: Content Harvesting & Extraction
  sorttype: ''
  sortcat: ''
  name: Taxonomy & Classification
  description: >-
    Identifying potential categories, and classifications present in extracted
    content.
  image: ''
  tags: Scraping Content
- building_block_id: relation-extraction
  type: Scraping
  category: Content Harvesting & Extraction
  sorttype: ''
  sortcat: ''
  name: Relation Extraction
  description: >-
    Detection and classification of semantic relationship identified within
    extracted text from URL.
  image: ''
  tags: Scraping Content
- building_block_id: article-extraction
  type: Scraping
  category: Content Harvesting & Extraction
  sorttype: ''
  sortcat: ''
  name: Article Extraction
  description: Extraction of news and blog article from the content retrieved from a URL.
  image: ''
  tags: Scraping Content
- building_block_id: discussion-extraction
  type: Scraping
  category: Content Harvesting & Extraction
  sorttype: ''
  sortcat: ''
  name: Discussion Extraction
  description: >-
    Extraction of structured and threaded conversations such as forums, and
    comments from extracted content.
  image: ''
  tags: Scraping Content
- building_block_id: date-extraction
  type: Scraping
  category: Content Harvesting & Extraction
  sorttype: ''
  sortcat: ''
  name: Date Extraction
  description: >-
    Pulling of the dates from an article, blog post, and other content published
    via a URL.
  image: ''
  tags: Scraping Content
- building_block_id: author-extraction
  type: Scraping
  category: Content Harvesting & Extraction
  sorttype: ''
  sortcat: ''
  name: Author Extraction
  description: >-
    Pulling of author names from an article, blog post, and content published by
    a specific individual.
  image: ''
  tags: Scraping Content
- building_block_id: product-extraction
  type: Scraping
  category: Content Harvesting & Extraction
  sorttype: ''
  sortcat: ''
  name: Product Extraction
  description: >-
    The extraction of specific product related information like title,
    description, pricing, and images from content extracted from web pages.
  image: ''
  tags: Scraping Content
- building_block_id: related-phrases
  type: Scraping
  category: Content Harvesting & Extraction
  sorttype: ''
  sortcat: ''
  name: Related Phrases
  description: Identifying related phrases with content extracted from website URL.
  image: ''
  tags: Scraping Content
- building_block_id: pagination-extraction
  type: Scraping
  category: Content Harvesting & Extraction
  sorttype: ''
  sortcat: ''
  name: Pagination Extraction
  description: >-
    Identifying the breadcrumbs, and pagination for URLs where content is being
    extracted and providing necessary details to navigate and harvest as needed.
  image: ''
  tags: Scraping Content
- building_block_id: dictionaries
  type: Scraping
  category: Content Harvesting & Extraction
  sorttype: ''
  sortcat: ''
  name: Dictionaries
  description: >-
    Provide the ability to create, access, and manage dictionaries from
    extracted content, and for applying to content that is harvested.
  image: ''
  tags: Scraping Content
- building_block_id: image-extraction
  type: Scraping
  category: Media Acquisition
  sorttype: ''
  sortcat: ''
  name: Image Extraction
  description: The extraction of images from content pulled from URLs.
  image: ''
  tags: Scraping Media
- building_block_id: video-extraction
  type: Scraping
  category: Media Acquisition
  sorttype: ''
  sortcat: ''
  name: Video Extraction
  description: The extraction of videos from content pulled from URLs.
  image: ''
  tags: Scraping Media
- building_block_id: image-tagging
  type: Scraping
  category: Media Acquisition
  sorttype: ''
  sortcat: ''
  name: Image Tagging
  description: Tagging of images with specific topics when extracted from URLs.
  image: ''
  tags: Scraping Media
- building_block_id: image-color-extraction
  type: Scraping
  category: Media Acquisition
  sorttype: ''
  sortcat: ''
  name: Image Color Extraction
  description: Identifying of colors present in images extracted from URLs.
  image: ''
  tags: Scraping Media
- building_block_id: face-detection
  type: Scraping
  category: Media Acquisition
  sorttype: ''
  sortcat: ''
  name: Face Detection
  description: Identifying faces within images and photos extracted from URLs.
  image: ''
  tags: Scraping Media
- building_block_id: barcode-recognition
  type: Scraping
  category: Media Acquisition
  sorttype: ''
  sortcat: ''
  name: Barcode Recognition
  description: Identifying barcodes that are present in images extracted from URLs.
  image: ''
  tags: Scraping Media
- building_block_id: license-plate-recognition
  type: Scraping
  category: Media Acquisition
  sorttype: ''
  sortcat: ''
  name: License Plate Recognition
  description: >-
    The identification of vehicle license plates identified in photos and images
    extracted from URLs.
  image: ''
  tags: Scraping Media
- building_block_id: feed-detection
  type: Scraping
  category: Document Processing
  sorttype: ''
  sortcat: ''
  name: Feed Detection
  description: Identifying the types of different documents and feeds available via URLs.
  image: ''
  tags: Scraping Documents
- building_block_id: pdf-extraction
  type: Scraping
  category: Document Processing
  sorttype: ''
  sortcat: ''
  name: PDF Extraction
  description: The extraction of content from PDF documents harvested from URLs.
  image: ''
  tags: Scraping Documents
- building_block_id: word-documents
  type: Scraping
  category: Document Processing
  sorttype: ''
  sortcat: ''
  name: Word Documents
  description: Extraction of content from Word documents that are harvest via URLs.
  image: ''
  tags: Scraping Documents
- building_block_id: html-table-extraction
  type: Scraping
  category: Structured Data Extraction
  sorttype: ''
  sortcat: ''
  name: HTML Table Extraction
  description: Pulling of HTML tables from content extracted via URLs.
  image: ''
  tags: Scraping Structured Data
- building_block_id: spreadsheet-extraction
  type: Scraping
  category: Structured Data Extraction
  sorttype: ''
  sortcat: ''
  name: Spreadsheet Extraction
  description: Extraction of structured data from spreadsheets harvested from URLs.
  image: ''
  tags: Scraping Documents
- building_block_id: csv-files
  type: Scraping
  category: Structured Data Extraction
  sorttype: ''
  sortcat: ''
  name: CSV Files
  description: Identification and processing of CSV files extracted from URLs.
  image: ''
  tags: Scraping Structured Data
- building_block_id: json-files
  type: Scraping
  category: Structured Data Extraction
  sorttype: ''
  sortcat: ''
  name: JSON Files
  description: Identification and processing of JSON files extracted from URLs.
  image: ''
  tags: Scraping Structured Data
- building_block_id: microformats-parsing
  type: Scraping
  category: Structured Data Extraction
  sorttype: ''
  sortcat: ''
  name: Microformats Parsing
  description: The parsing of common microformats from content extracted from URLs.
  image: ''
  tags: Scraping Structured Data
- building_block_id: xml-extraction
  type: Scraping
  category: Structured Data Extraction
  sorttype: ''
  sortcat: ''
  name: XML Extraction
  description: The extraction of structured data from XML files harvested from URLs.
  image: ''
  tags: Scraping Documents
- building_block_id: seed-urls
  type: Scraping
  category: Crawling
  sorttype: ''
  sortcat: ''
  name: Seed URLs
  description: Allowing users to provide URLs that seed the web crawling process.
  image: ''
  tags: Scraping Crawling
- building_block_id: pseudourls
  type: Scraping
  category: Crawling
  sorttype: ''
  sortcat: ''
  name: Pseudo-URLs
  description: >-
    Allow for the ability to provide URL patterns that will applied during the
    crawling process
  image: ''
  tags: Scraping Crawling
- building_block_id: scripting
  type: Scraping
  category: Crawling
  sorttype: ''
  sortcat: ''
  name: Scripting
  description: Allow for scripting as part of the web crawling cycle.
  image: ''
  tags: Scraping Crawling
- building_block_id: conditional-expressions
  type: Scraping
  category: Crawling
  sorttype: ''
  sortcat: ''
  name: Conditional Expressions
  description: >-
    Allow for the defining of conditional expressions that can be applied during
    the web crawling process.
  image: ''
  tags: Scraping Crawling
- building_block_id: xpath
  type: Scraping
  category: Crawling
  sorttype: ''
  sortcat: ''
  name: XPath
  description: >-
    Allow the application of XPath when processing XML files during the web
    crawling process.
  image: ''
  tags: Scraping Crawling
- building_block_id: regex
  type: Scraping
  category: Crawling
  sorttype: ''
  sortcat: ''
  name: RegEx
  description: >-
    Opening up the ability to apply regular expression as part of evaluation
    during the crawling process.
  image: ''
  tags: Scraping Crawling
- building_block_id: injection
  type: Scraping
  category: Crawling
  sorttype: ''
  sortcat: ''
  name: Injection
  description: Allow for the injection of data and content into the crawling of web pages.
  image: ''
  tags: Scraping Crawling
- building_block_id: timeout
  type: Scraping
  category: Crawling
  sorttype: ''
  sortcat: ''
  name: Timeout
  description: >-
    Giving users control over defining timeout limitations to be applied during
    the crawling cycle.
  image: ''
  tags: Scraping Crawling
- building_block_id: semantic-text-analysis
  type: Scraping
  category: Machine Learning
  sorttype: ''
  sortcat: ''
  name: Semantic Text Analysis
  description: >-
    Relating syntactic structures, from text to the level of the writing as a
    whole, to their language-independent meanings.
  image: ''
  tags: Machine Learning Scraping
- building_block_id: semantic-similarity
  type: Scraping
  category: Machine Learning
  sorttype: ''
  sortcat: ''
  name: Semantic Similarity
  description: >-
    Look for the similarities that exist after relating syntactic structures in
    content to the level of the writing as a whole, to their
    language-independent meanings.
  image: ''
  tags: Machine Learning Scraping
- building_block_id: sentiment-analysis
  type: Scraping
  category: Machine Learning
  sorttype: ''
  sortcat: ''
  name: Sentiment Analysis
  description: >-
    Identify and categorize opinions expressed in content to interpret it's
    attitude towards a particular topic, product, etc., is positive, negative,
    or neutral.
  image: ''
  tags: Machine Learning Scraping
- building_block_id: emotion-analysis
  type: Scraping
  category: Machine Learning
  sorttype: ''
  sortcat: ''
  name: Emotion Analysis
  description: >-
    Evaluating content for signs of human emotion presence such as sad or happy,
    complimenting and augmenting sentiment analysis.
  image: ''
  tags: Machine Learning Scraping
- building_block_id: content-latest-index
  type: Scraping
  category: Content Access
  sorttype: ''
  sortcat: ''
  name: Content Latest Index
  description: >-
    Providing access to the latest content crawled and harvest against a domain
    or list of domains.
  image: ''
  tags: Scraping Content Access
- building_block_id: historical-index
  type: Scraping
  category: Content Access
  sorttype: ''
  sortcat: ''
  name: Historical Index
  description: >-
    Allowing access to historical content that has been retrieved crawling and
    scraping URLs.
  image: ''
  tags: Scraping Content Access
- building_block_id: storage
  type: Scraping
  category: Content Access
  sorttype: ''
  sortcat: ''
  name: Storage
  description: 'Offering storage for content, data, and media that is scraped from URLs.'
  image: ''
  tags: Scraping Content Access
- building_block_id: search
  type: Scraping
  category: Content Access
  sorttype: ''
  sortcat: ''
  name: Search
  description: Providing search tools for access content that is scraped from URLs.
  image: ''
  tags: Scraping Content Access
- building_block_id: domain-lists
  type: Scraping
  category: DNS
  sorttype: ''
  sortcat: ''
  name: Domain Lists
  description: >-
    Providing lists of domains, and subdomains to seed scraping and harvesting
    activities.
  image: ''
  tags: Scraping DNS
- building_block_id: domain-metadata
  type: Scraping
  category: DNS
  sorttype: ''
  sortcat: ''
  name: Domain Metadata
  description: >-
    Providing details about domains that can be used in the scraping and
    crawling process.
  image: ''
  tags: Scraping DNS
- building_block_id: api
  type: Scraping
  category: Automation & Orchestration
  sorttype: ''
  sortcat: ''
  name: API
  description: >-
    Provide an API for programmatically managing all aspects of the scraping and
    crawling process.
  image: ''
  tags: Scraping Automation
- building_block_id: webhooks
  type: Scraping
  category: Automation & Orchestration
  sorttype: ''
  sortcat: ''
  name: Webhooks
  description: >-
    Provide a webhook architecture for triggering or being notified of specific
    events when scraping and crawling.
  image: ''
  tags: Scraping Automation
- building_block_id: reporting
  type: Scraping
  category: Analytics
  sorttype: ''
  sortcat: ''
  name: Reporting
  description: Providing reporting on crawling and scraping activities.
  image: ''
  tags: Scraping Analytics
- building_block_id: url-metrics
  type: Scraping
  category: Analytics
  sorttype: ''
  sortcat: ''
  name: URL Metrics
  description: 'Provide metrics on specific URLs, offering detail on its activity.'
  image: ''
  tags: Scraping Analytics
- building_block_id: spam-score
  type: Scraping
  category: Analytics
  sorttype: ''
  sortcat: ''
  name: Spam Score
  description: >-
    Providing a spam score for domains or URLs included as part of crawling and
    spider process.
  image: ''
  tags: Scraping Analytics
- building_block_id: rankings
  type: Scraping
  category: Analytics
  sorttype: ''
  sortcat: ''
  name: Rankings
  description: >-
    Providng rankings that can be applied to domains, URLs, content, data,
    media, and other building blocks of the crawling and scraping activities.
  image: ''
  tags: Scraping Analytics
- building_block_id: language-detection
  type: Scraping
  category: International
  sorttype: ''
  sortcat: ''
  name: Language Detection
  description: >-
    Providing language detection resources for applying against content and data
    that is extracted from URLs.
  image: ''
  tags: Scraping International
- building_block_id: geo-ip-address
  type: Scraping
  category: International
  sorttype: ''
  sortcat: ''
  name: Geo IP Address
  description: >-
    Providing the ability to harvest and scrape content and data from specific
    IP addresses located in specific geographic regions and countries.
  image: ''
  tags: Scraping International
- building_block_id: proxies
  type: Scraping
  category: Utilities
  sorttype: ''
  sortcat: ''
  name: Proxies
  description: >-
    Allowing for the deployment, configuration, and operation of proxies that
    get applied as part of scraping and crawling.
  image: ''
  tags: Scraping Utilities
- building_block_id: cookies
  type: Scraping
  category: Utilities
  sorttype: ''
  sortcat: ''
  name: Cookies
  description: >-
    Provide tooling for managing and configuration cookies that are used as part
    of scraping and crawling.
  image: ''
  tags: Scraping Utilities
- building_block_id: headers
  type: Scraping
  category: Utilities
  sorttype: ''
  sortcat: ''
  name: Headers
  description: >-
    Giving control over what headers are sent as part of the scraping and
    crawling process.
  image: ''
  tags: Scraping Utilities
- building_block_id: user-agents
  type: Scraping
  category: Utilities
  sorttype: ''
  sortcat: ''
  name: User Agents
  description: >-
    Allow for the customization of the user agent that identifies scraping and
    crawling tooling.
  image: ''
  tags: Scraping Utilities
- building_block_id: ip-address
  type: Scraping
  category: Utilities
  sorttype: ''
  sortcat: ''
  name: IP Address
  description: >-
    Provide the ability to select from different IP address pools, change, and
    optimize IP addresses used in the scraping and crawling process.
  image: ''
  tags: Scraping Utilities
- building_block_id: logging
  type: Scraping
  category: Utilities
  sorttype: ''
  sortcat: ''
  name: Logging
  description: >-
    Providing logging for scraping and crawling with the ability to search, and
    configure as needed.
  image: ''
  tags: Scraping Utilities
- building_block_id: batch-calls
  type: Scraping
  category: Utilities
  sorttype: ''
  sortcat: ''
  name: Batch Calls
  description: >-
    Provide the ability to make more than one call at once, tackling mulitple
    objects at once.
  image: ''
  tags: Scraping Utilities
- building_block_id: scheduler
  type: Scraping
  category: Utilities
  sorttype: ''
  sortcat: ''
  name: Scheduler
  description: >-
    Enable the ability control the schedule for the execution of scraping and
    crawling jobs.
  image: ''
  tags: Scraping Utilities
- building_block_id: low-latency
  type: Scraping
  category: Utilities
  sorttype: ''
  sortcat: ''
  name: Low Latency
  description: 'Allow for low latency scraping and crawling, limiting the impact on targets.'
  image: ''
  tags: Scraping Utilities
- building_block_id: dropbox
  type: Scraping
  category: Integrations
  sorttype: ''
  sortcat: ''
  name: Dropbox
  description: Integration of crawling and scraping activities into Dropbox.
  image: ''
  tags: Scraping Integration
- building_block_id: amazon-s3
  type: Scraping
  category: Integrations
  sorttype: ''
  sortcat: ''
  name: Amazon S3
  description: Integration of crawling and scraping activities into Amazon S3.
  image: ''
  tags: Scraping Integration
- building_block_id: google-sheets
  type: Scraping
  category: Integrations
  sorttype: ''
  sortcat: ''
  name: Google Sheets
  description: Integration of crawling and scraping activities into Google Sheets.
  image: ''
  tags: Scraping Integration
- building_block_id: plot.ly
  type: Scraping
  category: Integrations
  sorttype: ''
  sortcat: ''
  name: Plot.ly
  description: Integration of crawling and scraping activities into Plot.ly.
  image: ''
  tags: Scraping Integration
- building_block_id: silk
  type: Scraping
  category: Integrations
  sorttype: ''
  sortcat: ''
  name: Silk
  description: Integration of crawling and scraping activities into Silk.
  image: ''
  tags: Scraping Integration
- building_block_id: tableau
  type: Scraping
  category: Integrations
  sorttype: ''
  sortcat: ''
  name: Tableau
  description: Integration of crawling and scraping activities into Tableau.
  image: ''
  tags: Scraping Integration
- building_block_id: overview
  type: SDK
  category: Overview
  sorttype: ''
  sortcat: ''
  name: Overview
  description: 'Providing a single page with overview of samples, libraries, or SDKs.'
  image: ''
  tags: SDK
- building_block_id: beta
  type: SDK
  category: Overview
  sorttype: ''
  sortcat: ''
  name: Beta
  description: 'Provide a beta program as part of language, mobile, or platform SDKs.'
  image: ''
  tags: SDK
- building_block_id: crash-reporting
  type: SDK
  category: Overview
  sorttype: ''
  sortcat: ''
  name: Crash Reporting
  description: >-
    Provide tooling and services to assist with crash reporting within language,
    mobile, or platform SDKs.
  image: ''
  tags: SDK
- building_block_id: cold-fusion
  type: SDK
  category: Language Samples
  sorttype: ''
  sortcat: ''
  name: Cold Fusion
  description: >-
    An simple sample, for a specific API, available in the ColdFusion
    programming language, with consideration specifically tailored for the
    language.
  image: ''
  tags: SDK
- building_block_id: php
  type: SDK
  category: Language Samples
  sorttype: ''
  sortcat: ''
  name: PHP
  description: >-
    An simple sample, for a specific API, available in the PHP programming
    language, with consideration specifically tailored for the language.
  image: ''
  tags: ''
- building_block_id: python
  type: SDK
  category: Language Samples
  sorttype: ''
  sortcat: ''
  name: Python
  description: >-
    An simple sample, for a specific API, available in the Python programming
    language, with consideration specifically tailored for the language.
  image: ''
  tags: ''
- building_block_id: ruby
  type: SDK
  category: Language Samples
  sorttype: ''
  sortcat: ''
  name: Ruby
  description: >-
    An simple sample, for a specific API, available in the Ruby programming
    language, with consideration specifically tailored for the language.
  image: ''
  tags: ''
- building_block_id: node.js
  type: SDK
  category: Language Samples
  sorttype: ''
  sortcat: ''
  name: Node.js
  description: >-
    An simple sample, for a specific API, available in the Node.js programming
    language, with consideration specifically tailored for the language.
  image: ''
  tags: ''
- building_block_id: c-sharp
  type: SDK
  category: Language Samples
  sorttype: ''
  sortcat: ''
  name: C Sharp
  description: >-
    An simple sample, for a specific API, available in the C Sharp programming
    language, with consideration specifically tailored for the language.
  image: ''
  tags: ''
- building_block_id: java
  type: SDK
  category: Language Samples
  sorttype: ''
  sortcat: ''
  name: Java
  description: >-
    An simple sample, for a specific API, available in the Java programming
    language, with consideration specifically tailored for the language.
  image: ''
  tags: ''
- building_block_id: go
  type: SDK
  category: Language Samples
  sorttype: ''
  sortcat: ''
  name: Go
  description: >-
    An simple sample, for a specific API, available in the Go programming
    language, with consideration specifically tailored for the language.
  image: ''
  tags: ''
- building_block_id: scala
  type: SDK
  category: Language Samples
  sorttype: ''
  sortcat: ''
  name: Scala
  description: >-
    An simple sample, for a specific API, available in the Scala programming
    language, with consideration specifically tailored for the language.
  image: ''
  tags: ''
- building_block_id: php
  type: SDK
  category: Language SDKs
  sorttype: ''
  sortcat: ''
  name: PHP
  description: >-
    An SDK available in the PHP programming language, with consideration
    specifically tailored for the language.
  image: ''
  tags: SDK
- building_block_id: python
  type: SDK
  category: Language SDKs
  sorttype: ''
  sortcat: ''
  name: Python
  description: >-
    An SDK available in the Python programming language, with consideration
    specifically tailored for the language.
  image: ''
  tags: SDK
- building_block_id: ruby
  type: SDK
  category: Language SDKs
  sorttype: ''
  sortcat: ''
  name: Ruby
  description: >-
    An SDK available in the Ruby programming language, with consideration
    specifically tailored for the language.
  image: ''
  tags: SDK
- building_block_id: node.js
  type: SDK
  category: Language SDKs
  sorttype: ''
  sortcat: ''
  name: Node.js
  description: >-
    An SDK available in the Node.js programming language, with consideration
    specifically tailored for the language.
  image: ''
  tags: SDK
- building_block_id: c-sharp
  type: SDK
  category: Language SDKs
  sorttype: ''
  sortcat: ''
  name: C Sharp
  description: >-
    An SDK available in the C Sharp / C# programming language, with
    consideration specifically tailored for the language.
  image: ''
  tags: SDK
- building_block_id: java
  type: SDK
  category: Language SDKs
  sorttype: ''
  sortcat: ''
  name: Java
  description: >-
    An SDK available in the Java programming language, with consideration
    specifically tailored for the language.
  image: ''
  tags: SDK
- building_block_id: go
  type: SDK
  category: Language SDKs
  sorttype: ''
  sortcat: ''
  name: Go
  description: >-
    An SDK available in the Go programming language, with consideration
    specifically tailored for the language.
  image: ''
  tags: SDK
- building_block_id: scala
  type: SDK
  category: Language SDKs
  sorttype: ''
  sortcat: ''
  name: Scala
  description: >-
    An SDK available in the Scala programming language, with consideration
    specifically tailored for the language.
  image: ''
  tags: SDK
- building_block_id: mobile-overview
  type: SDK
  category: Mobile Solutions
  sorttype: ''
  sortcat: ''
  name: Mobile Overview
  description: >-
    An overview page, dedicated to mobile application development, giving equal
    time to each platform, including iOS, Android, and Windows.
  image: ''
  tags: 'Management,SDK'
- building_block_id: ios-sdk
  type: SDK
  category: Mobile Solutions
  sorttype: ''
  sortcat: ''
  name: iOS SDK
  description: >-
    Providing mobile-focused SDKs for developers to build IOS mobile
    applications on top of an API.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-iphone.png
  tags: 'Management,SDK'
- building_block_id: android-sdk
  type: SDK
  category: Mobile Solutions
  sorttype: ''
  sortcat: ''
  name: Android SDK
  description: >-
    Providing mobile focused SDKs for developers to build Android mobile
    applications on top of an API.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-android.jpg
  tags: 'Management,SDK'
- building_block_id: html5
  type: SDK
  category: Mobile Solutions
  sorttype: ''
  sortcat: ''
  name: HTML5
  description: >-
    Providing mobile focused SDKs for developers to build HTML5 mobile
    applications on top of an API.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-html5.png
  tags: 'Management,SDK'
- building_block_id: appery.io
  type: SDK
  category: Mobile Solutions
  sorttype: ''
  sortcat: ''
  name: Appery.io
  description: >-
    Providing mobile focused SDKs for developers to build mobile applications on
    top of an API, using Appery.io.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-appery.png
  tags: 'Management,SDK'
- building_block_id: windows-mobile-sdk
  type: SDK
  category: Mobile Solutions
  sorttype: ''
  sortcat: ''
  name: Windows Mobile SDK
  description: >-
    Providing mobile focused SDKs for developers to build Windows mobile
    applications on top of an API.
  image: ''
  tags: 'Management,SDK'
- building_block_id: github
  type: SDK
  category: Code Management
  sorttype: ''
  sortcat: ''
  name: Github
  description: >-
    Using Github for managing of code samples, libraries, SDKs, and other
    supporting elements of an API platform.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-github.jpg
  tags: Management
- building_block_id: wordpress
  type: SDK
  category: Platform Development Kits (PDK)
  sorttype: ''
  sortcat: ''
  name: Wordpress
  description: >-
    Providing ready to go WordPress integration, allowing developers, and
    sometimes even non-developers to immediately put an API to use through their
    WordPress site(s).
  image: ''
  tags: 'Management,SDK'
- building_block_id: application-gallery
  type: SDK
  category: Code Management
  sorttype: ''
  sortcat: ''
  name: Application Gallery
  description: >-
    A gallery of all applications that have been built on top of an API
    platform, for the public and API community to explore.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-app-icon.jpg
  tags: Management
- building_block_id: heroku
  type: SDK
  category: Platform Development Kits (PDK)
  sorttype: ''
  sortcat: ''
  name: Heroku
  description: >-
    Providing ready to go Heroku integration, allowing developers, and sometimes
    even non-developers to immediately put an API to use through their Heroku
    platform account.
  image: ''
  tags: 'Management,SDK'
- building_block_id: open-source
  type: SDK
  category: Code Management
  sorttype: ''
  sortcat: ''
  name: Open Source
  description: >-
    Using open source licenses across any code samples, libraries, SDKs, and
    complete applications provided as part of aPI operations.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-open-source.png
  tags: Management
- building_block_id: drupal
  type: SDK
  category: Platform Development Kits (PDK)
  sorttype: ''
  sortcat: ''
  name: Drupal
  description: >-
    Providing ready to go Drupal integration, allowing developers, and sometimes
    even non-developers to immediately put an API to use through their Drupal
    site(s).
  image: ''
  tags: 'Management,SDK'
- building_block_id: starter-projects
  type: SDK
  category: Code Management
  sorttype: ''
  sortcat: ''
  name: Starter Projects
  description: >-
    Offer fully functional applications that API developers can reverse
    engineer, and possible put to use as a starting point for their
    integrations.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-starter-kit.png
  tags: Management
- building_block_id: salesforce
  type: SDK
  category: Platform Development Kits (PDK)
  sorttype: ''
  sortcat: ''
  name: SalesForce
  description: >-
    Providing ready to go SalesForce integration, allowing developers, and
    sometimes even non-developers to immediately put an API to use through their
    SalesForce account.
  image: ''
  tags: 'Management,SDK'
- building_block_id: community-supported-libraries
  type: SDK
  category: Code Management
  sorttype: ''
  sortcat: ''
  name: Community Supported Libraries
  description: >-
    In addition to providing your own company developed libraries, showcasing
    the libraries of trusted developers fro within the API community.
  image: ''
  tags: Management
- building_block_id: joomla
  type: SDK
  category: Platform Development Kits (PDK)
  sorttype: ''
  sortcat: ''
  name: Joomla
  description: >-
    Providing ready to go Joomla integration, allowing developers, and sometimes
    even non-developers to immediately put an API to use through their Joomla
    account.
  image: ''
  tags: 'Management,SDK'
- building_block_id: google-app-engine
  type: SDK
  category: Platform Development Kits (PDK)
  sorttype: ''
  sortcat: ''
  name: Google App Engine
  description: >-
    Providing ready to go Google App Engine integration, allowing developers,
    and sometimes even non-developers to immediately put an API to use through
    the Google Cloud platform.
  image: ''
  tags: 'Management,SDK'
- building_block_id: code-builder
  type: SDK
  category: Code Management
  sorttype: ''
  sortcat: ''
  name: Code Builder
  description: >-
    A tool allowing for the generation of client code for various API endpoint,
    for specific language or platform objectives.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-tools.png
  tags: Management
- building_block_id: code-page
  type: SDK
  category: Code Management
  sorttype: ''
  sortcat: ''
  name: Code Page
  description: >-
    A page dedicated to providing access to code resources, whether samples,
    libraries, SDKs, PDKs, or starter projects.
  image: ''
  tags: Management
- building_block_id: sdks.io
  type: SDK
  category: Code Management
  sorttype: ''
  sortcat: ''
  name: SDKs.io
  description: >-
    Making sure your profile on SDKs.io is complete, with up to date SDKs
    available so users can use in their integration.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/sdks-io-icon.png
  tags: ''
- building_block_id: angular.js
  type: SDK
  category: Single Page Applications (SPA)
  sorttype: ''
  sortcat: ''
  name: Angular.js
  description: >-
    Providing developers with AngularJS framework integration, allowing them to
    build single page applications using API resources.
  image: ''
  tags: 'Management,SDK'
- building_block_id: react.js
  type: SDK
  category: Single Page Applications (SPA)
  sorttype: ''
  sortcat: ''
  name: React.js
  description: >-
    Providing developers with React.js framework integration, allowing them to
    build single page applications using API resources.
  image: ''
  tags: SDK
- building_block_id: bookmarklet
  type: SDK
  category: Browser Development Kits (BDK)
  sorttype: ''
  sortcat: ''
  name: Bookmarklet
  description: >-
    Providing a customizable bookmarklet that can be used in conjunction with
    the page a user is on, bookmarklet on browser toolbar, and a simple API
    call.
  image: ''
  tags: ''
- building_block_id: chrome-extension
  type: SDK
  category: Browser Development Kits (BDK)
  sorttype: ''
  sortcat: ''
  name: Chrome Extension
  description: >-
    Providing ready to go Google Chrome browser integration, allowing
    developers, and sometimes even non-developers to immediately put an API to
    use in their browser, with a Google Chrome extension.
  image: ''
  tags: 'Management,SDK'
- building_block_id: firefox-addon
  type: SDK
  category: Browser Development Kits (BDK)
  sorttype: ''
  sortcat: ''
  name: Firefox Add-On
  description: >-
    Providing ready to go Mozilla Firefox browser integration, allowing
    developers, and sometimes even non-developers to immediately put an API to
    use in their browser, with a Mozilla Firefox add-on.
  image: ''
  tags: 'Management,SDK'
- building_block_id: advertising-development-kit-adk
  type: SDK
  category: Monetization Development Kit (MDK)
  sorttype: ''
  sortcat: ''
  name: Advertising Development Kit (ADK)
  description: >-
    Providing a toolkit for integrating advertising opportunities directly into
    language, mobile, and platform development kits.
  image: ''
  tags: SDK
- building_block_id: list-sdk
  type: SDK
  category: Discovery
  sorttype: ''
  sortcat: ''
  name: List SDK
  description: >-
    Are SDKs listed in an easy to find location, where developers can browse
    them easily? A simple list goes a long way in making them found.
  image: ''
  tags: SDK
- building_block_id: search-sdk
  type: SDK
  category: Discovery
  sorttype: ''
  sortcat: ''
  name: Search SDK
  description: >-
    Is there the ability to search for SDKs, using a single index dedicated to
    them, or possibly using Github's already available search mechanisms.
  image: ''
  tags: SDK
- building_block_id: browse-sdk
  type: SDK
  category: Discovery
  sorttype: ''
  sortcat: ''
  name: Browse SDK
  description: >-
    Is there a browseable directory of SDKs, that developers can use to find the
    SDK that they need? Potentially giving more information than just a listing.
  image: ''
  tags: SDK
- building_block_id: rating
  type: SDK
  category: Discovery
  sorttype: ''
  sortcat: ''
  name: Rating
  description: >-
    Are SDKs rated, allowing for various quality considerations around their
    value and usage in other API integrations, allowing developers to find the
    best SDKs possible.
  image: ''
  tags: SDK
- building_block_id: import-openapi-spec
  type: SDK
  category: Import / Export
  sorttype: ''
  sortcat: ''
  name: Import OpenAPI Spec
  description: >-
    Allow for importing of API definitions using OpenAPI specification format,
    for generation of SDKs.
  image: ''
  tags: SDK
- building_block_id: import-raml
  type: SDK
  category: Import / Export
  sorttype: ''
  sortcat: ''
  name: Import RAML
  description: >-
    Allow for importing of API definitions using RAML format, for generation of
    SDKs.
  image: ''
  tags: SDK
- building_block_id: import-api-blueprint
  type: SDK
  category: Import / Export
  sorttype: ''
  sortcat: ''
  name: Import API Blueprint
  description: >-
    Allow for importing of API definitions using API Blueprint format, for
    generation of SDKs.
  image: ''
  tags: SDK
- building_block_id: import-wadl
  type: SDK
  category: Import / Export
  sorttype: ''
  sortcat: ''
  name: Import WADL
  description: >-
    Allow for importing of API definitions using WADL format, for generation of
    SDKs.
  image: ''
  tags: SDK
- building_block_id: import-postman
  type: SDK
  category: Import / Export
  sorttype: ''
  sortcat: ''
  name: Import Postman
  description: >-
    Allow for importing of API definitions using Postman format, for generation
    of SDKs.
  image: ''
  tags: SDK
- building_block_id: security-practices-page
  type: Security
  category: Overview
  sorttype: ''
  sortcat: ''
  name: Security Practices Page
  description: >-
    Publishing a single page that covers what the security approaches are for a
    platform, providing as much detail as possible about what practices are
    employed, what the schedule looks like, and what results of security history
    is.
  image: ''
  tags: Security
- building_block_id: security-contact
  type: Security
  category: Overview
  sorttype: ''
  sortcat: ''
  name: Security Contact
  description: >-
    Who to contact in the event of a security incident that concerns the
    platform. Providing a phone number, email, or form that can be submitted.
  image: ''
  tags: Security
- building_block_id: session-management
  type: Security
  category: Auth Considerations
  sorttype: ''
  sortcat: ''
  name: Session Management
  description: >-
    API should pass session-based authentication, either by session token via a
    POST or by API key as a POST body argument or as a cookie, avoiding
    usernames, passwords, session tokens, and API keys in the URL
  image: ''
  tags: Security
- building_block_id: session-state
  type: Security
  category: Auth Considerations
  sorttype: ''
  sortcat: ''
  name: Session State
  description: >-
    Many web services are written to be as stateless as possible, usually ending
    up with a state blob being sent as part of the transaction.
  image: ''
  tags: Security
- building_block_id: antifarming
  type: Security
  category: Auth Considerations
  sorttype: ''
  sortcat: ''
  name: Anti-Farming
  description: >-
    APIs are regularly farmed for the data they contain, and while there's no
    technical method of preventing this use, having a clear business model, and
    API management strategy works to minimize.
  image: ''
  tags: Security
- building_block_id: protect-http-methods
  type: Security
  category: Auth Considerations
  sorttype: ''
  sortcat: ''
  name: Protect HTTP Methods
  description: >-
    Making sure the incoming HTTP method is valid for the session token/API key
    and associated resource collection, action, and record.
  image: ''
  tags: Security
- building_block_id: methods-whitelist
  type: Security
  category: Auth Considerations
  sorttype: ''
  sortcat: ''
  name: Methods Whitelist
  description: >-
    Properly restrict the allowable verbs such that only the allowed verbs would
    work, while all others would return a proper response code (for example, a
    403 Forbidden).
  image: ''
  tags: Security
- building_block_id: crosssite-request-forgery
  type: Security
  category: Auth Considerations
  sorttype: ''
  sortcat: ''
  name: Cross-Site Request Forgery
  description: >-
    Make sure any PUT, POST, and DELETE request is protected from Cross Site
    Request Forgery, typically done using a token-based approach.
  image: ''
  tags: Security
- building_block_id: insecure-direct-object-references
  type: Security
  category: Auth Considerations
  sorttype: ''
  sortcat: ''
  name: Insecure Direct Object References
  description: >-
    It may seem obvious, but if you had a bank account REST web service, you'd
    have to make sure there is adequate checking of primary and foreign keys.
  image: ''
  tags: Security
- building_block_id: validate-contenttypes
  type: Security
  category: Input Validation
  sorttype: ''
  sortcat: ''
  name: Validate Content-Types
  description: >-
    The server should never assume the Content-Type; it should always check that
    the Content-Type header and the content are the same type.
  image: ''
  tags: Security
- building_block_id: assist-the-user
  type: Security
  category: Input Validation
  sorttype: ''
  sortcat: ''
  name: Assist the User
  description: >-
    Assisting in the input of high quality data into APIs, by validating what is
    submitted, and rejecting anything that does not pass validation.
  image: ''
  tags: Security
- building_block_id: secure-parsing
  type: Security
  category: Input Validation
  sorttype: ''
  sortcat: ''
  name: Secure Parsing
  description: >-
    Use a secure parser for parsing the incoming messages. If you are using XML,
    make sure to use a parser that is not vulnerable to XXE and similar attacks.
  image: ''
  tags: Security
- building_block_id: strong-typing
  type: Security
  category: Input Validation
  sorttype: ''
  sortcat: ''
  name: Strong Typing
  description: >-
    It's difficult to perform most attacks if the only allowed values are true
    or false, or a number, or one of a small number of acceptable values.
    Strongly type incoming data as quickly as possible.
  image: ''
  tags: Security
- building_block_id: validate-response-types
  type: Security
  category: Input Validation
  sorttype: ''
  sortcat: ''
  name: Validate Response Types
  description: >-
    Do NOT simply copy the Accept header to the Content-type header of the
    response, and reject the request if the Accept header does not specifically
    contain one of the allowable types.
  image: ''
  tags: Security
- building_block_id: json-validation
  type: Security
  category: Input Validation
  sorttype: ''
  sortcat: ''
  name: JSON Validation
  description: >-
    Making sure all JSON is valid helps make sure that APIs are operating as
    expectation and making sure vulnerabilities are not being passed in with API
    requests and responses.
  image: ''
  tags: Security
- building_block_id: xml-validation
  type: Security
  category: Input Validation
  sorttype: ''
  sortcat: ''
  name: XML Validation
  description: >-
    XML-based services must ensure that they are protected against common XML
    based attacks by using secure XML-parsing.
  image: ''
  tags: Security
- building_block_id: frameworkprovided-validation
  type: Security
  category: Input Validation
  sorttype: ''
  sortcat: ''
  name: Framework-Provided Validation
  description: >-
    Many frameworks allow for validation constraints to be enforced
    automatically by the framework at request or response time, providing
    automatic validation before the data is delivered to the application.
  image: ''
  tags: Security
- building_block_id: send-security-headers
  type: Security
  category: Output Validation
  sorttype: ''
  sortcat: ''
  name: Send Security Headers
  description: >-
    The server should always send the Content-Type header with the correct
    Content-Type, and preferably the Content-Type header should include a
    charset.
  image: ''
  tags: Security
- building_block_id: json-encoding
  type: Security
  category: Output Validation
  sorttype: ''
  sortcat: ''
  name: JSON Encoding
  description: >-
    Use a proper JSON serializer to encode user-supplied data properly to
    prevent the execution of user-supplied input on the browser.
  image: ''
  tags: Security
- building_block_id: xml-encoding
  type: Security
  category: Output Validation
  sorttype: ''
  sortcat: ''
  name: XML Encoding
  description: >-
    Do not assemble XML string concatenation, rather us a XML serializer, ensure
    that the XML content sent to the browser is parseable and does not contain
    XML injection.
  image: ''
  tags: Security
- building_block_id: link-integrity
  type: Security
  category: Output Validation
  sorttype: ''
  sortcat: ''
  name: Link Integrity
  description: >-
    Checks the reputation of web links in real time, providing an invisibly
    secure experience by blocking malicious and unwanted links from being
    present or loading in content.
  image: ''
  tags: Security
- building_block_id: data-in-transit
  type: Security
  category: Transport Level Security
  sorttype: ''
  sortcat: ''
  name: Data in Transit
  description: >-
    Unless the public information is completely read-only, the use of TLS should
    be mandated, particularly where credentials, updates, deletions, and any
    value transactions are performed.
  image: ''
  tags: Security
- building_block_id: e
  type: Security
  category: Abuse of Functionality
  sorttype: ''
  sortcat: ''
  name: e
  description: >-
    Avoid overwriting of memory fragments of the process, values of the IP
    (Instruction Pointer), BP (Base Pointer) and other registers which can cause
    exceptions, segmentation faults, and other errors to occur.
  image: ''
  tags: Security
- building_block_id: buffer-overflow-via-environment-variables
  type: Security
  category: Abuse of Functionality
  sorttype: ''
  sortcat: ''
  name: Buffer Overflow via Environment Variables
  description: >-
    Avoid this pattern that involves causes a buffer overflow through
    manipulation of environment variables, which once the attacker finds that
    they can modify an environment variable, they may try to overflow associated
    buffers.
  image: ''
  tags: Security
- building_block_id: overflow-binary-resource-file
  type: Security
  category: Abuse of Functionality
  sorttype: ''
  sortcat: ''
  name: Overflow Binary Resource File
  description: >-
    Coming from input data, and an Overflow Binary Resource File, where attacker
    modifies/prepares the binary file in such a way that the application, after
    reading this file, becomes prone to a classic Buffer overflow attack.
  image: ''
  tags: Security
- building_block_id: crosssite-request-forgery-csrf
  type: Security
  category: Data Structure Attacks
  sorttype: ''
  sortcat: ''
  name: Cross-Site Request Forgery (CSRF)
  description: >-
    An attack that forces an end user to execute unwanted actions on a web
    application in which they're currently authenticated, targeting
    state-changing requests, not theft of data, since the attacker has no way to
    see the response to the forged request.
  image: ''
  tags: Security
- building_block_id: logic/time-bomb
  type: Security
  category: Data Structure Attacks
  sorttype: ''
  sortcat: ''
  name: Logic/time Bomb
  description: >-
    A logic bomb is a piece of malicious code that executes when specific
    trigger conditions are met, such as a date or time, or possible a specific
    database event.
  image: ''
  tags: Security
- building_block_id: trojan-horse
  type: Security
  category: Data Structure Attacks
  sorttype: ''
  sortcat: ''
  name: Trojan Horse
  description: >-
    A Trojan Horse is a program that uses malicious code masqueraded as a
    trusted application, which is vehicle in which malicious code can be
    injected on benign applications, masqueraded in e-mail links, or JavaScript.
  image: ''
  tags: Security
- building_block_id: account-lockout-attack
  type: Security
  category: Data Structure Attacks
  sorttype: ''
  sortcat: ''
  name: Account Lockout Attack
  description: >-
    Where attackers attempts to lock out user accounts by purposely failing the
    authentication process as many times as needed to trigger the native account
    lockout functionality.
  image: ''
  tags: Security
- building_block_id: crosssite-request-forgery-csrf
  type: Security
  category: Data Structure Attacks
  sorttype: ''
  sortcat: ''
  name: Cross-Site Request Forgery (CSRF)
  description: >-
    An attack that forces an end user to execute unwanted actions on a web
    application in which they're currently authenticated, targeting
    state-changing requests, not theft of data, since the attacker has no way to
    see the response to the forged request.
  image: ''
  tags: Security
- building_block_id: execution-after-redirect-ear
  type: Security
  category: Data Structure Attacks
  sorttype: ''
  sortcat: ''
  name: Execution After Redirect (EAR)
  description: >-
    Execution After Redirect (EAR) is an attack where an attacker ignores
    redirects and retrieves sensitive content intended for authenticated users.
    A successful EAR exploit can lead to complete compromise of the application.
    - https://www.owasp.org/index.php/Execution_After_Redirect_(EAR)
  image: ''
  tags: Security
- building_block_id: session-fixation
  type: Security
  category: Data Structure Attacks
  sorttype: ''
  sortcat: ''
  name: Session Fixation
  description: >-
    An attack that permits an attacker to hijack a valid user session, and
    explore a limitation in the way the web application manages the session ID,
    more specifically the vulnerable web application.
  image: ''
  tags: Security
- building_block_id: session-hijacking-attack
  type: Security
  category: Data Structure Attacks
  sorttype: ''
  sortcat: ''
  name: Session Hijacking Attack
  description: >-
    An attack that consists of the exploitation of the web session control
    mechanism, which is normally managed for a session token, exploiting http
    communication which uses many different TCP connections.
  image: ''
  tags: Security
- building_block_id: session-prediction
  type: Security
  category: Data Structure Attacks
  sorttype: ''
  sortcat: ''
  name: Session Prediction
  description: >-
    An attack that focuses on predicting session ID values that permit an
    attacker to bypass the authentication schema of an application, by analyzing
    and understanding the session ID generation process, an attacker can predict
    a valid session ID value and get access to the application.
  image: ''
  tags: Security
- building_block_id: code-injection
  type: Security
  category: Embedded Malicious Code
  sorttype: ''
  sortcat: ''
  name: Code Injection
  description: >-
    Attack types which consist of injecting code that is then
    interpreted/executed by the application, exploiting poor handling of
    untrusted data, and usually made possible due to a lack of proper
    input/output data validation.
  image: ''
  tags: Security
- building_block_id: command-injection
  type: Security
  category: Embedded Malicious Code
  sorttype: ''
  sortcat: ''
  name: Command Injection
  description: >-
    An attack in which executes arbitrary commands to the host operating system
    via a vulnerable application, made possible when an application passes
    unsafe user supplied data (forms, cookies, HTTP headers etc.).
  image: ''
  tags: Security
- building_block_id: comment-injection-attack
  type: Security
  category: Embedded Malicious Code
  sorttype: ''
  sortcat: ''
  name: Comment Injection Attack
  description: >-
    Comments injected into an application through input can be used to
    compromise a system. As data is parsed, an injected/malformed comment may
    cause the process to take unexpected actions that result in an attack.
  image: ''
  tags: Security
- building_block_id: content-security-policy
  type: Security
  category: Embedded Malicious Code
  sorttype: ''
  sortcat: ''
  name: Content Security Policy
  description: >-
    Open up the possibility to instruct the client browser from which location
    and/or which type of resources are allowed to be loaded, providing a
    directive that loads a behavior for a target resource type.
  image: ''
  tags: Security
- building_block_id: content-spoofing
  type: Security
  category: Embedded Malicious Code
  sorttype: ''
  sortcat: ''
  name: Content Spoofing
  description: >-
    An attack made possible by an injection vulnerability, where an API does not
    properly handle user supplied data, and an attacker can supply content,
    typically via a parameter value, that is reflected back to the user.
  image: ''
  tags: Security
- building_block_id: cors-requestpreflighscrutiny
  type: Security
  category: Embedded Malicious Code
  sorttype: ''
  sortcat: ''
  name: CORS RequestPreflighScrutiny
  description: >-
    Opening up the possibility to expose resources to all or restricted domain,
    made by AJAX request for resource on other domain than is source domain.
  image: ''
  tags: Security
- building_block_id: crosssite-scripting-xss
  type: Security
  category: Embedded Malicious Code
  sorttype: ''
  sortcat: ''
  name: Cross-site Scripting (XSS)
  description: >-
    A type of injection, in which malicious scripts are injected into otherwise
    benign and trusted web sites, occurring when an attacker send malicious
    code, generally in the form of a browser side script, to a different end
    user.
  image: ''
  tags: Security
- building_block_id: custom-special-character-injection
  type: Security
  category: Embedded Malicious Code
  sorttype: ''
  sortcat: ''
  name: Custom Special Character Injection
  description: >-
    Not properly filtering or quoting special characters or reserved words that
    are used in a custom or proprietary language or representation, allowing
    attackers to modify the syntax, content, or commands before they are
    processed.
  image: ''
  tags: Security
- building_block_id: format-string-attack
  type: Security
  category: Embedded Malicious Code
  sorttype: ''
  sortcat: ''
  name: Format String Attack
  description: >-
    Occurring when the submitted data of an input string is evaluated as a
    command, allowing the execution of code, to read the stack, or cause a
    segmentation fault, causing behaviors that could compromise the system.
  image: ''
  tags: Security
- building_block_id: full-path-disclosure
  type: Security
  category: Embedded Malicious Code
  sorttype: ''
  sortcat: ''
  name: Full Path Disclosure
  description: >-
    Vulnerabilities enabling the attacker to see the path to the webroot/file,
    potentially opening up full access to the underlying system.
  image: ''
  tags: Security
- building_block_id: parameter-delimiter
  type: Security
  category: Embedded Malicious Code
  sorttype: ''
  sortcat: ''
  name: Parameter Delimiter
  description: >-
    An attack based on the manipulation of parameter delimiters used by web
    application input vectors in order to cause unexpected behaviors like access
    control and authorization bypass and information disclosure.
  image: ''
  tags: Security
- building_block_id: resource-injection
  type: Security
  category: Embedded Malicious Code
  sorttype: ''
  sortcat: ''
  name: Resource Injection
  description: >-
    This attack consists of changing resource identifiers used by an application
    in order to perform a malicious task, allowing data to be manipulated to
    execute or access different resources.
  image: ''
  tags: Security
- building_block_id: serverside-includes-ssi-injection
  type: Security
  category: Embedded Malicious Code
  sorttype: ''
  sortcat: ''
  name: Server-Side Includes (SSI) Injection
  description: >-
    An attack that allows the exploitation of a web application by injecting
    scripts in HTML pages or executing arbitrary codes remotely, exploiting
    through the manipulation of SSI in use and force its use through user input
    fields.
  image: ''
  tags: Security
- building_block_id: sql-injection
  type: Security
  category: Embedded Malicious Code
  sorttype: ''
  sortcat: ''
  name: SQL Injection
  description: >-
    The insertion of a SQL query via the input data allowing the reading
    sensitive data from the database, modify database data, execute
    administrative tasks, and in some cases issue commands to the operating
    system.
  image: ''
  tags: Security
- building_block_id: web-parameter-tampering
  type: Security
  category: Embedded Malicious Code
  sorttype: ''
  sortcat: ''
  name: Web Parameter Tampering
  description: >-
    An attacked based on the manipulation of parameters exchanged between client
    and server in order to modify application data, such as user credentials and
    permissions, price and quantity of products, etc.
  image: ''
  tags: Security
- building_block_id: xpath-injection
  type: Security
  category: Embedded Malicious Code
  sorttype: ''
  sortcat: ''
  name: XPATH Injection
  description: >-
    An attack occurring when a web site uses user-supplied information to
    construct an XPath query for XML data, sending malformed information to an
    API opening up how the XML data is structured, or access data.
  image: ''
  tags: Security
- building_block_id: brute-force-attack
  type: Security
  category: By Force
  sorttype: ''
  sortcat: ''
  name: Brute Force Attack
  description: >-
    A brute force attack can manifest itself in many different ways, but
    primarily consists in an attacker configuring predetermined values, making
    requests to a server using those values, and then analyzing the response.
  image: ''
  tags: Security
- building_block_id: cash-overflow
  type: Security
  category: By Force
  sorttype: ''
  sortcat: ''
  name: Cash Overflow
  description: >-
    An attack specifically aimed at exceeding hosting costs, either essentially
    bankrupting the service owner or exceeding the cost limits, leading the
    cloud service provider to disable the application.
  image: ''
  tags: Security
- building_block_id: cryptanalysis
  type: Security
  category: By Force
  sorttype: ''
  sortcat: ''
  name: Cryptanalysis
  description: >-
    Cryptanalysis is a process of finding weaknesses in cryptographic algorithms
    and using these weaknesses to decipher the ciphertext without knowing the
    secret key (instance deduction).
  image: ''
  tags: Security
- building_block_id: denial-of-service
  type: Security
  category: By Force
  sorttype: ''
  sortcat: ''
  name: Denial of Service
  description: >-
    The Denial of Service (DoS) attack is focused on making a resource (site,
    application, server) unavailable for the purpose it was designed.
  image: ''
  tags: Security
- building_block_id: http-request-smuggling
  type: Security
  category: Path Traversal Attack
  sorttype: ''
  sortcat: ''
  name: HTTP Request Smuggling
  description: >-
    The HTTP Request Smuggling attack explores an incomplete parsing of the
    submitted data done by an intermediary HTTP system working as a proxy.
  image: ''
  tags: Security
- building_block_id: http-response-splitting
  type: Security
  category: Path Traversal Attack
  sorttype: ''
  sortcat: ''
  name: HTTP Response Splitting
  description: >-
    Occurs when data enters a through an untrusted source, most frequently an
    HTTP request, included in an HTTP response header sent to a web user without
    being validated for malicious characters.
  image: ''
  tags: Security
- building_block_id: traffic-flood
  type: Security
  category: Path Traversal Attack
  sorttype: ''
  sortcat: ''
  name: Traffic Flood
  description: >-
    A type of DoS attack that explores the way that the TCP connection is
    managed, with the generation of a lot of well-crafted TCP requisitions, with
    the objective to stop the Web Server or cause a performance decrease.
  image: ''
  tags: Security
- building_block_id: asymmetric-resource-consumption
  type: Security
  category: Probabilistic Technique
  sorttype: ''
  sortcat: ''
  name: Asymmetric Resource Consumption
  description: >-
    Asymmetric resource consumption consists in an attacker forcing a web
    application to consume excessive resources when the application fails to
    release, or incorrectly releases, a system resource.
  image: ''
  tags: Security
- building_block_id: cash-overflow
  type: Security
  category: Probabilistic Technique
  sorttype: ''
  sortcat: ''
  name: Cash Overflow
  description: >-
    An attack specifically aimed at exceeding hosting costs, either essentially
    bankrupting the service owner or exceeding the cost limits, leading the
    cloud service provider to disable the application.
  image: ''
  tags: Security
- building_block_id: denial-of-service
  type: Security
  category: Probabilistic Technique
  sorttype: ''
  sortcat: ''
  name: Denial of Service
  description: >-
    The Denial of Service (DoS) attack is focused on making a resource (site,
    application, server) unavailable for the purpose it was designed.
  image: ''
  tags: Security
- building_block_id: comment-injection-attack
  type: Security
  category: Protocol Manipulation
  sorttype: ''
  sortcat: ''
  name: Comment Injection Attack
  description: >-
    Comments injected into an application through input can be used to
    compromise a system, where data is parsed, an injected/malformed comment may
    cause the process to take unexpected actions that result in an attack.
  image: ''
  tags: Security
- building_block_id: custom-special-character-injection
  type: Security
  category: Protocol Manipulation
  sorttype: ''
  sortcat: ''
  name: Custom Special Character Injection
  description: >-
    Not properly filtering or quoting special characters or reserved words that
    are used in a custom or proprietary language or representation, allowing
    attackers to modify the syntax, content, or commands before they are
    processed.
  image: ''
  tags: Security
- building_block_id: double-encoding
  type: Security
  category: Protocol Manipulation
  sorttype: ''
  sortcat: ''
  name: Double Encoding
  description: >-
    Encoding user request parameters twice in hexadecimal format in order to
    bypass security controls or cause unexpected behavior from the application.
  image: ''
  tags: Security
- building_block_id: forced-browsing
  type: Security
  category: Protocol Manipulation
  sorttype: ''
  sortcat: ''
  name: Forced Browsing
  description: >-
    An attack that enumerates and opens up access to resources that are not
    referenced by the API, allowing the discovery unlinked contents in the
    domain directory, such as temp directories and files, and configuration
    files.
  image: ''
  tags: Security
- building_block_id: path-traversal
  type: Security
  category: Protocol Manipulation
  sorttype: ''
  sortcat: ''
  name: Path Traversal
  description: >-
    A Path Traversal attack aims to access files and directories that are stored
    outside the web root folder, by browsing the application, the attacker looks
    for absolute links to files stored on the web server.
  image: ''
  tags: Security
- building_block_id: relative-path-traversal
  type: Security
  category: Protocol Manipulation
  sorttype: ''
  sortcat: ''
  name: Relative Path Traversal
  description: >-
    This attack is a variant of Path Traversal and can be exploited when the
    application accepts the use of relative traversal sequences such as ../.
  image: ''
  tags: Security
- building_block_id: repudiation-attack
  type: Security
  category: Protocol Manipulation
  sorttype: ''
  sortcat: ''
  name: Repudiation Attack
  description: >-
    A repudiation attack happens when an application or system does not adopt
    controls to properly track and log users' actions, thus permitting malicious
    manipulation or forging the identification of new actions.
  image: ''
  tags: Security
- building_block_id: setting-manipulation
  type: Security
  category: Protocol Manipulation
  sorttype: ''
  sortcat: ''
  name: Setting Manipulation
  description: >-
    The modification of settings in order to cause misleading data or advantages
    on the attacker's behalf, manipulating values in the system and manage
    specific user resources of the application or affect its functionalities.
  image: ''
  tags: Security
- building_block_id: unicode-encoding
  type: Security
  category: Protocol Manipulation
  sorttype: ''
  sortcat: ''
  name: Unicode Encoding
  description: >-
    Opening up of flaws in the decoding mechanism implemented by decoding
    Unicode data format, allowing for encoding of certain characters in the URL
    to bypass filters, thus accessing restricted resources.
  image: ''
  tags: Security
- building_block_id: cash-overflow
  type: Security
  category: Resource Depletion
  sorttype: ''
  sortcat: ''
  name: Cash Overflow
  description: >-
    An attack specifically aimed at exceeding hosting costs, either essentially
    bankrupting the service owner or exceeding the cost limits, leading the
    cloud service provider to disable the application.
  image: ''
  tags: Security
- building_block_id: crosssite-request-forgery-csrf
  type: Security
  category: Resource Depletion
  sorttype: ''
  sortcat: ''
  name: Cross-Site Request Forgery (CSRF)
  description: >-
    An attack that forces an end user to execute unwanted actions on a web
    application in which they're currently authenticated, targeting
    state-changing requests, not theft of data, since the attacker has no way to
    see the response to the forged request.
  image: ''
  tags: Security
- building_block_id: maninthemiddle-attack
  type: Security
  category: Resource Depletion
  sorttype: ''
  sortcat: ''
  name: Man-in-the-Middle Attack
  description: >-
    The interception of communication between two systems, where once the TCP
    connection is intercepted, the attacker acts as a proxy, being able to read,
    insert and modify the data in the intercepted communication.
  image: ''
  tags: Security
- building_block_id: certification
  type: Security
  category: Other Security Considerations
  sorttype: ''
  sortcat: ''
  name: Certification
  description: >-
    Providing a system for validating and certifying an APIs security, scanning
    the surface area and providing guarantees that the endpoint(s) are secure.
  image: ''
  tags: Security
- building_block_id: security-visualization
  type: Security
  category: Other Security Considerations
  sorttype: ''
  sortcat: ''
  name: Security Visualization
  description: >-
    Allowing API owners with reports and charting, allowing them to visualize
    the surface area and security of an API. Providing a single way to see all
    the potential attacks, vulnerabilities, and what is being done about
    security overall.
  image: ''
  tags: Security
- building_block_id: compliance--auditing-reporting
  type: Security
  category: Other Security Considerations
  sorttype: ''
  sortcat: ''
  name: Compliance & Auditing Reporting
  description: >-
    Providing a specific interface for auditors and compliance officers to see
    what security has been applied to any interface. The reporting should
    provide details that are in alignment with whatever standard is being
    applied to the industry, as well as standard security approaches.
  image: ''
  tags: Security
- building_block_id: bug-bounty-program
  type: Security
  category: Other Security Considerations
  sorttype: ''
  sortcat: ''
  name: Bug Bounty Program
  description: >-
    Provide a platform for running a bug bounty program, that allows API
    providers to crowdsource the discovery, and review of an API, providing a
    potentially friendly way to handle security before bad actors can step in
    and find vulnerabilities.
  image: ''
  tags: Security
- building_block_id: endpoint-tagging
  type: Security
  category: Other Security Considerations
  sorttype: ''
  sortcat: ''
  name: Endpoint Tagging
  description: >-
    Allow for the tagging and organizing of APIs into specific groups for
    scanning, monitoring, and reviewing of APIs. Giving providers an easy way to
    organize so that they can be secured, and understood.
  image: ''
  tags: Security
- building_block_id: intrusion-correlation
  type: Security
  category: Other Security Considerations
  sorttype: ''
  sortcat: ''
  name: Intrusion Correlation
  description: >-
    Providing the ability to connect the dots between various security attacks
    and intrusions, providing insight into patterns used by attackers, locations
    of attacks, and other details that might help security.
  image: ''
  tags: Security
- building_block_id: risk-scoring
  type: Security
  category: Other Security Considerations
  sorttype: ''
  sortcat: ''
  name: Risk Scoring
  description: >-
    Offer a single scoring approach to be able to score attacks, based upon
    existing understanding of the space, but also historical data, providing a
    clear way to rank, and understand how vulnerabilities, and attacks could
    affect operations.
  image: ''
  tags: Security
- building_block_id: angular.js
  type: Single Page Applications (SPA)
  category: Single Page Applications (SPA)
  sorttype: ''
  sortcat: ''
  name: Angular.js
  description: ''
  image: ''
  tags: ''
- building_block_id: send-message
  type: SMS
  category: Messages
  sorttype: ''
  sortcat: ''
  name: Send Message
  description: Providing the ablity to send SMS to any mobile number via the API.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-message-send.png
  tags: ''
- building_block_id: receive-message
  type: SMS
  category: Messages
  sorttype: ''
  sortcat: ''
  name: Receive Message
  description: Providing the ability to receive SMS messages from any source.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-message-receive.png
  tags: ''
- building_block_id: search-messages
  type: SMS
  category: Messages
  sorttype: ''
  sortcat: ''
  name: Search Messages
  description: Provide the abilty to search SMS messages sent and received via the API.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-magnifying-glass.png
  tags: ''
- building_block_id: list-messages
  type: SMS
  category: Messages
  sorttype: ''
  sortcat: ''
  name: List Messages
  description: Provide a listing of SMS messages sent and received via the API.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-list.png
  tags: ''
- building_block_id: lists-/-groups
  type: SMS
  category: Organization
  sorttype: ''
  sortcat: ''
  name: Lists / Groups
  description: >-
    Provide the ability to manage lists of users, and send messages to these
    lists or groups.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-team.jpg
  tags: ''
- building_block_id: keywords-/-tags
  type: SMS
  category: Organization
  sorttype: ''
  sortcat: ''
  name: Keywords / Tags
  description: >-
    Provide the ability to manage keywords or tags and associate with SMS
    messages or the users who message are sent to or received from.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-keyword.png
  tags: ''
- building_block_id: delivery-receipts
  type: SMS
  category: Delivery
  sorttype: ''
  sortcat: ''
  name: Delivery Receipts
  description: The ability to receive confirmatons of delivery for SMS messages sent.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-deliver.png
  tags: ''
- building_block_id: number-validation
  type: SMS
  category: Delivery
  sorttype: ''
  sortcat: ''
  name: Number Validation
  description: >-
    Allowoing API users to validate phone numbers they are going to send SMS
    messages to, making sure they can receive SMS messages.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-clipboard-checkboxes.png
  tags: ''
- building_block_id: scheduling
  type: SMS
  category: Delivery
  sorttype: ''
  sortcat: ''
  name: Scheduling
  description: >-
    Allow messages to be schedule and put into a queue, only sending messages
    when their schedule time has rolled over.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-timer.png
  tags: ''
- building_block_id: short-codes
  type: SMS
  category: Delivery
  sorttype: ''
  sortcat: ''
  name: Short Codes
  description: >-
    Providing short codes for the delivery of messages, allowing simple messages
    to be delivered via a single number codes.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-telephone-keypad.png
  tags: ''
- building_block_id: account-balance
  type: SMS
  category: Account
  sorttype: ''
  sortcat: ''
  name: Account Balance
  description: >-
    Allow API access to check the balance of account to see where the budget is
    for sending or receiving of messages.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-account-balance.png
  tags: ''
- building_block_id: quota
  type: SMS
  category: Account
  sorttype: ''
  sortcat: ''
  name: Quota
  description: >-
    Allowng API access for checking account quota to see how may messages have
    been sent or received.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-cache.png
  tags: ''
- building_block_id: prices
  type: SMS
  category: Account
  sorttype: ''
  sortcat: ''
  name: Prices
  description: >-
    Allowing users to check the price for sending messages via the API and
    receive specific or all of the prices for messaging.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-dollar-sign.png
  tags: ''
- building_block_id: support-overview-page
  type: Support
  category: Overview
  sorttype: ''
  sortcat: ''
  name: Support Overview Page
  description: >-
    Providing a single overview page where users can find a listing of available
    support resources, with an easy to find link to this page.
  image: ''
  tags: ''
- building_block_id: forum
  type: Support
  category: Self-Service Support
  sorttype: ''
  sortcat: ''
  name: Forum
  description: >-
    A modern, up to date, active, and well monitored forum, providing
    self-service access to information about an APIs operation.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-forum.png
  tags: Management
- building_block_id: forum-rss
  type: Support
  category: Self-Service Support
  sorttype: ''
  sortcat: ''
  name: Forum RSS
  description: 'Going beyond just a forum, and providing an RSS feed for all forum activity.'
  image: ''
  tags: Management
- building_block_id: stack-overflow
  type: Support
  category: Self-Service Support
  sorttype: ''
  sortcat: ''
  name: Stack Overflow
  description: >-
    Using the public QA site Stack Overflow as part of support operations for an
    API.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-stack-exchange.png
  tags: Management
- building_block_id: knowledgebase
  type: Support
  category: Self-Service Support
  sorttype: ''
  sortcat: ''
  name: Knowledgebase
  description: >-
    Providing a single repository of content, organized by title, and tag,
    allowing you to search for keywords and phrases, as well as browse for
    answers.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-knowledge.png
  tags: Management
- building_block_id: social
  type: Support
  category: Direct Support
  sorttype: ''
  sortcat: ''
  name: Social
  description: >-
    Providing direct support using existing social channels used by the
    platform, or parent organization.
  image: ''
  tags: ''
- building_block_id: email
  type: Support
  category: Direct Support
  sorttype: ''
  sortcat: ''
  name: Email
  description: >-
    Providing a simple email address that API consumers can use when looking to
    get answers to their questions.
  image: ''
  tags: Management
- building_block_id: contact-form
  type: Support
  category: Direct Support
  sorttype: ''
  sortcat: ''
  name: Contact Form
  description: >-
    A contact form available in the central API portal, that developers can use
    to ask questions.
  image: ''
  tags: Management
- building_block_id: phone
  type: Support
  category: Direct Support
  sorttype: ''
  sortcat: ''
  name: Phone
  description: Providing a phone number that developers can call when they need support.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-phone.jpeg
  tags: Management
- building_block_id: ticket-system
  type: Support
  category: Direct Support
  sorttype: ''
  sortcat: ''
  name: Ticket System
  description: >-
    Provide a central ticketing system for all support requests, possibly using
    popular support software like Zendesk.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-ticket-system.png
  tags: Management
- building_block_id: office-hours
  type: Support
  category: Direct Support
  sorttype: ''
  sortcat: ''
  name: Office Hours
  description: >-
    Dedicated a specific time each week or monthly where support staff will be
    available via live chat to answer questions.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-clock.jpeg
  tags: Management
- building_block_id: calendar
  type: Support
  category: Direct Support
  sorttype: ''
  sortcat: ''
  name: Calendar
  description: >-
    A single calendar of all events related to API operations, providing a place
    where developers can find all related goings on.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-calendar.png
  tags: Management
- building_block_id: paid-support-plans
  type: Support
  category: Direct Support
  sorttype: ''
  sortcat: ''
  name: Paid Support Plans
  description: >-
    Providing paid support tiers for developers to use, allowing them to pay by
    the minute, hour, or project, and get the intimate, direct support they
    desire.
  image: ''
  tags: Management
- building_block_id: oauth
  type: Technology
  category: Technology
  sorttype: ''
  sortcat: ''
  name: oAuth
  description: >-
    oAuth (Open Authorization) is an open standard for authorization. It allows
    users to share their private resources stored on one site with another site
    without having to hand out their credentials, typically username and
    password.OAuth allows users to hand out tokens instead of credentials to
    their data hosted by a given service provider. Each token grants access to a
    specific site for specific resources and for a defined duration. This allows
    a user to grant a third party site access to their information stored with
    another service provider, without sharing their access permissions or the
    full extent of their data.OAuth is a service that is complementary to, but
    distinct from, OpenID. OAuth is the preferred authentication method for
    APIs.&nbsp; There are plenty of resources available for deploying an OAuth
    server in your preferred language, for use with your API.
  image: ''
  tags: ''
- building_block_id: pragmatic-rest
  type: Technology
  category: Technology
  sorttype: ''
  sortcat: ''
  name: Pragmatic REST
  description: >-
    REpresentational State Transfer (REST) is a style of software architecture
    for distributed systems introduced and defined in 2000 by Roy Fielding in
    his doctoral dissertation, that has increasingly displaced other design
    models such as SOAP, due to its simplicity. I label this building block as
    &ldquo;Pragmatic REST&rdquo; to avoid the common responses from the
    community about what is truly REST. &nbsp;I encourage you to read Roy
    Fielding&rsquo;s dissertation, buy books like APIs: A Strategy Guide and
    participate in communities like API Craft--then form your own vision of what
    REST is, to meet your business objectives. &nbsp; REST&rsquo;s success lies
    in its simplicity, but is born out of very heated, ongoing and complex
    discussions around its design. &nbsp;When planning the design of your API,
    focus on the the simplicity, and what is important to your company.
    &nbsp;Don&rsquo;t listen to the haters, there will always be someone who
    will criticize you for your design.
  image: ''
  tags: ''
- building_block_id: oembed
  type: Technology
  category: Technology
  sorttype: ''
  sortcat: ''
  name: oEmbed
  description: >-
    oEmbed is a format that allows users to embed content, such as photos or
    videos, into web sites.  oEmbed starts with a content &ldquo;provider&rdquo;
    wanting to allow API users to embed content.  Let's use Flickr as an example
    content provider.  To do this, Flickr deploys an oEmbed API.  Then an API
    user or content consumer, who wishes to share a picture from Flickr gets the
    URL of picture they want to share and passes it to Flickr's oEmbed API:
    Flickr's oEmbed API returns:  Now the content consumer can take returned
    information about the Flickr image and display on web page using JavaScript,
    PHP or other language.  This is just a simple example of using oEmbed to
    display a Flickr image, much more is possible with oEmbed.  Some oEmbed
    providers include:  YouTube Flickr Viddler Qik Revision3 Hulu Vimeo oohEmbed
    Poll Everywhere My Opera Embedly  There are several language libraries for
    deploying oEmbed APIs:  PHP: php-oembed PHP: Services_oEmbed Perl:
    Web-oEmbed Ruby: oembed_links Python oEmbed Django: djangoembed  oEmbed
    APIs, bundled with simple, configurable JavaScript widgets give API users a
    simple way to embed and syndicate content to other web sites.  Even for
    non-developers.
  image: ''
  tags: ''
- building_block_id: basic-auth
  type: Technology
  category: Technology
  sorttype: ''
  sortcat: ''
  name: Basic Auth
  description: >-
    Basic Auth is a way for a web browser or application to provide credentials
    in the form of a username and password.  Because Basic Auth is integrated
    into HTTP protocol it is the easiest way for users to authenticate with a
    RESTful API. Basic Auth is easily integrated, however if SSL is not used,
    the username and password are passed in plain text and can be easily
    intercepted on the open Internet. OAuth is a much better choice for RESTful
    API authentication, but Basic Auth is perfectly suited for APIs that are
    intended for a wider audience and do not give access to sensitive
    information.
  image: ''
  tags: ''
- building_block_id: extensible-markup-language-xml
  type: Technology
  category: Technology
  sorttype: ''
  sortcat: ''
  name: Extensible Markup Language (XML)
  description: >-
    XML (Extensible Markup Language) is a way for programs to exchange
    information. It is very similar to JSON (JavaScript Object Notation). XML
    was originally designed to describe documents, but has be adapted to
    describe anything from contacts to geographic data. APIs use XML to describe
    information. A XML transmission describing me might look like:  XML is a
    markup language much like HTML and uses opening and closing tags to describe
    content.  It allows computers to tell the difference between my first name
    and last name, for example, or any other information that it describes. XML
    has long been the standard for Web Service communication, however recently
    it has been losing ground to JSON because it is considered more bloated and
    less efficient to use. As the popularity of REST increases, JSON may
    continue as the preferred standard, but XML will still have a place with
    many older developers, because it was the original way for web services to
    communicate.
  image: ''
  tags: Markup
- building_block_id: javascript-object-notation-json
  type: Technology
  category: Technology
  sorttype: ''
  sortcat: ''
  name: JavaScript Object Notation (JSON)
  description: >-
    JSON (JavaScript Object Notation) is a way for programs to exchange
    information.  It is very similar to XML (Extensible Markup Language). APIs
    are are way for programs to communicate and since they don't have voices,
    they need a way to describe things.  APIs use JSON to describe information.
    A JSON transmission describing me might look like:  JSON uses brackets,
    quotes, colons and commas to separate data, and give the information
    meaningful structure.  It allows computers to tell the difference between my
    first name and last name or any other information that describes me.  The
    protocol sketched above is really just an approximation of what JSON does.
    After all, it is meant for computers and not humans, JSON has become one of
    the preferred methods for programmers to use for API communication.  It's a
    light weight, simple way to exchange data across the Internet while still
    maintaining the structure and meaning of that data.
  image: ''
  tags: Data
- building_block_id: websockets
  type: Technology
  category: Technology
  sorttype: ''
  sortcat: ''
  name: WebSockets
  description: >-
    WebSocket is a protocol providing full-duplex communication channels over a
    single TCP connection. The WebSocket protocol was standardized by the IETF
    as RFC 6455 in 2011, and the WebSocket API in Web IDL is being standardized
    by the W3C.
  image: ''
  tags: 'HTML5,WebSockets,Standard,W3C'
- building_block_id: webhooks
  type: Technology
  category: Technology
  sorttype: ''
  sortcat: ''
  name: WebHooks
  description: >-
    A webhook in web development is a method of augmenting or altering the
    behavior of a web page, or web application, with custom callbacks. These
    callbacks may be maintained, modified, and managed by third-party users and
    developers who may not necessarily be affiliated with the originating
    website or application.
  image: ''
  tags: ''
- building_block_id: terms-of-service-page
  type: Terms of Service
  category: Overview
  sorttype: ''
  sortcat: ''
  name: Terms of Service Page
  description: >-
    Providing a single page dedicated to providing a listing of elements that
    impact terms of service for developers and end-users.
  image: ''
  tags: ''
- building_block_id: sites-covered
  type: Terms of Service
  category: Key Considerations
  sorttype: ''
  sortcat: ''
  name: Sites Covered
  description: >-
    What sites are covered via the terms of use. Even if there is a single,
    provide a basic reference to the domain. If there are multiple domains, make
    sure and list them. Also consider subdomains that might be a consideration.
  image: ''
  tags: Terms of Service
- building_block_id: opting-out
  type: Terms of Service
  category: Key Considerations
  sorttype: ''
  sortcat: ''
  name: Opting Out
  description: >-
    What are the possibilities for opting out of services? Are there data
    sharing, licensing, or communication areas that can be opted out, or NOT
    opted out of.
  image: ''
  tags: Terms of Service
- building_block_id: pay-for-changes
  type: Terms of Service
  category: Key Considerations
  sorttype: ''
  sortcat: ''
  name: Pay For Changes
  description: Can API consumers pay to get any aspects of terms of services adjusted?
  image: ''
  tags: ''
- building_block_id: how-we-use-your-information
  type: Terms of Service
  category: Data & Information
  sorttype: ''
  sortcat: ''
  name: How We Use Your Information
  description: >-
    Be clear about how information is used. Is it only used as part of
    operations. Provide straightforward explanations of how information is put
    to work to power the platform.
  image: ''
  tags: Terms of Service
- building_block_id: personal-information
  type: Terms of Service
  category: Data & Information
  sorttype: ''
  sortcat: ''
  name: Personal Information
  description: >-
    What personal information is collected, stored, shared, and put to use? What
    are the security procedures, and other considerations for dealing with
    privacy of users personal information.
  image: ''
  tags: Terms of Service
- building_block_id: nonpersonal-information
  type: Terms of Service
  category: Data & Information
  sorttype: ''
  sortcat: ''
  name: Non-Personal Information
  description: >-
    What are the considerations for all other content and data areas. This not
    personally identifiable information, but everything else.
  image: ''
  tags: Terms of Service
- building_block_id: aggregate-information
  type: Terms of Service
  category: Data & Information
  sorttype: ''
  sortcat: ''
  name: Aggregate Information
  description: >-
    What information is aggregated, and what are the considerations when it
    comes to the platform terms of service.
  image: ''
  tags: Terms of Service
- building_block_id: access-to-information
  type: Terms of Service
  category: Data & Information
  sorttype: ''
  sortcat: ''
  name: Access To Information
  description: >-
    What levels of access are there. Is everything available via APIs or
    downloads, or are there restrictions around what you can get access to.
  image: ''
  tags: Terms of Service
- building_block_id: accuracy-of-information
  type: Terms of Service
  category: Data & Information
  sorttype: ''
  sortcat: ''
  name: Accuracy of Information
  description: >-
    What are the expectations for accuracy of information available via the
    platform. What is the bar, and how is this level determined and enforced.
  image: ''
  tags: Terms of Service
- building_block_id: log-files
  type: Terms of Service
  category: Information Storage
  sorttype: ''
  sortcat: ''
  name: Log Files
  description: >-
    Providing some details on how log files are used in platform operations,
    what is logged, and what isn't, and how things are collected, retained and
    shared.
  image: ''
  tags: Terms of Service
- building_block_id: geo-guidelines
  type: Terms of Service
  category: Tracking Used
  sorttype: ''
  sortcat: ''
  name: Geo Guidelines
  description: >-
    Providing an overview of considerations when it comes to location, and geo
    tracking via the platform.
  image: ''
  tags: Terms of Service
- building_block_id: cookies
  type: Terms of Service
  category: Tracking Used
  sorttype: ''
  sortcat: ''
  name: Cookies
  description: >-
    What are the cookie policies? How are cookies crafted, stored, and
    deprecated. Cover the cookie policies for a platform, and any connection to
    the API.
  image: ''
  tags: Terms of Service
- building_block_id: web-beacons
  type: Terms of Service
  category: Sharing Approaches
  sorttype: ''
  sortcat: ''
  name: Web Beacons
  description: >-
    Are web beacons in use? Are they return as part of API operations, and
    possibly required in all web and mobile deployments
  image: ''
  tags: Terms of Service
- building_block_id: partner-resources
  type: Terms of Service
  category: Sharing Approaches
  sorttype: ''
  sortcat: ''
  name: Partner Resources
  description: >-
    Are there any members-only and partner specific opportunities, and how do
    these different levels of access impact terms of service.
  image: ''
  tags: Terms of Service
- building_block_id: information-sharing
  type: Terms of Service
  category: Sharing Approaches
  sorttype: ''
  sortcat: ''
  name: Information Sharing
  description: >-
    How is information shared with partners, government, and any potentially
    external partners. Does this occur via the API, and how does this affect
    terms of service.
  image: ''
  tags: Terms of Service
- building_block_id: childrens-privacy-overview
  type: Terms of Service
  category: Concerns For Minors
  sorttype: ''
  sortcat: ''
  name: Childrens Privacy Overview
  description: >-
    Are there any special considerations for children's privacy. Will minors
    potentially be using the system, and what areas should be considered?
  image: ''
  tags: Terms of Service
- building_block_id: childrens-online-privacy-protection-act-coppa
  type: Terms of Service
  category: Concerns For Minors
  sorttype: ''
  sortcat: ''
  name: Childrens Online Privacy Protection Act (COPPA)
  description: >-
    Congress enacted the Children’s Online Privacy Protection Act (COPPA) in
    1998.  COPPA required the Federal Trade Commission to issue and enforce
    regulations concerning children’s online privacy.
  image: ''
  tags: ''
- building_block_id: links-to-nonoperators-web-sites
  type: Terms of Service
  category: Linking To Other Sites
  sorttype: ''
  sortcat: ''
  name: Links to Non-Operators Web Sites
  description: >-
    What are the levels of responsibility and liability when it comes to
    external links made available through platform operations.
  image: ''
  tags: Terms of Service
- building_block_id: service-level-agreement
  type: Terms of Service
  category: Services
  sorttype: ''
  sortcat: ''
  name: Service Level Agreement
  description: >-
    Provide a service level agreements (SLA) describing what service(s) are
    offered by an API provider, with details about the quality of service, an
    ​warranties, disaster recovery, and steps for termination of agreement.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-handshake.jpg
  tags: 'Management,API Management Legal'
- building_block_id: deprecation-policy
  type: Terms of Service
  category: Services
  sorttype: ''
  sortcat: ''
  name: Deprecation Policy
  description: >-
    Provide a API deprecation policy setting expectations with API consumers
    about when and how API resources will be deprecated and shut down.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-deprecation.png
  tags: 'Management,API Management Legal'
- building_block_id: monetization-guidelines
  type: Terms of Service
  category: Monetization
  sorttype: ''
  sortcat: ''
  name: Monetization Guidelines
  description: >-
    Providing legal guidelines for how developers can monetize around resources
    that are available via an API.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-dollar-sign.png
  tags: 'Management,API Management Legal'
- building_block_id: trademarks
  type: Terms of Service
  category: Corporate
  sorttype: ''
  sortcat: ''
  name: Trademarks
  description: >-
    Providing a reference to​ corporate trademarks that are part of API
    operations, and developers may have to consider.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-trademark.png
  tags: API Management Legal
- building_block_id: compliance
  type: Terms of Service
  category: Regulation
  sorttype: ''
  sortcat: ''
  name: Compliance
  description: >-
    A page providing compliance related information, covering how a company,
    platform, and APIs complies with government and industry regulations.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-compliance.png
  tags: 'Management,API Management Legal'
- building_block_id: load-testing
  type: Testing
  category: Core Testing
  sorttype: ''
  sortcat: ''
  name: Load Testing
  description: Offer loading testing services for HTTP endpoints.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-load-testing.jpeg
  tags: Testing
- building_block_id: response-header-inspector
  type: Testing
  category: Core Testing
  sorttype: ''
  sortcat: ''
  name: Response Header Inspector
  description: Ability to inspect a response header.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-inspection.png
  tags: Testing
- building_block_id: response-body-inspector
  type: Testing
  category: Core Testing
  sorttype: ''
  sortcat: ''
  name: Response Body Inspector
  description: Ability to inspect a response body.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-inspection.png
  tags: Testing
- building_block_id: request-retry
  type: Testing
  category: Core Testing
  sorttype: ''
  sortcat: ''
  name: Request Retry
  description: Ability to retry a specific request.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-retry.png
  tags: Testing
- building_block_id: request-sharing
  type: Testing
  category: Core Testing
  sorttype: ''
  sortcat: ''
  name: Request Sharing
  description: Allow for the sharing of requests.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-sharing.jpeg
  tags: Testing
- building_block_id: request-playback
  type: Testing
  category: Core Testing
  sorttype: ''
  sortcat: ''
  name: Request Playback
  description: Enable the playback of a single request.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-play.jpg
  tags: Testing
- building_block_id: request-scheduling
  type: Testing
  category: Core Testing
  sorttype: ''
  sortcat: ''
  name: Request Scheduling
  description: Allow for the scheduling of requests at a specific time.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-scheduling.jpeg
  tags: Testing
- building_block_id: request-compare
  type: Testing
  category: Core Testing
  sorttype: ''
  sortcat: ''
  name: Request Compare
  description: Allow for the comparing of two requests.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-compare.png
  tags: Testing
- building_block_id: request-scripting
  type: Testing
  category: Core Testing
  sorttype: ''
  sortcat: ''
  name: Request Scripting
  description: Provide the ability to script against requests.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-html-code.png
  tags: Testing
- building_block_id: request-automation
  type: Testing
  category: Core Testing
  sorttype: ''
  sortcat: ''
  name: Request Automation
  description: Allow for the automation of multiple requests.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-clock-gear.png
  tags: Testing
- building_block_id: request-commenting
  type: Testing
  category: Core Testing
  sorttype: ''
  sortcat: ''
  name: Request Commenting
  description: Enabling users to comment on a specific request.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-chat.png
  tags: Testing
- building_block_id: simulator
  type: Testing
  category: Core Testing
  sorttype: ''
  sortcat: ''
  name: Simulator
  description: Provide tools for simulating requests.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-siimulation.png
  tags: Testing
- building_block_id: templates
  type: Testing
  category: Core Testing
  sorttype: ''
  sortcat: ''
  name: Templates
  description: Offer templates of common or specialized requests.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-data-template.png
  tags: Testing
- building_block_id: data-scenarios
  type: Testing
  category: Core Testing
  sorttype: ''
  sortcat: ''
  name: Data Scenarios
  description: Provide specific data scenarios that can be executed.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-scenario.png
  tags: Testing
- building_block_id: region-based-testing
  type: Testing
  category: Targeted Testing
  sorttype: ''
  sortcat: ''
  name: Region Based Testing
  description: Allow for testing from a specific region.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-region.png
  tags: Testing
- building_block_id: provider-based-testing
  type: Testing
  category: Targeted Testing
  sorttype: ''
  sortcat: ''
  name: Provider Based Testing
  description: Allow for testing from a specific provider
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-api-provider.png
  tags: Testing
- building_block_id: basicauth
  type: Testing
  category: Authentication
  sorttype: ''
  sortcat: ''
  name: Basic-Auth
  description: Use Basic Auth for authentication.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-basic-auth.jpg
  tags: Testing
- building_block_id: api-keys
  type: Testing
  category: Authentication
  sorttype: ''
  sortcat: ''
  name: API Keys
  description: Use API keys for authentication.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-key.png
  tags: Testing
- building_block_id: oauth
  type: Testing
  category: Authentication
  sorttype: ''
  sortcat: ''
  name: OAuth
  description: Use OAuth for authentication.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/oauth-logo.png
  tags: Testing
- building_block_id: collections
  type: Testing
  category: Utility
  sorttype: ''
  sortcat: ''
  name: Collections
  description: Allow tests to be organized into collections.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-collection.png
  tags: Testing
- building_block_id: command-line-interface
  type: Testing
  category: Utility
  sorttype: ''
  sortcat: ''
  name: Command Line Interface
  description: Provide a command line interface for working with tests.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-command-line.png
  tags: Testing
- building_block_id: virtualization
  type: Testing
  category: Utility
  sorttype: ''
  sortcat: ''
  name: Virtualization
  description: Allow for tests against virtualized APIs.
  image: ''
  tags: ''
- building_block_id: teams
  type: Testing
  category: Utility
  sorttype: ''
  sortcat: ''
  name: Teams
  description: Allow for team interaction when testing.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-team-male-female.png
  tags: Testing
- building_block_id: api
  type: Testing
  category: Utility
  sorttype: ''
  sortcat: ''
  name: API
  description: Provide an API for all parts of testing platform.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/api-commons-icon.png
  tags: Testing
- building_block_id: postman
  type: Testing
  category: Import
  sorttype: ''
  sortcat: ''
  name: Postman
  description: Allow for the importing of APIs with Postman.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-postman.png
  tags: Testing
- building_block_id: openapi-spec
  type: Testing
  category: Import
  sorttype: ''
  sortcat: ''
  name: OpenAPI Spec
  description: Allow for the importing of APIs with OpenAPI Spec.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-swagger-round.png
  tags: Testing
- building_block_id: raml
  type: Testing
  category: Import
  sorttype: ''
  sortcat: ''
  name: RAML
  description: Allow for the importing of APIs with RAML.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-raml.png
  tags: Testing
- building_block_id: har
  type: Testing
  category: Import
  sorttype: ''
  sortcat: ''
  name: HAR
  description: Allow for the importing of APIs with HAR
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-har-file.png
  tags: Testing
- building_block_id: junit-xml
  type: Testing
  category: Import
  sorttype: ''
  sortcat: ''
  name: JUnit XML
  description: Allow for the importing of APIs with JUnit XML.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/junit-icon.gif
  tags: JUNIT XML
- building_block_id: jmeter
  type: Testing
  category: 3rd Party
  sorttype: ''
  sortcat: ''
  name: JMeter
  description: Provide 3rd party integration with JMeter.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/jmeter-logo.jpg
  tags: Testing
- building_block_id: selenium
  type: Testing
  category: 3rd Party
  sorttype: ''
  sortcat: ''
  name: Selenium
  description: Provide 3rd party integration with Selenium.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/selenium-icon.png
  tags: Testing
- building_block_id: jenkins
  type: Testing
  category: 3rd Party
  sorttype: ''
  sortcat: ''
  name: Jenkins
  description: Provide 3rd party integration with Jenkins.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/jenkins-logo.png
  tags: Testing
- building_block_id: teamcity
  type: Testing
  category: 3rd Party
  sorttype: ''
  sortcat: ''
  name: TeamCity
  description: Provide 3rd party integration with TeamCity.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/teamcity_logo.png
  tags: Testing
- building_block_id: bamboo
  type: Testing
  category: 3rd Party
  sorttype: ''
  sortcat: ''
  name: Bamboo
  description: Provide 3rd party integration with Bamboo.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bamboo-icon.png
  tags: Testing
- building_block_id: travis
  type: Testing
  category: 3rd Party
  sorttype: ''
  sortcat: ''
  name: Travis
  description: Provide 3rd party integration with Travis.
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/travis-mascot-200px.png
  tags: Testing
- building_block_id: transparency-report
  type: Transparency
  category: Transparency
  sorttype: ''
  sortcat: ''
  name: Transparency Report
  description: Providing a transpnarency report for the entire platform.
  image: ''
  tags: Transparency
- building_block_id: accounts
  type: University
  category: Student
  sorttype: ''
  sortcat: ''
  name: Accounts
  description: ''
  image: >-
    http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/building-blocks/bw-users-male-female.png
  tags: ''
- building_block_id: directory
  type: University
  category: Student
  sorttype: ''
  sortcat: ''
  name: Directory
  description: ''
  image: ''
  tags: ''
- building_block_id: billing
  type: University
  category: Student
  sorttype: ''
  sortcat: ''
  name: Billing
  description: ''
  image: ''
  tags: ''
- building_block_id: invoices
  type: University
  category: Student
  sorttype: ''
  sortcat: ''
  name: Invoices
  description: ''
  image: ''
  tags: ''
- building_block_id: payments
  type: University
  category: Student
  sorttype: ''
  sortcat: ''
  name: Payments
  description: ''
  image: ''
  tags: ''
- building_block_id: refunds
  type: University
  category: Student
  sorttype: ''
  sortcat: ''
  name: refunds
  description: ''
  image: ''
  tags: ''
- building_block_id: tuition
  type: University
  category: Student
  sorttype: ''
  sortcat: ''
  name: Tuition
  description: ''
  image: ''
  tags: ''
- building_block_id: health
  type: University
  category: Student
  sorttype: ''
  sortcat: ''
  name: Health
  description: ''
  image: ''
  tags: ''
- building_block_id: counseling
  type: University
  category: Student
  sorttype: ''
  sortcat: ''
  name: Counseling
  description: ''
  image: ''
  tags: ''
- building_block_id: lockers
  type: University
  category: Student
  sorttype: ''
  sortcat: ''
  name: Lockers
  description: ''
  image: ''
  tags: ''
- building_block_id: alumni
  type: University
  category: Student
  sorttype: ''
  sortcat: ''
  name: Alumni
  description: ''
  image: ''
  tags: ''
- building_block_id: terms
  type: University
  category: Academic
  sorttype: ''
  sortcat: ''
  name: Terms
  description: ''
  image: ''
  tags: ''
- building_block_id: classes
  type: University
  category: Academic
  sorttype: ''
  sortcat: ''
  name: Classes
  description: ''
  image: ''
  tags: ''
- building_block_id: grades
  type: University
  category: Academic
  sorttype: ''
  sortcat: ''
  name: Grades
  description: ''
  image: ''
  tags: ''
- building_block_id: exams
  type: University
  category: Academic
  sorttype: ''
  sortcat: ''
  name: Exams
  description: ''
  image: ''
  tags: ''
- building_block_id: records
  type: University
  category: Academic
  sorttype: ''
  sortcat: ''
  name: Records
  description: ''
  image: ''
  tags: ''
- building_block_id: credits
  type: University
  category: Academic
  sorttype: ''
  sortcat: ''
  name: Credits
  description: ''
  image: ''
  tags: ''
- building_block_id: registration
  type: University
  category: Academic
  sorttype: ''
  sortcat: ''
  name: Registration
  description: ''
  image: ''
  tags: ''
- building_block_id: transfers
  type: University
  category: Academic
  sorttype: ''
  sortcat: ''
  name: Transfers
  description: ''
  image: ''
  tags: ''
- building_block_id: study-abroad
  type: University
  category: Academic
  sorttype: ''
  sortcat: ''
  name: Study Abroad
  description: ''
  image: ''
  tags: ''
- building_block_id: directory
  type: University
  category: Faculty
  sorttype: ''
  sortcat: ''
  name: Directory
  description: ''
  image: ''
  tags: ''
- building_block_id: research
  type: University
  category: Faculty
  sorttype: ''
  sortcat: ''
  name: Research
  description: ''
  image: ''
  tags: ''
- building_block_id: tenure
  type: University
  category: Faculty
  sorttype: ''
  sortcat: ''
  name: Tenure
  description: ''
  image: ''
  tags: ''
- building_block_id: announcements
  type: University
  category: Courseware
  sorttype: ''
  sortcat: ''
  name: Announcements
  description: ''
  image: ''
  tags: ''
- building_block_id: courses
  type: University
  category: Courseware
  sorttype: ''
  sortcat: ''
  name: Courses
  description: ''
  image: ''
  tags: ''
- building_block_id: curriculum
  type: University
  category: Courseware
  sorttype: ''
  sortcat: ''
  name: Curriculum
  description: ''
  image: ''
  tags: ''
- building_block_id: assignents
  type: University
  category: Courseware
  sorttype: ''
  sortcat: ''
  name: Assignents
  description: ''
  image: ''
  tags: ''
- building_block_id: syllabus
  type: University
  category: Courseware
  sorttype: ''
  sortcat: ''
  name: Syllabus
  description: ''
  image: ''
  tags: ''
- building_block_id: retirement
  type: University
  category: Benefits
  sorttype: ''
  sortcat: ''
  name: Retirement
  description: ''
  image: ''
  tags: ''
- building_block_id: leave
  type: University
  category: Benefits
  sorttype: ''
  sortcat: ''
  name: Leave
  description: ''
  image: ''
  tags: ''
- building_block_id: calendars
  type: University
  category: Events / Calendaring
  sorttype: ''
  sortcat: ''
  name: Calendars
  description: ''
  image: ''
  tags: ''
- building_block_id: incidents
  type: University
  category: Events / Calendaring
  sorttype: ''
  sortcat: ''
  name: Incidents
  description: ''
  image: ''
  tags: ''
- building_block_id: time-away
  type: University
  category: Events / Calendaring
  sorttype: ''
  sortcat: ''
  name: Time Away
  description: ''
  image: ''
  tags: ''
- building_block_id: email
  type: University
  category: Communications
  sorttype: ''
  sortcat: ''
  name: Email
  description: ''
  image: ''
  tags: ''
- building_block_id: messaging
  type: University
  category: Communications
  sorttype: ''
  sortcat: ''
  name: Messaging
  description: ''
  image: ''
  tags: ''
- building_block_id: comments
  type: University
  category: Communications
  sorttype: ''
  sortcat: ''
  name: Comments
  description: ''
  image: ''
  tags: ''
- building_block_id: push-notifications
  type: University
  category: Communications
  sorttype: ''
  sortcat: ''
  name: Push Notifications
  description: ''
  image: ''
  tags: ''
- building_block_id: services
  type: University
  category: File Management
  sorttype: ''
  sortcat: ''
  name: Services
  description: ''
  image: ''
  tags: ''
- building_block_id: locations
  type: University
  category: File Management
  sorttype: ''
  sortcat: ''
  name: Locations
  description: ''
  image: ''
  tags: ''
- building_block_id: photos
  type: University
  category: File Management
  sorttype: ''
  sortcat: ''
  name: Photos
  description: ''
  image: ''
  tags: ''
- building_block_id: items
  type: University
  category: Assets / Inventory
  sorttype: ''
  sortcat: ''
  name: Items
  description: ''
  image: ''
  tags: ''
- building_block_id: compute
  type: University
  category: Assets / Inventory
  sorttype: ''
  sortcat: ''
  name: Compute
  description: ''
  image: ''
  tags: ''
- building_block_id: space
  type: University
  category: Assets / Inventory
  sorttype: ''
  sortcat: ''
  name: Space
  description: ''
  image: ''
  tags: ''
- building_block_id: dispolsals
  type: University
  category: Assets / Inventory
  sorttype: ''
  sortcat: ''
  name: Dispolsals
  description: ''
  image: ''
  tags: ''
- building_block_id: search
  type: University
  category: Libraries
  sorttype: ''
  sortcat: ''
  name: Search
  description: ''
  image: ''
  tags: ''
- building_block_id: locations
  type: University
  category: Libraries
  sorttype: ''
  sortcat: ''
  name: Locations
  description: ''
  image: ''
  tags: ''
- building_block_id: metadata
  type: University
  category: Libraries
  sorttype: ''
  sortcat: ''
  name: Metadata
  description: ''
  image: ''
  tags: ''
- building_block_id: journals
  type: University
  category: Collections
  sorttype: ''
  sortcat: ''
  name: Journals
  description: ''
  image: ''
  tags: ''
- building_block_id: institution
  type: University
  category: Collections
  sorttype: ''
  sortcat: ''
  name: Institution
  description: ''
  image: ''
  tags: ''
- building_block_id: corporate
  type: University
  category: Collections
  sorttype: ''
  sortcat: ''
  name: Corporate
  description: ''
  image: ''
  tags: ''
- building_block_id: museum
  type: University
  category: Collections
  sorttype: ''
  sortcat: ''
  name: Museum
  description: ''
  image: ''
  tags: ''
- building_block_id: forums
  type: University
  category: Organizations
  sorttype: ''
  sortcat: ''
  name: Forums
  description: ''
  image: ''
  tags: ''
- building_block_id: groups
  type: University
  category: Organizations
  sorttype: ''
  sortcat: ''
  name: Groups
  description: ''
  image: ''
  tags: ''
- building_block_id: programs
  type: University
  category: Organizations
  sorttype: ''
  sortcat: ''
  name: Programs
  description: ''
  image: ''
  tags: ''
- building_block_id: churches
  type: University
  category: Organizations
  sorttype: ''
  sortcat: ''
  name: Churches
  description: ''
  image: ''
  tags: ''
- building_block_id: transfer-institutions
  type: University
  category: Organizations
  sorttype: ''
  sortcat: ''
  name: Transfer Institutions
  description: ''
  image: ''
  tags: ''
- building_block_id: application
  type: University
  category: Financial Aid
  sorttype: ''
  sortcat: ''
  name: Application
  description: ''
  image: ''
  tags: ''
- building_block_id: counseling
  type: University
  category: Financial Aid
  sorttype: ''
  sortcat: ''
  name: Counseling
  description: ''
  image: ''
  tags: ''
- building_block_id: loans
  type: University
  category: Financial Aid
  sorttype: ''
  sortcat: ''
  name: Loans
  description: ''
  image: ''
  tags: ''
- building_block_id: grants
  type: University
  category: Financial Aid
  sorttype: ''
  sortcat: ''
  name: Grants
  description: ''
  image: ''
  tags: ''
- building_block_id: student-information
  type: University
  category: Financial Aid
  sorttype: ''
  sortcat: ''
  name: Student Information
  description: ''
  image: ''
  tags: ''
- building_block_id: contacts
  type: University
  category: Human Resources
  sorttype: ''
  sortcat: ''
  name: Contacts
  description: ''
  image: ''
  tags: ''
- building_block_id: career-plans
  type: University
  category: Human Resources
  sorttype: ''
  sortcat: ''
  name: Career Plans
  description: ''
  image: ''
  tags: ''
- building_block_id: endorsements
  type: University
  category: Human Resources
  sorttype: ''
  sortcat: ''
  name: Endorsements
  description: ''
  image: ''
  tags: ''
- building_block_id: employees
  type: University
  category: Human Resources
  sorttype: ''
  sortcat: ''
  name: Employees
  description: ''
  image: ''
  tags: ''
- building_block_id: hiring
  type: University
  category: Human Resources
  sorttype: ''
  sortcat: ''
  name: Hiring
  description: ''
  image: ''
  tags: ''
- building_block_id: positions
  type: University
  category: Human Resources
  sorttype: ''
  sortcat: ''
  name: Positions
  description: ''
  image: ''
  tags: ''
- building_block_id: training
  type: University
  category: Human Resources
  sorttype: ''
  sortcat: ''
  name: Training
  description: ''
  image: ''
  tags: ''
- building_block_id: organization
  type: University
  category: Identity
  sorttype: ''
  sortcat: ''
  name: Organization
  description: ''
  image: ''
  tags: ''
- building_block_id: person
  type: University
  category: Identity
  sorttype: ''
  sortcat: ''
  name: Person
  description: ''
  image: ''
  tags: ''
- building_block_id: access
  type: University
  category: Identity
  sorttype: ''
  sortcat: ''
  name: Access
  description: ''
  image: ''
  tags: ''
- building_block_id: applications
  type: University
  category: Internship
  sorttype: ''
  sortcat: ''
  name: Applications
  description: ''
  image: ''
  tags: ''
- building_block_id: providers
  type: University
  category: Internship
  sorttype: ''
  sortcat: ''
  name: Providers
  description: ''
  image: ''
  tags: ''
- building_block_id: payments
  type: University
  category: Payroll
  sorttype: ''
  sortcat: ''
  name: Payments
  description: ''
  image: ''
  tags: ''
- building_block_id: deductions
  type: University
  category: Payroll
  sorttype: ''
  sortcat: ''
  name: Deductions
  description: ''
  image: ''
  tags: ''
- building_block_id: earnings
  type: University
  category: Payroll
  sorttype: ''
  sortcat: ''
  name: Earnings
  description: ''
  image: ''
  tags: ''
- building_block_id: time-reporting
  type: University
  category: Payroll
  sorttype: ''
  sortcat: ''
  name: Time Reporting
  description: ''
  image: ''
  tags: ''
- building_block_id: purchase-orders
  type: University
  category: Purchasing
  sorttype: ''
  sortcat: ''
  name: Purchase Orders
  description: ''
  image: ''
  tags: ''
- building_block_id: request-for-quotes
  type: University
  category: Purchasing
  sorttype: ''
  sortcat: ''
  name: Request for Quotes
  description: ''
  image: ''
  tags: ''
- building_block_id: change-orders
  type: University
  category: Purchasing
  sorttype: ''
  sortcat: ''
  name: Change Orders
  description: ''
  image: ''
  tags: ''
- building_block_id: return-to-vendors
  type: University
  category: Purchasing
  sorttype: ''
  sortcat: ''
  name: Return to Vendors
  description: ''
  image: ''
  tags: ''
- building_block_id: directory
  type: University
  category: Scholarships
  sorttype: ''
  sortcat: ''
  name: Directory
  description: ''
  image: ''
  tags: ''
- building_block_id: consideration
  type: University
  category: Scholarships
  sorttype: ''
  sortcat: ''
  name: Consideration
  description: ''
  image: ''
  tags: ''
- building_block_id: disbursement
  type: University
  category: Scholarships
  sorttype: ''
  sortcat: ''
  name: Disbursement
  description: ''
  image: ''
  tags: ''
- building_block_id: director
  type: University
  category: Services
  sorttype: ''
  sortcat: ''
  name: Director
  description: ''
  image: ''
  tags: ''
- building_block_id: request
  type: University
  category: Services
  sorttype: ''
  sortcat: ''
  name: Request
  description: ''
  image: ''
  tags: ''
- building_block_id: directory
  type: University
  category: Vendors
  sorttype: ''
  sortcat: ''
  name: Directory
  description: ''
  image: ''
  tags: ''
- building_block_id: payments
  type: University
  category: Vendors
  sorttype: ''
  sortcat: ''
  name: Payments
  description: ''
  image: ''
  tags: ''
- building_block_id: vouchers
  type: University
  category: Vendors
  sorttype: ''
  sortcat: ''
  name: Vouchers
  description: ''
  image: ''
  tags: ''
- building_block_id: surveys
  type: University
  category: Other
  sorttype: ''
  sortcat: ''
  name: Surveys
  description: ''
  image: ''
  tags: ''
- building_block_id: news
  type: University
  category: Other
  sorttype: ''
  sortcat: ''
  name: News
  description: ''
  image: ''
  tags: ''
- building_block_id: glossary
  type: University
  category: Other
  sorttype: ''
  sortcat: ''
  name: Glossary
  description: ''
  image: ''
  tags: ''
- building_block_id: portal
  type: US-City-Government
  category: Operations
  sorttype: ''
  sortcat: ''
  name: Portal
  description: ''
  image: ''
  tags: City Government
- building_block_id: about
  type: US-City-Government
  category: Operations
  sorttype: ''
  sortcat: ''
  name: About
  description: ''
  image: ''
  tags: City Government
- building_block_id: getting-started
  type: US-City-Government
  category: Operations
  sorttype: ''
  sortcat: ''
  name: Getting Started
  description: ''
  image: ''
  tags: City Government
- building_block_id: faq
  type: US-City-Government
  category: Operations
  sorttype: ''
  sortcat: ''
  name: FAQ
  description: ''
  image: ''
  tags: City Government
- building_block_id: github
  type: US-City-Government
  category: Operations
  sorttype: ''
  sortcat: ''
  name: Github
  description: ''
  image: ''
  tags: City Government
- building_block_id: google-group
  type: US-City-Government
  category: Operations
  sorttype: ''
  sortcat: ''
  name: Google Group
  description: ''
  image: ''
  tags: City Government
- building_block_id: blog
  type: US-City-Government
  category: Operations
  sorttype: ''
  sortcat: ''
  name: Blog
  description: ''
  image: ''
  tags: City Government
- building_block_id: blog-rss
  type: US-City-Government
  category: Operations
  sorttype: ''
  sortcat: ''
  name: Blog RSS
  description: ''
  image: ''
  tags: City Government
- building_block_id: updates-rss
  type: US-City-Government
  category: Operations
  sorttype: ''
  sortcat: ''
  name: Updates RSS
  description: ''
  image: ''
  tags: City Government
- building_block_id: calendar
  type: US-City-Government
  category: Operations
  sorttype: ''
  sortcat: ''
  name: Calendar
  description: ''
  image: ''
  tags: City Government
- building_block_id: twitter
  type: US-City-Government
  category: Operations
  sorttype: ''
  sortcat: ''
  name: Twitter
  description: ''
  image: ''
  tags: City Government
- building_block_id: facebook
  type: US-City-Government
  category: Operations
  sorttype: ''
  sortcat: ''
  name: Facebook
  description: ''
  image: ''
  tags: City Government
- building_block_id: linkedin
  type: US-City-Government
  category: Operations
  sorttype: ''
  sortcat: ''
  name: LinkedIn
  description: ''
  image: ''
  tags: City Government
- building_block_id: email
  type: US-City-Government
  category: Operations
  sorttype: ''
  sortcat: ''
  name: Email
  description: ''
  image: ''
  tags: City Government
- building_block_id: flickr
  type: US-City-Government
  category: Operations
  sorttype: ''
  sortcat: ''
  name: Flickr
  description: ''
  image: ''
  tags: City Government
- building_block_id: youtube
  type: US-City-Government
  category: Operations
  sorttype: ''
  sortcat: ''
  name: Youtube
  description: ''
  image: ''
  tags: City Government
- building_block_id: analytics
  type: US-City-Government
  category: Operations
  sorttype: ''
  sortcat: ''
  name: Analytics
  description: ''
  image: ''
  tags: City Government
- building_block_id: data-wish
  type: US-City-Government
  category: Operations
  sorttype: ''
  sortcat: ''
  name: Data Wish
  description: ''
  image: ''
  tags: City Government
- building_block_id: app-wish
  type: US-City-Government
  category: Operations
  sorttype: ''
  sortcat: ''
  name: App Wish
  description: ''
  image: ''
  tags: City Government
- building_block_id: showcase
  type: US-City-Government
  category: Operations
  sorttype: ''
  sortcat: ''
  name: Showcase
  description: ''
  image: ''
  tags: City Government
- building_block_id: idea-gallery
  type: US-City-Government
  category: Operations
  sorttype: ''
  sortcat: ''
  name: Idea Gallery
  description: ''
  image: ''
  tags: City Government
- building_block_id: submit-data
  type: US-City-Government
  category: Operations
  sorttype: ''
  sortcat: ''
  name: Submit Data
  description: ''
  image: ''
  tags: City Government
- building_block_id: terms-of-use
  type: US-City-Government
  category: Operations
  sorttype: ''
  sortcat: ''
  name: Terms of Use
  description: ''
  image: ''
  tags: City Government
- building_block_id: privacy-policy
  type: US-City-Government
  category: Operations
  sorttype: ''
  sortcat: ''
  name: Privacy Policy
  description: ''
  image: ''
  tags: City Government
- building_block_id: arts
  type: US-City-Government
  category: Areas
  sorttype: ''
  sortcat: ''
  name: Arts
  description: ''
  image: ''
  tags: City Government
- building_block_id: business
  type: US-City-Government
  category: Areas
  sorttype: ''
  sortcat: ''
  name: Business
  description: ''
  image: ''
  tags: City Government
- building_block_id: demographic
  type: US-City-Government
  category: Areas
  sorttype: ''
  sortcat: ''
  name: Demographic
  description: ''
  image: ''
  tags: City Government
- building_block_id: employee
  type: US-City-Government
  category: Areas
  sorttype: ''
  sortcat: ''
  name: Employee
  description: ''
  image: ''
  tags: City Government
- building_block_id: environment
  type: US-City-Government
  category: Areas
  sorttype: ''
  sortcat: ''
  name: Environment
  description: ''
  image: ''
  tags: City Government
- building_block_id: food
  type: US-City-Government
  category: Areas
  sorttype: ''
  sortcat: ''
  name: Food
  description: ''
  image: ''
  tags: City Government
- building_block_id: energy
  type: US-City-Government
  category: Areas
  sorttype: ''
  sortcat: ''
  name: Energy
  description: ''
  image: ''
  tags: City Government
- building_block_id: elections
  type: US-City-Government
  category: Areas
  sorttype: ''
  sortcat: ''
  name: Elections
  description: ''
  image: ''
  tags: City Government
- building_block_id: finance
  type: US-City-Government
  category: Areas
  sorttype: ''
  sortcat: ''
  name: Finance
  description: ''
  image: ''
  tags: City Government
- building_block_id: facilities
  type: US-City-Government
  category: Areas
  sorttype: ''
  sortcat: ''
  name: Facilities
  description: ''
  image: ''
  tags: City Government
- building_block_id: housing
  type: US-City-Government
  category: Areas
  sorttype: ''
  sortcat: ''
  name: Housing
  description: ''
  image: ''
  tags: City Government
- building_block_id: health
  type: US-City-Government
  category: Areas
  sorttype: ''
  sortcat: ''
  name: Health
  description: ''
  image: ''
  tags: City Government
- building_block_id: library
  type: US-City-Government
  category: Areas
  sorttype: ''
  sortcat: ''
  name: Library
  description: ''
  image: ''
  tags: City Government
- building_block_id: mapping
  type: US-City-Government
  category: Areas
  sorttype: ''
  sortcat: ''
  name: Mapping
  description: ''
  image: ''
  tags: City Government
- building_block_id: management
  type: US-City-Government
  category: Areas
  sorttype: ''
  sortcat: ''
  name: Management
  description: ''
  image: ''
  tags: City Government
- building_block_id: parks--recreation
  type: US-City-Government
  category: Areas
  sorttype: ''
  sortcat: ''
  name: Parks & Recreation
  description: ''
  image: ''
  tags: City Government
- building_block_id: public-safety
  type: US-City-Government
  category: Areas
  sorttype: ''
  sortcat: ''
  name: Public Safety
  description: ''
  image: ''
  tags: City Government
- building_block_id: public-planning
  type: US-City-Government
  category: Areas
  sorttype: ''
  sortcat: ''
  name: Public Planning
  description: ''
  image: ''
  tags: City Government
- building_block_id: real-estate
  type: US-City-Government
  category: Areas
  sorttype: ''
  sortcat: ''
  name: Real Estate
  description: ''
  image: ''
  tags: City Government
- building_block_id: programs
  type: US-City-Government
  category: Areas
  sorttype: ''
  sortcat: ''
  name: Programs
  description: ''
  image: ''
  tags: City Government
- building_block_id: social-services
  type: US-City-Government
  category: Areas
  sorttype: ''
  sortcat: ''
  name: Social Services
  description: ''
  image: ''
  tags: City Government
- building_block_id: sanitation
  type: US-City-Government
  category: Areas
  sorttype: ''
  sortcat: ''
  name: Sanitation
  description: ''
  image: ''
  tags: City Government
- building_block_id: streets
  type: US-City-Government
  category: Areas
  sorttype: ''
  sortcat: ''
  name: Streets
  description: ''
  image: ''
  tags: City Government
- building_block_id: neighborhood
  type: US-City-Government
  category: Areas
  sorttype: ''
  sortcat: ''
  name: Neighborhood
  description: ''
  image: ''
  tags: City Government
- building_block_id: transportation
  type: US-City-Government
  category: Areas
  sorttype: ''
  sortcat: ''
  name: Transportation
  description: ''
  image: ''
  tags: City Government
- building_block_id: open-data-policy
  type: US-City-Government
  category: Guide
  sorttype: ''
  sortcat: ''
  name: Open Data Policy
  description: ''
  image: ''
  tags: City Government
- building_block_id: open-data-handbook
  type: US-City-Government
  category: Guide
  sorttype: ''
  sortcat: ''
  name: Open Data Handbook
  description: ''
  image: ''
  tags: City Government
- building_block_id: mock
  type: Virtualization
  category: Core Virtualization
  sorttype: ''
  sortcat: ''
  name: Mock
  description: Creation of mock API interfaces that matches a specific API definition.
  image: ''
  tags: Virtualization
- building_block_id: sandbox
  type: Virtualization
  category: Core Virtualization
  sorttype: ''
  sortcat: ''
  name: Sandbox
  description: Generation of a sandbox environment that matches a specific API definition.
  image: ''
  tags: Virtualization
- building_block_id: simulator
  type: Virtualization
  category: Core Virtualization
  sorttype: ''
  sortcat: ''
  name: Simulator
  description: Creation of simulation environments from existing definitions.
  image: ''
  tags: Virtualization
- building_block_id: record
  type: Virtualization
  category: Core Virtualization
  sorttype: ''
  sortcat: ''
  name: Record
  description: Recording the setup of a virtualization environment for use at later date.
  image: ''
  tags: Virtualization
- building_block_id: playback
  type: Virtualization
  category: Core Virtualization
  sorttype: ''
  sortcat: ''
  name: Playback
  description: >-
    Setup of a virtualized environment captured from recording of earlier
    instance.
  image: ''
  tags: Virtualization
- building_block_id: verification
  type: Virtualization
  category: Core Virtualization
  sorttype: ''
  sortcat: ''
  name: Verification
  description: >-
    Verification that a virtualization environment exists and matches existing
    definition.
  image: ''
  tags: Virtualization
- building_block_id: port-forwarding
  type: Virtualization
  category: Core Virtualization
  sorttype: ''
  sortcat: ''
  name: Port Forwarding
  description: Forward of specific ports to a specific virtualized API instance.
  image: ''
  tags: Virtualization
- building_block_id: ssl
  type: Virtualization
  category: Core Virtualization
  sorttype: ''
  sortcat: ''
  name: SSL
  description: Use of SSL when communicating with virtualized API instances.
  image: ''
  tags: Virtualization
- building_block_id: templates
  type: Virtualization
  category: Data Virtualization
  sorttype: ''
  sortcat: ''
  name: Templates
  description: >-
    Being able to create templates of data to be used when virtualized APIs are
    setup.
  image: ''
  tags: Virtualization
- building_block_id: dummy-data
  type: Virtualization
  category: Data Virtualization
  sorttype: ''
  sortcat: ''
  name: Dummy Data
  description: >-
    Dummy data sets that can be imported individually or as collections into
    virtualized APIs.
  image: ''
  tags: Virtualization
- building_block_id: excel-data
  type: Virtualization
  category: Data Virtualization
  sorttype: ''
  sortcat: ''
  name: Excel Data
  description: >-
    Import of data from Microsoft Excel spreadsheets or Google sheets into
    virtualized APIs.
  image: ''
  tags: Virtualization
- building_block_id: import-openapi-spec
  type: Virtualization
  category: Import / Export
  sorttype: ''
  sortcat: ''
  name: Import OpenAPI Spec
  description: >-
    Allow for the creation of virtualized APIs using existing OpenAPI Spec
    definitions.
  image: ''
  tags: Virtualization
- building_block_id: import-raml
  type: Virtualization
  category: Import / Export
  sorttype: ''
  sortcat: ''
  name: Import RAML
  description: Allow for the creation of virtualized APIs using existing RAML definitions.
  image: ''
  tags: Virtualization
- building_block_id: import-api-blueprint
  type: Virtualization
  category: Import / Export
  sorttype: ''
  sortcat: ''
  name: Import API Blueprint
  description: >-
    Allow for the creation of virtualized APIs using existing API Blueprint
    definitions.
  image: ''
  tags: Virtualization
- building_block_id: import-wadl
  type: Virtualization
  category: Import / Export
  sorttype: ''
  sortcat: ''
  name: Import WADL
  description: Allow for the creation of virtualized APIs using existing WADL definitions.
  image: ''
  tags: Virtualization
- building_block_id: import-postman
  type: Virtualization
  category: Import / Export
  sorttype: ''
  sortcat: ''
  name: Import Postman
  description: >-
    Allow for the creation of virtualized APIs using existing Postman
    definitions.
  image: ''
  tags: Virtualization
- building_block_id: reporting
  type: Virtualization
  category: Other Elements
  sorttype: ''
  sortcat: ''
  name: Reporting
  description: >-
    Providing reporting tools on virtualized instances, providing developers and
    consumers with snapshots of activity.
  image: ''
  tags: Virtualization
- building_block_id: analytics
  type: Virtualization
  category: Other Elements
  sorttype: ''
  sortcat: ''
  name: Analytics
  description: >-
    Provide real-time, and other analytics that give details of what is
    happening with virtualized APIs as they operate.
  image: ''
  tags: Virtualization
- building_block_id: teams
  type: Virtualization
  category: Other Elements
  sorttype: ''
  sortcat: ''
  name: Teams
  description: >-
    Provide team tooling, allowing multiple individuals to work together when
    monitoring API virtualizations.
  image: ''
  tags: Virtualization
- building_block_id: sandbox-invites
  type: Virtualization
  category: Other Elements
  sorttype: ''
  sortcat: ''
  name: Sandbox Invites
  description: >-
    Providing an invite system, to allow for the invitation of other users to a
    sandbox environment. Provide ability to send, manage, and revoke.
  image: ''
  tags: ''
- building_block_id: url
  type: Webhooks
  category: Core
  sorttype: ''
  sortcat: ''
  name: URL
  description: Tooling for managing the URL of a Webhook.
  image: ''
  tags: Webhooks
- building_block_id: payload
  type: Webhooks
  category: Core
  sorttype: ''
  sortcat: ''
  name: Payload
  description: Editing what goes into the payload of the Webhook.
  image: ''
  tags: Webhooks
- building_block_id: event
  type: Webhooks
  category: Core
  sorttype: ''
  sortcat: ''
  name: Event
  description: Selecting which events triggers a Webhook.
  image: ''
  tags: Webhooks
- building_block_id: content-type
  type: Webhooks
  category: Core
  sorttype: ''
  sortcat: ''
  name: Content Type
  description: Selecting the content type for a Webhooks being submitted.
  image: ''
  tags: Webhooks
- building_block_id: webhooks-targets
  type: Webhooks
  category: Inbound
  sorttype: ''
  sortcat: ''
  name: Webhooks Targets
  description: >-
    Providing targets where Webhooks can post information, with targets then
    providing other services once received.
  image: ''
  tags: Webhooks
- building_block_id: webhook-targets
  type: Webhooks
  category: Outbound
  sorttype: ''
  sortcat: ''
  name: Webhook Targets
  description: Give users the ability to set outbound webhook targets for the platform.
  image: ''
  tags: ''
- building_block_id: multiple-destinations
  type: Webhooks
  category: Outbound
  sorttype: ''
  sortcat: ''
  name: Multiple Destinations
  description: >-
    Sending of received Webhooks to multiple destinations once received,
    providing routing opportunities for Webhooks.
  image: ''
  tags: Webhooks
- building_block_id: scheduling
  type: Webhooks
  category: Outbound
  sorttype: ''
  sortcat: ''
  name: Scheduling
  description: >-
    Running code that can be used as webhook target, also as schedule jobs
    allowing them to trigger on schedule instead of just events.
  image: ''
  tags: Webhooks
- building_block_id: api
  type: Webhooks
  category: Utilities
  sorttype: ''
  sortcat: ''
  name: API
  description: >-
    API infrastructure for managing webhooks configuration, and operation on a
    platform, allowing API consumers to orchestrate their webhooks architecture.
  image: ''
  tags: ''
- building_block_id: transformations
  type: Webhooks
  category: Utilities
  sorttype: ''
  sortcat: ''
  name: Transformations
  description: >-
    Allow for transformations of received webhooks before they are sent
    elsewhere.
  image: ''
  tags: Webhooks
- building_block_id: scripting
  type: Webhooks
  category: Utilities
  sorttype: ''
  sortcat: ''
  name: Scripting
  description: >-
    Providing scripting tools for creating of webhook targets, transformation,
    and other webhook functions.
  image: ''
  tags: Webhooks
- building_block_id: retry
  type: Webhooks
  category: Utilities
  sorttype: ''
  sortcat: ''
  name: Retry
  description: >-
    Allowing for the retry of any webhook, based upon specific events or
    schedule.
  image: ''
  tags: Webhooks
- building_block_id: analytics
  type: Webhooks
  category: Operations
  sorttype: ''
  sortcat: ''
  name: Analytics
  description: >-
    Providing analytics on webhooks activity, triggers, usage, and other aspects
    of operations.
  image: ''
  tags: Webhooks
- building_block_id: emails
  type: Webhooks
  category: Operations
  sorttype: ''
  sortcat: ''
  name: Emails
  description: >-
    Trigger the sending of emails when webhooks are triggered, received, or
    other aspects of operations.
  image: ''
  tags: Webhooks
- building_block_id: logging
  type: Webhooks
  category: Operations
  sorttype: ''
  sortcat: ''
  name: Logging
  description: The logging of all activity generated via webhook activity.
  image: ''
  tags: Webhooks
- building_block_id: alerts
  type: Webhooks
  category: Operations
  sorttype: ''
  sortcat: ''
  name: Alerts
  description: >-
    Triggering of alerts based upon events, schedule, and other webhook
    operations.
  image: ''
  tags: Webhooks
- building_block_id: simulator
  type: Webhooks
  category: Operations
  sorttype: ''
  sortcat: ''
  name: Simulator
  description: >-
    Being able to simulate the occurrence of a webhook without the actual event
    being triggered..
  image: ''
  tags: Webhooks
- building_block_id: github
  type: Webhooks
  category: 3rd Party Integration
  sorttype: ''
  sortcat: ''
  name: Github
  description: >-
    Providing Github integration for webhook targets, scripts, and other
    elements of operation.
  image: ''
  tags: Webhooks
- building_block_id: none
  type: Deprecation
  category: Types
  sorttype: ''
  sortcat: ''
  name: Individual API Endpoints
  description: >-
    Looking to have a plan for the deprecation of individual APIs, or sets of
    APIs.
  image: none
  tags: Deprecation
- building_block_id: none
  type: Deprecation
  category: Types
  sorttype: ''
  sortcat: ''
  name: Individual API Tooling
  description: >-
    An approach to how you deprecate one of the client solutions available on
    API platform.
  image: none
  tags: Deprecation
- building_block_id: none
  type: Deprecation
  category: Types
  sorttype: ''
  sortcat: ''
  name: Entire Platform Shutdown
  description: >-
    What is the plan for an entire platform shutdown, ceasing all API
    operations.
  image: none
  tags: Deprecation
- building_block_id: none
  type: Deprecation
  category: Types
  sorttype: ''
  sortcat: ''
  name: Enter Platform Safe Mode
  description: >-
    What is the plan for just putting the platform into safe mode, and still
    operating.
  image: none
  tags: Deprecation
- building_block_id: none
  type: Deprecation
  category: Runway
  sorttype: ''
  sortcat: ''
  name: Initial Expectation Set
  description: >-
    What expectations are, or have been set early on in the API design, and
    deployment parts of the life cycle when it comes to API deprecation.
  image: none
  tags: Deprecation
- building_block_id: none
  type: Deprecation
  category: Runway
  sorttype: ''
  sortcat: ''
  name: Legal Department
  description: >-
    What legally has been provided in terms of service, privacy policy, and
    other parts of the legal department for a platform.
  image: none
  tags: Deprecation
- building_block_id: none
  type: Deprecation
  category: Runway
  sorttype: ''
  sortcat: ''
  name: First Decision
  description: >-
    Establishing that an API or platform will need to be deprecated. Recording
    the date, time, and other key details on what this decision was reached.
  image: none
  tags: Deprecation
- building_block_id: none
  type: Deprecation
  category: Runway
  sorttype: ''
  sortcat: ''
  name: First Notice
  description: >-
    What is the time to the first external notice, either privately to partners,
    or also publicly to the general community.
  image: none
  tags: Deprecation
- building_block_id: none
  type: Deprecation
  category: Runway
  sorttype: ''
  sortcat: ''
  name: Lock-down New Signups
  description: >-
    When will new signups for the platform be locked down, stopping all new user
    and application registration.
  image: none
  tags: Deprecation
- building_block_id: none
  type: Deprecation
  category: Runway
  sorttype: ''
  sortcat: ''
  name: Lock-down New Writes
  description: >-
    When will all POST, PUT, and other write capabilities be locked down, making
    it easier to stabilize, sync, and migrate for final shut down.
  image: none
  tags: Deprecation
- building_block_id: none
  type: Deprecation
  category: Runway
  sorttype: ''
  sortcat: ''
  name: Light Switch Flicking
  description: >-
    Will there be light switch flicking, or dark-out testing, which send real
    world pain to API consumers, reminding them that a shutdown is imminent.
  image: none
  tags: Deprecation
- building_block_id: none
  type: Deprecation
  category: Runway
  sorttype: ''
  sortcat: ''
  name: Other Milestones
  description: >-
    What other milestones are there that will be important to internal, partner,
    and public stakeholders?
  image: none
  tags: Deprecation
- building_block_id: none
  type: Deprecation
  category: Runway
  sorttype: ''
  sortcat: ''
  name: Final Date
  description: >-
    What is the final date for shutdown, requiring all syncs, migrations,
    exports, and integration to completely cease.
  image: none
  tags: Deprecation
- building_block_id: none
  type: Deprecation
  category: Communication
  sorttype: ''
  sortcat: ''
  name: Key Players
  description: >-
    As soon as the first decision to deprecate is made, who are the key players,
    and stake holder that need to be contacted, and made aware of the API
    deprecation.
  image: none
  tags: Deprecation
- building_block_id: none
  type: Deprecation
  category: Communication
  sorttype: ''
  sortcat: ''
  name: Public Players
  description: >-
    Once key stakeholders are made aware, what is the plan to go public, and
    make the general community, and industry aware that the API deprecation is
    imminent.
  image: none
  tags: Deprecation
- building_block_id: none
  type: Deprecation
  category: Communication
  sorttype: ''
  sortcat: ''
  name: Schedule (Runway)
  description: >-
    What does the entire runway look like, with as complete schedule from first
    decision, to final date -- including a communication schedule documented
    along the way.
  image: none
  tags: Deprecation
- building_block_id: none
  type: Deprecation
  category: Communication
  sorttype: ''
  sortcat: ''
  name: Historical
  description: >-
    What historical communications will be made available from blog posts, to
    tweets, documentation, and other communication focused efforts.
  image: none
  tags: Deprecation
- building_block_id: none
  type: Deprecation
  category: Communication
  sorttype: ''
  sortcat: ''
  name: Be Real
  description: 'Make sure that you are genuine in your plans, communication, and out reach.'
  image: none
  tags: Deprecation
- building_block_id: none
  type: Deprecation
  category: Communication
  sorttype: ''
  sortcat: ''
  name: Be Friendly
  description: Be as friendly as you can. It will be a hard time for everyone involved.
  image: none
  tags: Deprecation
- building_block_id: none
  type: Deprecation
  category: Communication
  sorttype: ''
  sortcat: ''
  name: Be Transparent
  description: 'Try to be as transparent as you possibly can, throughout the process.'
  image: none
  tags: Deprecation
- building_block_id: none
  type: Deprecation
  category: Communication
  sorttype: ''
  sortcat: ''
  name: Be Respectful
  description: 'Showing respect for your consumers, and their challenges will go a long way.'
  image: none
  tags: Deprecation
- building_block_id: none
  type: Deprecation
  category: Communication
  sorttype: ''
  sortcat: ''
  name: PR Campaign
  description: 'Craft a public relations plan, and execute it well. Don''t take shortcuts.'
  image: none
  tags: Deprecation
- building_block_id: none
  type: Deprecation
  category: Communication
  sorttype: ''
  sortcat: ''
  name: Communicate Often
  description: >-
    Make sure and email, post to blog, tweet, and communicate regulatly about
    the deprecation.
  image: none
  tags: Deprecation
- building_block_id: none
  type: Deprecation
  category: Tooling
  sorttype: ''
  sortcat: ''
  name: Data Migration
  description: >-
    What data migration tools, services, and support will be made available to
    help customers get their data off of a platform, and somewhere where they
    can put to use.
  image: none
  tags: Deprecation
- building_block_id: none
  type: Deprecation
  category: Tooling
  sorttype: ''
  sortcat: ''
  name: Settings Migration
  description: >-
    Will there be the opportunity to export settings, and other configurations,
    so that they can be applied into other external systems, either
    automatically, or manually.
  image: none
  tags: Deprecation
- building_block_id: none
  type: Deprecation
  category: Tooling
  sorttype: ''
  sortcat: ''
  name: Data Sync
  description: >-
    Are there any real-time data sync opportunities, to help reduce the amount
    of work that is needed at the time of shutdown, slowly getting API consumers
    offloaded to their new solution.
  image: none
  tags: Deprecation
- building_block_id: none
  type: Deprecation
  category: Tooling
  sorttype: ''
  sortcat: ''
  name: Data Portability
  description: >-
    Beyond migration, and syncing, can API consumers get raw dumps of all of
    their usage data, as well as any other object, and entity they have stored
    via API operations.
  image: none
  tags: Deprecation
- building_block_id: none
  type: Deprecation
  category: Licensing
  sorttype: ''
  sortcat: ''
  name: Data License
  description: How will data be licensed after things are shut down?
  image: none
  tags: Deprecation
- building_block_id: none
  type: Deprecation
  category: Licensing
  sorttype: ''
  sortcat: ''
  name: Server Code
  description: What server code will be made available as open source license?
  image: none
  tags: Deprecation
- building_block_id: none
  type: Deprecation
  category: Licensing
  sorttype: ''
  sortcat: ''
  name: Client Code
  description: What client code will be made available as open source license?
  image: none
  tags: Deprecation
- building_block_id: none
  type: Deprecation
  category: Licensing
  sorttype: ''
  sortcat: ''
  name: API License
  description: 'How will the API definition, and data schema be licensed for reuse?'
  image: none
  tags: Deprecation
- building_block_id: none
  type: Deprecation
  category: Virtualization
  sorttype: ''
  sortcat: ''
  name: AWS AMI
  description: >-
    Will there be an Amazaon AMI made available for any server or client
    implementations?
  image: none
  tags: Deprecation
- building_block_id: none
  type: Deprecation
  category: Virtualization
  sorttype: ''
  sortcat: ''
  name: Heroku Deploy
  description: >-
    Will there be Heroku deployment made available for any server or client
    implementations?
  image: none
  tags: Deprecation
- building_block_id: none
  type: Deprecation
  category: Virtualization
  sorttype: ''
  sortcat: ''
  name: Docker Image
  description: >-
    Will there be Docker images made available for any server or client
    implementations?
  image: none
  tags: Deprecation
- building_block_id: none
  type: Deprecation
  category: Management
  sorttype: ''
  sortcat: ''
  name: Github Repo
  description: >-
    Will a dedicated Github repository be made available for the company,
    platform, API, or other aspects of opportunity, made available for capturing
    any remaining code, data, and content.
  image: none
  tags: Deprecation
- building_block_id: none
  type: Deprecation
  category: Management
  sorttype: ''
  sortcat: ''
  name: Github Issues
  description: >-
    Is there a Github issues established for handling all concerns, and
    conversations around the API deprecation.
  image: none
  tags: Deprecation
- building_block_id: none
  type: Deprecation
  category: Management
  sorttype: ''
  sortcat: ''
  name: API Purgatory
  description: >-
    Have you contacted Kin Lane, the API Evangelist, so he can take a snapshot
    of your API, for inclusion in the API Purgatory Museum.
  image: none
  tags: Deprecation
- building_block_id: none
  type: Deprecation
  category: Management
  sorttype: ''
  sortcat: ''
  name: X-API-Warn
  description: Using the X-API-Warn header for all requests made to any deprecated APIs.
  image: none
  tags: Deprecation
- building_block_id: none
  type: Deprecation
  category: Support
  sorttype: ''
  sortcat: ''
  name: Contact Person
  description: >-
    Who is the person (name, email, Twitter, and Github) who is the point of
    contact for the API deprecation process.
  image: none
  tags: Deprecation
- building_block_id: none
  type: Deprecation
  category: Support
  sorttype: ''
  sortcat: ''
  name: Migration Partners
  description: >-
    Are there any migration partners that can help out during any migrations,
    syncing, configuration, and setup of external solutions.
  image: none
  tags: Deprecation
- building_block_id: none
  type: Deprecation
  category: Support
  sorttype: ''
  sortcat: ''
  name: Migration Locations
  description: >-
    Are there any other existing platforms, including competitors, that you can
    point API consumers to, as an alternative to the API being deprecated.
  image: none
  tags: Deprecation
- building_block_id: none
  type: iPaaS
  category: Authentication
  sorttype: ''
  sortcat: ''
  name: General
  description: >-
    Providing the mechanisms for the most common approaches to API
    authentication, including basic auth, digest auth, session based, oAuth.
  image: ''
  tags: iPaaS
- building_block_id: none
  type: iPaaS
  category: Action
  sorttype: ''
  sortcat: ''
  name: Triggers
  description: >-
    Provide the framework to use verbs and nouns, with help text, and webhook
    infrastructure to trigger anything users will desire.
  image: ''
  tags: iPaaS
- building_block_id: none
  type: iPaaS
  category: Action
  sorttype: ''
  sortcat: ''
  name: Actions
  description: >-
    Provide the framework to use verbs and nouns, with help text, and webhook
    infrastructure to accomplish an action users will desire.
  image: ''
  tags: iPaaS
- building_block_id: none
  type: iPaaS
  category: Action
  sorttype: ''
  sortcat: ''
  name: Searches
  description: >-
    Allowing for simple questions to be asked, and provide a framework to allow
    APIs to e employed in answering any question asked.
  image: ''
  tags: iPaaS
- building_block_id: none
  type: iPaaS
  category: Automation
  sorttype: ''
  sortcat: ''
  name: Webhooks
  description: >-
    Putting the automation in API integration, allowing for webhooks that can be
    triggered, and used as part of actions.
  image: ''
  tags: iPaaS
- building_block_id: none
  type: iPaaS
  category: Automation
  sorttype: ''
  sortcat: ''
  name: Notifications
  description: >-
    Using notifications throughout the process to keep the platform, developers,
    and end-users informed about anything that is relevant.
  image: ''
  tags: iPaaS
- building_block_id: none
  type: iPaaS
  category: Action
  sorttype: ''
  sortcat: ''
  name: Scripting
  description: >-
    Allowing for code integration for calculating, converting, and manipulating
    data as part of any step of the process.
  image: ''
  tags: iPaaS
- building_block_id: none
  type: iPaaS
  category: Action
  sorttype: ''
  sortcat: ''
  name: Multi-Step
  description: >-
    Going beyond just just triggers and actions, and allowing for multi-step
    workflows that put multiple APIs to use.
  image: ''
  tags: iPaaS
- building_block_id: none
  type: iPaaS
  category: Action
  sorttype: ''
  sortcat: ''
  name: Activation
  description: >-
    Allowing developers and end-users of the integration, and automation to
    decide whether the process is invite only, private, or publicly available.
  image: ''
  tags: iPaaS
